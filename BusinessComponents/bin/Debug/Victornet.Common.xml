<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Victornet.Common</name>
    </assembly>
    <members>
        <member name="T:Victornet.Common.ApplicationData">
            <summary>
            应用数据实体类
            </summary>
        </member>
        <member name="M:Victornet.Common.ApplicationData.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Victornet.Common.ApplicationData.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Victornet.Common.ApplicationData.ApplicationId">
             <summary>
            ApplicationId
             </summary>
        </member>
        <member name="P:Victornet.Common.ApplicationData.TenantTypeId">
             <summary>
            租户类型Id
             </summary>
        </member>
        <member name="P:Victornet.Common.ApplicationData.Datakey">
             <summary>
            数据键值（要求Application内唯一）
             </summary>
        </member>
        <member name="P:Victornet.Common.ApplicationData.LongValue">
             <summary>
            long数据值
             </summary>
        </member>
        <member name="P:Victornet.Common.ApplicationData.DecimalValue">
             <summary>
            decimal数据值
             </summary>
        </member>
        <member name="P:Victornet.Common.ApplicationData.StringValue">
             <summary>
            字符串数据值
             </summary>
        </member>
        <member name="T:Victornet.Common.ApplicationDataKeys">
            <summary>
            应用数据标识
            </summary>
        </member>
        <member name="M:Victornet.Common.ApplicationDataKeys.Instance">
            <summary>
            获取单例
            </summary>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.ApplicationDataService">
            <summary>
            应用数据业务逻辑类
            </summary>
        </member>
        <member name="M:Victornet.Common.ApplicationDataService.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Victornet.Common.ApplicationDataService.#ctor(Victornet.Common.Repositories.IApplicationDataRepository)">
            <summary>
            构造器
            </summary>
            <param name="applicationDataRepository">应用数据仓储</param>
        </member>
        <member name="M:Victornet.Common.ApplicationDataService.Change(System.Int32,System.String,System.Int64)">
            <summary>
            变更应用数据
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的数值</param>
        </member>
        <member name="M:Victornet.Common.ApplicationDataService.Change(System.Int32,System.String,System.Decimal)">
            <summary>
            变更应用数据
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的数值</param>
        </member>
        <member name="M:Victornet.Common.ApplicationDataService.Change(System.Int32,System.String,System.String)">
            <summary>
            变更应用数据
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的值</param>
        </member>
        <member name="M:Victornet.Common.ApplicationDataService.Change(System.Int32,System.String,System.String,System.Int64)">
            <summary>
            变更应用数据
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="tenantTypeId">租户类型Id</param> 
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的数值</param>
        </member>
        <member name="M:Victornet.Common.ApplicationDataService.Change(System.Int32,System.String,System.String,System.Decimal)">
            <summary>
            变更应用数据
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="tenantTypeId">租户类型Id</param> 
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的数值</param>
        </member>
        <member name="M:Victornet.Common.ApplicationDataService.Change(System.Int32,System.String,System.String,System.String)">
            <summary>
            变更应用数据
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="tenantTypeId">租户类型Id</param> 
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的值</param>
        </member>
        <member name="M:Victornet.Common.ApplicationDataService.GetLong(System.Int32,System.String,System.String)">
            <summary>
            获取DataKey对应的长整形
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="dataKey">DataKey</param>
            <param name="tenantTypeId">租户类型Id</param> 
            <returns>dataKey不存在时返回0</returns>
        </member>
        <member name="M:Victornet.Common.ApplicationDataService.GetDecimal(System.Int32,System.String,System.String)">
            <summary>
            获取DataKey对应的Decimal
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="dataKey">DataKey</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns>dataKey不存在时返回0</returns>
        </member>
        <member name="M:Victornet.Common.ApplicationDataService.GetString(System.Int32,System.String,System.String)">
            <summary>
            获取DataKey对应的String
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="dataKey">DataKey</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns>dataKey不存在时返回空字符串</returns>
        </member>
        <member name="T:Victornet.Common.IApplicationDataCalculater">
            <summary>
            ApplicationData计算器接口
            </summary>
        </member>
        <member name="M:Victornet.Common.IApplicationDataCalculater.Calculate">
            <summary>
            计算ApplicationData
            </summary>
        </member>
        <member name="T:Victornet.Common.Repositories.ApplicationDataRepository">
            <summary>
            应用数据Repository
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.ApplicationDataRepository.Change(System.Int32,System.String,System.Int64)">
            <summary>
            变更系统数据
            </summary>
            <param name="applicationId">applicationId</param>
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的数值</param>
        </member>
        <member name="M:Victornet.Common.Repositories.ApplicationDataRepository.Change(System.Int32,System.String,System.String,System.Int64)">
            <summary>
            变更应用数据
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="tenantTypeId">租户类型Id</param> 
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的数值</param>
        </member>
        <member name="M:Victornet.Common.Repositories.ApplicationDataRepository.Change(System.Int32,System.String,System.Decimal)">
            <summary>
            变更系统数据
            </summary>
            <param name="applicationId">applicationId</param>
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的数值</param>
        </member>
        <member name="M:Victornet.Common.Repositories.ApplicationDataRepository.Change(System.Int32,System.String,System.String,System.Decimal)">
            <summary>
            变更应用数据
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="tenantTypeId">租户类型Id</param> 
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的数值</param>
        </member>
        <member name="M:Victornet.Common.Repositories.ApplicationDataRepository.Change(System.Int32,System.String,System.String)">
            <summary>
            变更应用数据
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的值</param>
        </member>
        <member name="M:Victornet.Common.Repositories.ApplicationDataRepository.Change(System.Int32,System.String,System.String,System.String)">
            <summary>
            变更应用数据
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="tenantTypeId">租户类型Id</param> 
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的数值</param>
        </member>
        <member name="M:Victornet.Common.Repositories.ApplicationDataRepository.Get(System.Int32,System.String)">
            <summary>
            获取ApplicationData
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="dataKey">数据标识</param>
        </member>
        <member name="M:Victornet.Common.Repositories.ApplicationDataRepository.Get(System.Int32,System.String,System.String)">
            <summary>
            获取ApplicationData
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="tenantTypeId">数据标识</param> 
            <param name="dataKey">数据标识</param>
        </member>
        <member name="M:Victornet.Common.Repositories.ApplicationDataRepository.GetAll(System.Int32,System.String)">
            <summary>
            获取DataKey对应的值
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="tenantTypeId">租户类型Id</param> 
        </member>
        <member name="M:Victornet.Common.Repositories.ApplicationDataRepository.GetCacheKey_GetApplicationData(System.Int32,System.String)">
            <summary>
            获取ApplicationData的CacheKey
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="dataKey">数据标识</param>
        </member>
        <member name="M:Victornet.Common.Repositories.ApplicationDataRepository.GetCacheKey_GetApplicationData(System.Int32,System.String,System.String)">
            <summary>
            获取ApplicationData的CacheKey
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="tenantTypeId">租户类型Id</param> 
            <param name="dataKey">数据标识</param>
        </member>
        <member name="M:Victornet.Common.Repositories.ApplicationDataRepository.GetCacheKey_GetAllApplicationData(System.Int32)">
            <summary>
            获取所有ApplicationData的CacheKey
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="tenantTypeId">租户类型Id</param> 
        </member>
        <member name="T:Victornet.Common.Repositories.IApplicationDataRepository">
            <summary>
            ApplicationData数据访问接口
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.IApplicationDataRepository.Change(System.Int32,System.String,System.Int64)">
            <summary>
            变更系统数据
            </summary>
            <param name="applicationId">applicationId</param>
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的数值</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IApplicationDataRepository.Change(System.Int32,System.String,System.String,System.Int64)">
            <summary>
            变更应用数据
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="tenantTypeId">租户类型Id</param> 
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的数值</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IApplicationDataRepository.Change(System.Int32,System.String,System.Decimal)">
            <summary>
            变更系统数据
            </summary>
            <param name="applicationId">applicationId</param>
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的数值</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IApplicationDataRepository.Change(System.Int32,System.String,System.String,System.Decimal)">
            <summary>
            变更应用数据
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="tenantTypeId">租户类型Id</param> 
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的数值</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IApplicationDataRepository.Change(System.Int32,System.String,System.String)">
            <summary>
            变更应用数据
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的值</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IApplicationDataRepository.Change(System.Int32,System.String,System.String,System.String)">
            <summary>
            变更应用数据
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="tenantTypeId">租户类型Id</param> 
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的数值</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IApplicationDataRepository.Get(System.Int32,System.String)">
            <summary>
            获取ApplicationData
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="dataKey">数据标识</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IApplicationDataRepository.Get(System.Int32,System.String,System.String)">
            <summary>
            获取ApplicationData
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="tenantTypeId">数据标识</param> 
            <param name="dataKey">数据标识</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IApplicationDataRepository.GetAll(System.Int32,System.String)">
            <summary>
            获取DataKey对应的值
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="tenantTypeId">租户类型Id</param> 
        </member>
        <member name="T:Victornet.Common.Repositories.AreaRepository">
            <summary>
            地区的数据访问类
            </summary>
        </member>
        <member name="P:Victornet.Common.Repositories.AreaRepository.RealTimeCacheHelper">
            <summary>
            缓存设置
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.AreaRepository.CreateDAO">
            <summary>
            默认Database实例
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.AreaRepository.Insert(Victornet.Common.Area)">
            <summary>
            插入地区数据
            </summary>
            <param name="area"></param>
        </member>
        <member name="M:Victornet.Common.Repositories.AreaRepository.Update(Victornet.Common.Area)">
            <summary>
            更新子节点信息
            </summary>
            <param name="area">要更新的地区实体</param>
            <returns>更新之后的实体</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.AreaRepository.Delete(System.String)">
            <summary>
            删除地区点
            </summary>
            <param name="areaCode">地区编码</param>
        </member>
        <member name="M:Victornet.Common.Repositories.AreaRepository.Get(System.String)">
            <summary>
            获取某一地区
            </summary>
            <param name="areaCode">地区编码</param>
            <returns>地区实体</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.AreaRepository.GetDescendants(System.String)">
            <summary>
            获取所有子地区
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.AreaRepository.GetRoots">
            <summary>
            获取根地区
            </summary>
            <returns>根地区列表</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.AreaRepository.GetAreaDictionary">
            <summary>
            获取地区的字典类型
            </summary>
            <returns>地区的字典类型</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.AreaRepository.RecursiveGetAllAreas(Victornet.Common.Area,System.Collections.Generic.Dictionary{System.String,Victornet.Common.Area}@)">
            <summary>
            递归获取parentArea所有子Area
            </summary>
            <param name="parentArea">父地区</param>
            <param name="allChildAreas">递归获取的所有子地区</param>
        </member>
        <member name="M:Victornet.Common.Repositories.AreaRepository.GetAllAreas">
            <summary>
            获取全部的地区的方法
            </summary>
            <returns>所有的地区</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.AreaRepository.Organize(System.Collections.Generic.List{Victornet.Common.Area},System.Int32)">
            <summary>
            生成类别深度信息并对类别进行计数统计
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.AreaRepository.GetCacheKey_AreaDictionary">
            <summary>
            获取地区的地点集合的cachekey
            </summary>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.Repositories.IAreaRepository">
            <summary>
            地区访问的借口
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.IAreaRepository.Update(Victornet.Common.Area)">
            <summary>
            更新地区
            </summary>
            <param name="area">地区</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IAreaRepository.Get(System.String)">
            <summary>
            获取地区
            </summary>
            <param name="areaCode">地区编码</param>
            <returns>地区</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IAreaRepository.GetRoots">
            <summary>
            获取根级地区列表
            </summary>
            <returns>根级地区列表</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IAreaRepository.GetDescendants(System.String)">
            <summary>
            获取某一地区的所有后代地区
            </summary>
            <param name="areaCode"></param>
            <returns>所有后代地区</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IAreaRepository.Insert(Victornet.Common.Area)">
            <summary>
            创建地区
            </summary>
            <param name="area">地区</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IAreaRepository.Delete(System.String)">
            <summary>
            删除地区
            </summary>
            <param name="areaCode">地区编码</param>
        </member>
        <member name="T:Victornet.Common.Repositories.IOwnerDataRepository">
            <summary>
            OwnerData数据访问接口
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.IOwnerDataRepository.Change(System.Int64,System.String,System.String,System.Int64)">
            <summary>
            变更系统数据
            </summary>
            <param name="ownerId">ownerId</param>
            <param name="tenantTypeId">租户类型</param>
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的数值</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IOwnerDataRepository.Change(System.Int64,System.String,System.String,System.Decimal)">
            <summary>
            变更系统数据
            </summary>
            <param name="ownerId">ownerId</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的数值</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IOwnerDataRepository.Change(System.Int64,System.String,System.String,System.String)">
            <summary>
            变更用户数据
            </summary>
            <param name="ownerId">用户Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的值</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IOwnerDataRepository.Get(System.Int64,System.String,System.String)">
            <summary>
            获取OwnerData
            </summary>
            <param name="ownerId">用户Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="dataKey">数据标识</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IOwnerDataRepository.GetAll(System.Int64,System.String)">
            <summary>
            获取DataKey对应的值
            </summary>
            <param name="ownerId">用户Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IOwnerDataRepository.GetPagingOwnerIds(System.String,System.String,System.Int32,System.Nullable{Victornet.Common.OwnerData_SortBy})">
            <summary>
            获取用户Id分页数据
            </summary>
            <param name="dataKey">dataKey</param>
            <param name="pageIndex">页码</param>
            <param name="sortBy">排序字段</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IOwnerDataRepository.GetTopOwnerIds(System.String,System.String,System.Int32,System.Nullable{Victornet.Common.OwnerData_SortBy})">
            <summary>
            获取前N个用户Id数据
            </summary>
            <param name="dataKey">dataKey</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="topNumber">获取记录的个数</param>
            <param name="sortBy">排序字段</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IOwnerDataRepository.ClearOwnerData(System.Int64,System.String)">
            <summary>
            清除指定用户的用户数据
            </summary>
            <param name="ownerId">用户Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IOwnerDataRepository.Gets(System.Int64,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            批量获取拥有者的数据统计
            </summary>
            <param name="ownerId"></param>
            <param name="dataKeys"></param>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.Repositories.OwnerDataRepository">
            <summary>
            用户数据Repository
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.OwnerDataRepository.Change(System.Int64,System.String,System.String,System.Int64)">
            <summary>
            变更系统数据
            </summary>
            <param name="ownerId">ownerId</param>
            <param name="tenantTypeId">租户类型</param>
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的数值</param>
        </member>
        <member name="M:Victornet.Common.Repositories.OwnerDataRepository.Change(System.Int64,System.String,System.String,System.Decimal)">
            <summary>
            变更系统数据
            </summary>
            <param name="ownerId">ownerId</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的数值</param>
        </member>
        <member name="M:Victornet.Common.Repositories.OwnerDataRepository.Change(System.Int64,System.String,System.String,System.String)">
            <summary>
            变更用户数据
            </summary>
            <param name="ownerId">用户Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的值</param>
        </member>
        <member name="M:Victornet.Common.Repositories.OwnerDataRepository.Get(System.Int64,System.String,System.String)">
            <summary>
            获取OwnerData
            </summary>
            <param name="ownerId">用户Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="dataKey">数据标识</param>
        </member>
        <member name="M:Victornet.Common.Repositories.OwnerDataRepository.GetAll(System.Int64,System.String)">
            <summary>
            获取DataKey对应的值
            </summary>
            <param name="ownerId">用户Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.OwnerDataRepository.GetPagingOwnerIds(System.String,System.String,System.Int32,System.Nullable{Victornet.Common.OwnerData_SortBy})">
            <summary>
            获取用户Id分页数据
            </summary>
            <param name="dataKey">dataKey</param>
            <param name="pageIndex">页码</param>
            <param name="sortBy">排序字段</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.OwnerDataRepository.GetTopOwnerIds(System.String,System.String,System.Int32,System.Nullable{Victornet.Common.OwnerData_SortBy})">
            <summary>
            获取前N个用户Id数据
            </summary>
            <param name="dataKey">dataKey</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="topNumber">获取记录的个数</param>
            <param name="sortBy">排序字段</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.OwnerDataRepository.Gets(System.Int64,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            批量获取拥有者的数据统计
            </summary>
            <param name="ownerId"></param>
            <param name="dataKeys"></param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.OwnerDataRepository.ClearOwnerData(System.Int64,System.String)">
            <summary>
            清除指定用户的用户数据
            </summary>
            <param name="ownerId">用户Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.OwnerDataRepository.GetCacheKey_GetOwnerData(System.Int64,System.String,System.String)">
            <summary>
            获取OwnerData的CacheKey
            </summary>
            <param name="ownerId">用户Id</param>
            <param name="dataKey">数据标识</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.OwnerDataRepository.GetCacheKey_GetAllOwnerData(System.Int64,System.String)">
            <summary>
            获取所有OwnerData的CacheKey
            </summary>
            <param name="ownerId">用户Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="T:Victornet.Common.Repositories.ISystemDataRepository">
            <summary>
            SystemData数据访问接口
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.ISystemDataRepository.Change(System.String,System.Int64)">
            <summary>
            变更系统数据
            </summary>
            <param name="dataKey">数据标识</param>
            <param name="number">待变更的数值</param>
        </member>
        <member name="M:Victornet.Common.Repositories.ISystemDataRepository.Change(System.String,System.Decimal)">
            <summary>
            变更系统数据
            </summary>
            <param name="dataKey">数据标识</param>
            <param name="number">待变更的数值</param>
        </member>
        <member name="T:Victornet.Common.Repositories.SystemDataRepository">
            <summary>
            系统数据Repository
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.SystemDataRepository.Change(System.String,System.Int64)">
            <summary>
            变更系统数据
            </summary>
            <param name="dataKey">数据标识</param>
            <param name="number">待变更的数值</param>
        </member>
        <member name="M:Victornet.Common.Repositories.SystemDataRepository.Change(System.String,System.Decimal)">
            <summary>
            变更系统数据
            </summary>
            <param name="dataKey">数据标识</param>
            <param name="number">待变更的数值</param>
        </member>
        <member name="T:Victornet.Common.Repositories.ITenantTypeRepository">
             <summary>
            TenantType数据访问接口
             </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.ITenantTypeRepository.Gets(System.String,System.Nullable{System.Int32})">
            <summary>
            依据服务或应用获取租户类型
            </summary>
            <param name="serviceKey">服务标识</param>
            <param name="applicationId">应用Id</param>
            <returns>如未满足条件的TenantType则返回空集合</returns>
        </member>
        <member name="T:Victornet.Common.Repositories.TenantTypeRepository">
            <summary>
            租户类型Repository
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.TenantTypeRepository.Gets(System.String,System.Nullable{System.Int32})">
            <summary>
            依据服务或应用获取租户类型
            </summary>
            <param name="serviceKey">服务标识</param>
            <param name="applicationId">应用Id</param>
            <returns>如未满足条件的TenantType则返回空集合</returns>
        </member>
        <member name="T:Victornet.Common.Repositories.IInvitationCodesRepository">
            <summary>
            邀请码数据访问接口
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.IInvitationCodesRepository.DeleteInvitationCode(System.Int64,System.String)">
            <summary>
            删除邀请码（当邀请码被使用时进行调用）
            </summary>
            <param name="userId">用户Id</param>
            <param name="invitationCode">邀请码</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IInvitationCodesRepository.GetMyInvitationCodes(System.Int64,System.Int32)">
            <summary>
            获取我的未使用邀请码列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="pageIndex">页码</param>
            <returns>未使用邀请码列表</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IInvitationCodesRepository.CleanByUser(System.Int64)">
            <summary>
            删除用户的所有邀请好友记录（删除用户的时候使用）
            </summary>
            <param name="userId">用户id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IInvitationCodesRepository.DeleteTrashInvitationCodes">
            <summary>
            批量删除过期的邀请码
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.IInvitationCodesRepository.GetTodayCode(System.Int64)">
            <summary>
            获取今天的邀请码
            </summary>
            <param name="userId">用户id</param>
            <returns>今天的邀请码</returns>
        </member>
        <member name="T:Victornet.Common.Repositories.IInvitationCodeStatisticsRepository">
            <summary>
            邀请码配额数据访问类
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.IInvitationCodeStatisticsRepository.ChangeUserInvitationCodeCount(System.Int64,System.Int32,System.Int32,System.Int32)">
            <summary>
            变更用户邀请码配额
            </summary>
            <param name="userId">用户Id</param>
            <param name="userInvitationCodeUnUsedCount">用户未使用邀请码配额增量（若减少请使用负数）</param>
            <param name="userInvitationCodeUsedCount">用户使用的邀请码配额增量（若减少请使用负数）</param>
            <param name="userInvitationCodeBuyedCount">用户购买的邀请码配额增量（若减少请使用负数）</param>
            <returns>是否更新成功</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IInvitationCodeStatisticsRepository.CleanByUser(System.Int64)">
            <summary>
            删除用户的所有邀请好友记录（删除用户的时候使用）
            </summary>
            <param name="userId">用户id</param>
        </member>
        <member name="T:Victornet.Common.Repositories.IInviteFriendRecordsRepository">
            <summary>
            邀请好友记录表
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.IInviteFriendRecordsRepository.GetMyInviteFriendRecords(System.Int64,System.Int32)">
            <summary>
            获取我的邀请好友记录
            </summary>
            <param name="userId">用户Id</param>
            <param name="pageIndex">页码</param>
            <returns>被邀请的好友Id列表</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IInviteFriendRecordsRepository.GetInvitingUserId(System.Int64)">
            <summary>
            通过被邀请人ID获取邀请人
            </summary>
            <param name="userId">被邀请人ID</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IInviteFriendRecordsRepository.CleanByUser(System.Int64)">
            <summary>
            删除用户的所有邀请好友记录（删除用户的时候使用）
            </summary>
            <param name="userId">用户id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IInviteFriendRecordsRepository.RewardingUser(System.Int64)">
            <summary>
            记录邀请用户奖励
            </summary>
            <param name="userId">用户Id</param>
        </member>
        <member name="T:Victornet.Common.Repositories.InvitationCodesRepository">
            <summary>
            邀请码数据访问
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.InvitationCodesRepository.DeleteInvitationCode(System.Int64,System.String)">
            <summary>
            删除邀请码
            </summary>
            <param name="userId">用户id</param>
            <param name="invitationCode">邀请码</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.InvitationCodesRepository.GetMyInvitationCodes(System.Int64,System.Int32)">
            <summary>
            获取我未使用的邀请码
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.InvitationCodesRepository.CleanByUser(System.Int64)">
            <summary>
            清除用户数据
            </summary>
            <param name="userId">用户id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.InvitationCodesRepository.DeleteTrashInvitationCodes">
            <summary>
            清除过期的邀请码
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.InvitationCodesRepository.GetTodayCode(System.Int64)">
            <summary>
            获取今天的邀请码
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.InvitationCodesRepository.GetCacheKey_MyInvitationCodes(System.Int64)">
            <summary>
            获取我的邀请码列表的cachekey
            </summary>
            <param name="userId">用户id</param>
            <returns>cachekey</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.InvitationCodesRepository.GetCacheKey_TodayCode(System.Int64)">
            <summary>
            获取今天邀请码cacheke
            </summary>
            <param name="userId">用户id</param>
            <returns>今天邀请码cacheke</returns>
        </member>
        <member name="T:Victornet.Common.Repositories.InvitationCodeStatisticsRepository">
            <summary>
            邀请码配额的数据访问类
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.InvitationCodeStatisticsRepository.ChangeUserInvitationCodeCount(System.Int64,System.Int32,System.Int32,System.Int32)">
            <summary>
            变更用户邀请码配额
            </summary>
            <param name="userId">用户Id</param>
            <param name="userInvitationCodeUnUsedCount">用户未使用邀请码配额增量（若减少请使用负数）</param>
            <param name="userInvitationCodeUsedCount">用户使用的邀请码配额增量（若减少请使用负数）</param>
            <param name="userInvitationCodeBuyedCount">用户购买的邀请码配额增量（若减少请使用负数）</param>
            <returns>是否更新成功</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.InvitationCodeStatisticsRepository.CleanByUser(System.Int64)">
            <summary>
            删除用户的所有邀请好友记录（删除用户的时候使用）
            </summary>
            <param name="userId">用户id</param>
        </member>
        <member name="T:Victornet.Common.Repositories.InviteFriendRecordsRepository">
            <summary>
            邀请好友的记录
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.InviteFriendRecordsRepository.GetMyInviteFriendRecords(System.Int64,System.Int32)">
            <summary>
            获取我的邀请好友记录
            </summary>
            <param name="userId">用户Id</param>
            <param name="pageIndex">页码</param>
            <returns>被邀请的好友Id列表</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.InviteFriendRecordsRepository.GetInvitingUserId(System.Int64)">
            <summary>
            通过被邀请人ID获取邀请人
            </summary>
            <param name="userId">被邀请人ID</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.InviteFriendRecordsRepository.GetCacheKey_InviteUserIds(System.Int64)">
            <summary>
            获取被邀请的好友Id集合的CacheKey
            </summary>
            <param name="userId">用户Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.InviteFriendRecordsRepository.CleanByUser(System.Int64)">
            <summary>
            清除用户资料（删除用户时使用）
            </summary>
            <param name="userId">用户id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.InviteFriendRecordsRepository.RewardingUser(System.Int64)">
            <summary>
            记录邀请用户奖励
            </summary>
            <param name="userId">用户Id</param>
        </member>
        <member name="T:Victornet.Common.Repositories.IReminderRecordRepository">
            <summary>
            提醒记录数据访问接口
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.IReminderRecordRepository.CreateRecords(System.Int64,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            创建提醒记录
            </summary>
            <param name="userId">被提醒用户Id</param>
            <param name="reminderMode">提醒方式</param>
            <param name="reminderInfoType">提醒信息类型</param>
            <param name="objectIds">提醒对象Id集合</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IReminderRecordRepository.UpdateRecoreds(System.Int64,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            更新提醒记录（只更新最后提醒时间）
            </summary>
            <param name="userId">被提醒用户Id</param>
            <param name="reminderModeId">提醒方式Id</param>
            <param name="reminderInfoTypeId">提醒信息类型Id</param>
            <param name="objectIds">提醒对象Id集合</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IReminderRecordRepository.CleanByUser(System.Int64)">
            <summary>
            删除用户的信息（删除用户时使用）
            </summary>
            <param name="userId">用户id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IReminderRecordRepository.DeleteTrashRecords(System.Int32)">
            <summary>
            清除垃圾提醒记录
            </summary>
            <param name="storageDay">保留天数</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IReminderRecordRepository.GetRecords(System.Int64,System.Int32,System.Int32)">
            <summary>
            获取用户所有的提醒记录
            </summary>
            <param name="userId">被提醒用户Id</param>
            <param name="reminderModeId">提醒方式Id</param>
            <param name="reminderInfoTypeId">提醒信息类型Id</param>
        </member>
        <member name="T:Victornet.Common.Repositories.IUserReminderSettingsRepository">
            <summary>
            用户提醒设置数据访问接口
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.IUserReminderSettingsRepository.GetAllUserReminderSettings(System.Int64)">
            <summary>
            用户获取所有提醒设置
            </summary>
            <param name="userId">用户Id</param>
            <returns>用户提醒设置集合</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IUserReminderSettingsRepository.BatchUpdateUserReminderSettings(System.Int64,System.Collections.Generic.IEnumerable{Victornet.Common.UserReminderSettings})">
            <summary>
            用户更新提醒设置
            </summary>
            <param name="userId">用户Id</param>
            <param name="userReminderSettings">用户提醒设置集合</param>
        </member>
        <member name="T:Victornet.Common.Repositories.ReminderRecordRepository">
            <summary>
            提醒记录数据访问
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.ReminderRecordRepository.CreateRecords(System.Int64,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            创建提醒记录
            </summary>
            <param name="userId">被提醒用户Id</param>
            <param name="reminderMode">提醒方式</param>
            <param name="reminderInfoType">提醒信息类型</param>
            <param name="objectIds">提醒对象Id集合</param>
        </member>
        <member name="M:Victornet.Common.Repositories.ReminderRecordRepository.UpdateRecoreds(System.Int64,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            更新提醒记录（只更新最后提醒时间）
            </summary>
            <param name="userId">被提醒用户Id</param>
            <param name="reminderModeId">提醒方式Id</param>
            <param name="reminderInfoTypeId">提醒信息类型Id</param>
            <param name="objectIds">提醒对象Id集合</param>
        </member>
        <member name="M:Victornet.Common.Repositories.ReminderRecordRepository.CleanByUser(System.Int64)">
            <summary>
            删除用户数据（删除用户的时候调用）
            </summary>
            <param name="userId">用户id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.ReminderRecordRepository.DeleteTrashRecords(System.Int32)">
            <summary>
            清除垃圾提醒记录
            </summary>
            <param name="storageDay">保留天数</param>
        </member>
        <member name="M:Victornet.Common.Repositories.ReminderRecordRepository.GetRecords(System.Int64,System.Int32,System.Int32)">
            <summary>
            获取用户所有的提醒记录
            </summary>
            <param name="userId">被提醒用户Id</param>
            <param name="reminderModeId">提醒方式Id</param>
            <param name="reminderInfoTypeId">提醒信息类型Id</param>
        </member>
        <member name="T:Victornet.Common.Repositories.UserReminderSettingsRepository">
            <summary>
            用户提醒设置数据访问类
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.UserReminderSettingsRepository.GetAllUserReminderSettings(System.Int64)">
            <summary>
            用户获取所有提醒设置
            </summary>
            <param name="userId">用户Id</param>
            <returns>用户提醒设置集合（Key：提醒方式Id，Value：提醒设置实体）</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.UserReminderSettingsRepository.BatchUpdateUserReminderSettings(System.Int64,System.Collections.Generic.IEnumerable{Victornet.Common.UserReminderSettings})">
            <summary>
            用户批量更新提醒设置
            </summary>
            <param name="userId">用户Id</param>
            <param name="userReminderSettings">用户提醒设置集合</param>
        </member>
        <member name="T:Victornet.Common.Repositories.AnnouncementRepository">
            <summary>
            公告数据仓储类
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.AnnouncementRepository.Update(Victornet.Common.Announcement)">
            <summary>
            更新公告
            </summary>
            <param name="entity">公告实体</param>
        </member>
        <member name="M:Victornet.Common.Repositories.AnnouncementRepository.Insert(Victornet.Common.Announcement)">
            <summary>
            添加公告
            </summary>
            <param name="entity">公告实体</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.AnnouncementRepository.ChangeDisplayOrder(System.Int64,System.Int64)">
            <summary>
            更改显示顺序
            </summary>
            <param name="id">id</param>
            <param name="referenceId">referenceId</param>
        </member>
        <member name="M:Victornet.Common.Repositories.AnnouncementRepository.GetForAdmin(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Victornet.Common.Announcement_Status},System.String,System.Int32,System.Int32)">
            <summary>
            获取公告列表(后台管理)
            </summary>
            <param name="keyword">关键字</param>
            <param name="startDate_Expired">过期开始时间</param>
            <param name="endDate_Expired">过期结束时间</param>
            <param name="startDate_Update">更新开始时间</param>
            <param name="endDate_Update">更新结束时间</param>
            <param name="status">状态</param>        
            <param name="displayArea">呈现区域</param>
            <param name="pageSize">pageSize</param>
            <param name="pageIndex">pageIndex</param>
            <returns>分页集合</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.AnnouncementRepository.Gets(System.Int32,System.Int32)">
            <summary>
            获取公告(前台)
            </summary>
            <param name="pageSize">pageSize</param>
            <param name="pageIndex">pageIndex</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.AnnouncementRepository.Gets(System.String)">
            <summary>
            根据展示区域获取公告
            </summary>
            <param name="displayArea">展示区域</param>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.Repositories.IAnnouncementRepository">
            <summary>
            公告仓储类接口
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.IAnnouncementRepository.ChangeDisplayOrder(System.Int64,System.Int64)">
            <summary>
            改变顺序
            </summary>
            <param name="id"></param>
            <param name="referenceId"></param>
        </member>
        <member name="M:Victornet.Common.Repositories.IAnnouncementRepository.GetForAdmin(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Victornet.Common.Announcement_Status},System.String,System.Int32,System.Int32)">
             <summary>
            为后台管理获取公告 
             </summary>
             <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IAnnouncementRepository.Gets(System.Int32,System.Int32)">
            <summary>
            为前台显示列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IAnnouncementRepository.Gets(System.String)">
            <summary>
            根据展示区域获取公告
            </summary>
            <param name="displayArea"></param>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.Repositories.CategoryRepository`1">
            <summary>
            分类仓储的具体实现类
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.CategoryRepository`1.Insert(`0)">
            <summary>
            创建分类
            </summary>
            <param name="category">待创建分类</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.CategoryRepository`1.UpdateAuditStatus(System.Collections.Generic.IEnumerable{System.Int64},Victornet.Common.AuditStatus)">
            <summary>
            批量更新审核状态
            </summary>
            <param name="ids">分类Id列表</param>
            <param name="auditStatus">审核状态</param>
        </member>
        <member name="M:Victornet.Common.Repositories.CategoryRepository`1.CleanByUser(System.Int64)">
            <summary>
            根据userid删除访用户类别
            </summary>
            <param name="userId">用户的id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.CategoryRepository`1.Merge(System.Int64,System.Int64)">
            <summary>
            从fromCategoryId并入到toCategoryId
            </summary>
            <remarks>
            例如：将分类fromCategoryId合并到分类toCategoryId，那么fromCategoryId分类下的所有子分类和实体全部归到toCategoryId分类，同时删除fromCategoryId分类
            </remarks>
            <param name="fromCategoryId">源类别</param>
            <param name="toCategoryId">目标类别</param>
        </member>
        <member name="M:Victornet.Common.Repositories.CategoryRepository`1.Move(System.Int64,System.Int64)">
            <summary>
            把fromCategoryId移动到toCategoryId
            </summary>
            <remarks>
            将一个分类移动到另一个分类，并作为另一个分类的子分类
            </remarks>
            <param name="fromCategoryId">被移动类别</param>
            <param name="toCategoryId">目标类别</param>
        </member>
        <member name="M:Victornet.Common.Repositories.CategoryRepository`1.GetOwnerRootCategories(System.Int64,System.String)">
            <summary>
            获取拥有者的类别列表
            </summary>
            <param name="ownerId">类别拥有者Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.CategoryRepository`1.GetOwnerCategories(System.Int64,System.String)">
            <summary>
            获取拥有者的类别列表
            </summary>
            <param name="ownerId">类别拥有者Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.CategoryRepository`1.GetChildren(System.Int64)">
            <summary>
            获取子类别
            </summary>
            <param name="parentCategoryId">父类别Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.CategoryRepository`1.GetCategories(System.Nullable{Victornet.Common.PubliclyAuditStatus},System.String,System.String,System.Int32)">
            <summary>
            分页检索类别
            </summary>
            <returns>
            按创建时间倒序排列的分页类别列表
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Victornet.Common.Repositories.CategoryRepository`1.GetOwnerCategories(System.Nullable{Victornet.Common.PubliclyAuditStatus},System.String,System.String,System.Int64,System.Int32,System.Int32)" -->
        <member name="M:Victornet.Common.Repositories.CategoryRepository`1.UpdateItemCount(`0)">
            <summary>
            仅更新实体属性
            </summary>
            <param name="category">要更新的分类</param>
        </member>
        <member name="M:Victornet.Common.Repositories.CategoryRepository`1.RecurseGetChildren(`0,System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`0})">
            <summary>
            获取所有子分类的递归方法
            </summary>
            <param name="category">当前分类</param>
            <param name="treeCategories">最终要组装的Tree分类</param>
            <param name="orgCategoriesList">原始分类列表</param>
        </member>
        <member name="M:Victornet.Common.Repositories.CategoryRepository`1.RecurseGetParents(System.Int64,System.Collections.Generic.List{System.Int64})">
            <summary>
            递归获取所有父级分类
            </summary>
            <param name="categoryId">当前分类Id</param>
            <param name="parentCategoryIdList">父级分类Id列表</param>
        </member>
        <member name="T:Victornet.Common.Repositories.ICategoryRepository`1">
            <summary>
            分类仓储接口，实现特殊方法
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.ICategoryRepository`1.UpdateAuditStatus(System.Collections.Generic.IEnumerable{System.Int64},Victornet.Common.AuditStatus)">
            <summary>
            批量更新审核状态
            </summary>
            <param name="ids">评论Id列表</param>
            <param name="auditingStatus">审核状态</param>
        </member>
        <member name="M:Victornet.Common.Repositories.ICategoryRepository`1.Merge(System.Int64,System.Int64)">
            <summary>
            从fromCategoryId并入到toCategoryId
            </summary>
            <remarks>
            例如：将分类fromCategoryId合并到分类toCategoryId，那么fromCategoryId分类下的所有子分类和实体全部归到toCategoryId分类，同时删除fromCategoryId分类
            </remarks>
            <param name="fromCategoryId">合并分类源类别</param>
            <param name="toCategoryId">合并分类目标类别</param>
        </member>
        <member name="M:Victornet.Common.Repositories.ICategoryRepository`1.Move(System.Int64,System.Int64)">
            <summary>
            把fromCategoryId移动到toCategoryId
            </summary>
            <remarks>
            将一个分类移动到另一个分类，并作为另一个分类的子分类
            </remarks>
            <param name="fromCategoryId">被移动类别</param>
            <param name="toCategoryId">目标类别</param>
        </member>
        <member name="M:Victornet.Common.Repositories.ICategoryRepository`1.GetOwnerRootCategories(System.Int64,System.String)">
            <summary>
            获取拥有者的类别列表
            </summary>
            <param name="ownerId">类别拥有者Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.ICategoryRepository`1.GetOwnerCategories(System.Int64,System.String)">
            <summary>
            获取拥有者的类别列表
            </summary>
            <param name="ownerId">类别拥有者Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="isAdmin">是否后台使用</param>
            <returns>按树状排序的</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.ICategoryRepository`1.GetChildren(System.Int64)">
            <summary>
            获取子类别
            </summary>
            <param name="parentCategoryId">父类别Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.ICategoryRepository`1.CleanByUser(System.Int64)">
            <summary>
            根据用户id删除用户类别
            </summary>
            <param name="userId">用户的id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.ICategoryRepository`1.GetCategories(System.Nullable{Victornet.Common.PubliclyAuditStatus},System.String,System.String,System.Int32)">
            <summary>
            分页检索类别
            </summary>
            <returns>
            按创建时间倒序排列的分页类别列表
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Victornet.Common.Repositories.ICategoryRepository`1.GetOwnerCategories(System.Nullable{Victornet.Common.PubliclyAuditStatus},System.String,System.String,System.Int64,System.Int32,System.Int32)" -->
        <member name="M:Victornet.Common.Repositories.ICategoryRepository`1.RecurseGetChildren(`0,System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`0})">
            <summary>
            获取所有子分类的递归方法
            </summary>
            <param name="category">当前分类</param>
            <param name="treeCategories">最终要组装的Tree分类</param>
            <param name="orgCategoriesList">原始分类列表</param>
        </member>
        <member name="M:Victornet.Common.Repositories.ICategoryRepository`1.UpdateItemCount(`0)">
            <summary>
            仅更新实体属性
            </summary>
            <param name="category">要更新的分类</param>
        </member>
        <member name="T:Victornet.Common.Repositories.IItemInCategoryRepository">
            <summary>
            分类和内容关联项，需要的数据服务接口
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.IItemInCategoryRepository.AddItemsToCategory(System.Collections.Generic.IEnumerable{System.Int64},System.Int64)">
            <summary>
            批量为内容项设置类别
            </summary>
            <param name="itemIds">内容项Id集合</param>
            <param name="categoryId">类别Id</param>
            <param name="ownerId">类别拥有者Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IItemInCategoryRepository.AddCategoriesToItem(System.Collections.Generic.IEnumerable{System.Int64},System.Int64)">
            <summary>
            为内容项批量设置类别
            </summary>
            <param name="categoryIds">类别Id集合</param>
            <param name="itemId">内容项Id</param>
            <param name="ownerId">类别拥有者Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IItemInCategoryRepository.ClearCategoriesFromItem(System.Int64,System.Nullable{System.Int64},System.String)">
            <summary>
            清除内容项的所有类别
            </summary>
            <param name="itemId">内容项Id</param>
            <param name="ownerId">分类所有者</param>
            <param name="tenantTypeId">租户Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IItemInCategoryRepository.ClearItemsFromCategory(System.Int64)">
            <summary>
            删除分类下的所有的关联项
            </summary>
            <param name="categoryId">分类Id</param>
            <param name="ownerId">拥有者Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IItemInCategoryRepository.GetItemIds(System.Int64,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            获取类别的内容项集合
            </summary>
            <param name="categoryId">分类的Id集合</param>
            <returns>内容项的ID集合</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IItemInCategoryRepository.GetItemIds(System.Int64,System.Collections.Generic.IEnumerable{System.Int64},System.Int32,System.Int32,System.Int64@)">
            <summary>
            获取类别的内容项集合
            </summary>
            <param name="categoryId">当前分类的Id</param>
            <param name="ids">分类的Id集合</param>
            <param name="pageSize">页面大小</param>
            <param name="pageIndex">当前页码</param>
            <param name="totalRecords">输出参数：总记录数</param>
            <returns>当页内容项的ID集合</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IItemInCategoryRepository.GetCategoriesOfItem(System.Int64,System.Nullable{System.Int64},System.String)">
            <summary>
            获取内容项的所有类别Id集合
            </summary>
            <param name="itemId">内容项Id</param>
            <param name="ownerId">分类所有者</param>
            <param name="tenantTypeId">租户Id</param>
            <returns>返回内容项的类别Id集合</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IItemInCategoryRepository.DeleteItemInCategory(System.Int64,System.Int64)">
            <summary>
            删除分类同内容的关联项
            </summary>
            <param name="categoryId">分类Id</param>
            <param name="itemId">内容项Id</param>
            <param name="ownerId">拥有者Id</param>
        </member>
        <member name="T:Victornet.Common.Repositories.ItemInCategoryRepository">
            <summary>
            分类同内容项关联的仓储实现
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.ItemInCategoryRepository.AddItemsToCategory(System.Collections.Generic.IEnumerable{System.Int64},System.Int64)">
            <summary>
            批量为内容项设置类别
            </summary>
            <param name="itemIds">内容项Id集合</param>
            <param name="categoryId">类别Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.ItemInCategoryRepository.AddCategoriesToItem(System.Collections.Generic.IEnumerable{System.Int64},System.Int64)">
            <summary>
            为内容项批量设置类别
            </summary>
            <param name="categoryIds">类别Id集合</param>
            <param name="itemId">内容项Id</param>
            <param name="ownerId">类别拥有者Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.ItemInCategoryRepository.ClearCategoriesFromItem(System.Int64,System.Nullable{System.Int64},System.String)">
            <summary>
            清除内容项设置的所有分类
            </summary>
            <param name="itemId">内容项Id</param>
            <param name="ownerId">拥有者Id</param>
            <param name="tenantTypeId">租户Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.ItemInCategoryRepository.ClearItemsFromCategory(System.Int64)">
            <summary>
            删除分类下的所有的关联项
            </summary>
            <param name="categoryId">分类Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.ItemInCategoryRepository.GetItemIds(System.Int64,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            获取类别的内容项集合
            </summary>
            <param name="categoryId">分类的Id集合</param>
            <returns>内容项的ID集合</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.ItemInCategoryRepository.GetItemIds(System.Int64,System.Collections.Generic.IEnumerable{System.Int64},System.Int32,System.Int32,System.Int64@)">
            <summary>
            获取类别的内容项集合
            </summary>
            <param name="categoryId">分类的Id集合</param>
            <param name="pageSize">页面大小</param>
            <param name="pageIndex">当前页码</param>
            <param name="totalRecords">输出参数：总记录数</param>
            <returns>当页内容项的ID集合</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.ItemInCategoryRepository.GetCategoriesOfItem(System.Int64,System.Nullable{System.Int64},System.String)">
            <summary>
            获取内容项的所有分类Id集合
            </summary>
            <param name="itemId">内容项Id</param>
            <param name="ownerId">分类所有者</param>
            <param name="tenantTypeId">租户Id</param>
            <returns>返回内容项的类别Id集合</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.ItemInCategoryRepository.DeleteItemInCategory(System.Int64,System.Int64)">
            <summary>
            删除分类同内容的关联项
            </summary>
            <param name="categoryId">分类Id</param>
            <param name="itemId">内容项Id</param>
            <param name="ownerId">拥有者Id</param>
        </member>
        <member name="T:Victornet.Common.Repositories.IRecommendItemRepository">
             <summary>
            推荐内容数据访问接口
             </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.IRecommendItemRepository.Delete(System.Int64,System.String)">
            <summary>
            删除推荐内容
            </summary>
            <param name="itemId">内容Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns>删除成功返回true，失败返回false</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IRecommendItemRepository.DeleteExpiredRecommendItems">
            <summary>
            定期移除过期的推荐内容
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.IRecommendItemRepository.GetTops(System.Int32,System.String)">
            <summary>
            获取某种推荐类别下的前N条推荐内容
            </summary>
            <param name="topNumber">前N条</param>
            <param name="recommendTypeId">推荐类别Id</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IRecommendItemRepository.Get(System.Int64,System.String)">
            <summary>
            获取推荐内容
            </summary>
            <param name="itemId">推荐内容Id</param>
            <param name="recommendTypeId">推荐类型Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IRecommendItemRepository.Gets(System.String,System.Int32)">
            <summary>
            获取某种推荐类别下的推荐内容分页集合
            </summary>
            <param name="topNumber">前N条</param>
            <param name="recommendTypeId">推荐类别Id</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IRecommendItemRepository.Gets(System.Int64,System.String)">
            <summary>
            获取某条内容的所有推荐
            </summary>
            <param name="itemId">内容Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IRecommendItemRepository.GetsForAdmin(System.String,System.String,System.Nullable{System.Boolean},System.Int32,System.Int32)">
            <summary>
            分页获取推荐内容后台管理列表
            </summary>
            <param name="tenantTypeId"></param>
            <param name="recommendTypeId"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.Repositories.IRecommendItemTypeRepository">
             <summary>
            推荐类别数据访问接口
             </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.IRecommendItemTypeRepository.GetRecommendTypes(System.String)">
            <summary>
            获取推荐类别列表
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="T:Victornet.Common.Repositories.RecommendItemRepository">
             <summary>
            推荐内容数据访问仓储
             </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.RecommendItemRepository.Insert(Victornet.Common.RecommendItem)">
            <summary>
            创建推荐内容实体
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.RecommendItemRepository.Delete(System.Int64,System.String)">
            <summary>
            删除推荐内容
            </summary>
            <param name="itemId">内容Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns>删除成功返回true，失败返回false</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.RecommendItemRepository.DeleteExpiredRecommendItems">
            <summary>
            定期移除过期的推荐内容
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.RecommendItemRepository.DeleteTrashDatas">
            <summary>
            删除垃圾数据
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.RecommendItemRepository.Get(System.Int64,System.String)">
            <summary>
            获取推荐内容
            </summary>
            <param name="itemId">推荐内容Id</param>
            <param name="recommendTypeId">推荐类型Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.RecommendItemRepository.GetTops(System.Int32,System.String)">
            <summary>
            获取某种推荐类别下的前N条推荐内容
            </summary>
            <param name="topNumber">前N条</param>
            <param name="recommendTypeId">推荐类别Id</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.RecommendItemRepository.Gets(System.String,System.Int32)">
            <summary>
            获取某种推荐类别下的推荐内容分页集合
            </summary>
            <param name="pageIndex">页码</param>
            <param name="recommendTypeId">推荐类别Id</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.RecommendItemRepository.Gets(System.Int64,System.String)">
            <summary>
            获取某条内容的所有推荐
            </summary>
            <param name="itemId">内容Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.RecommendItemRepository.GetsForAdmin(System.String,System.String,System.Nullable{System.Boolean},System.Int32,System.Int32)">
            <summary>
            分页获取推荐内容后台管理列表
            </summary>
            <param name="tenantTypeId"></param>
            <param name="recommendTypeId"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.Repositories.RecommendItemTypeRepository">
             <summary>
            推荐内容数据访问仓储
             </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.RecommendItemTypeRepository.Insert(Victornet.Common.RecommendItemType)">
            <summary>
            
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.RecommendItemTypeRepository.Delete(Victornet.Common.RecommendItemType)">
            <summary>
            删除推荐类别
            </summary>
            <param name="entity">推荐类别实体</param>
            <returns>删除成功返回true，失败返回false</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.RecommendItemTypeRepository.GetRecommendTypes(System.String)">
            <summary>
            获取推荐类别列表
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="T:Victornet.Common.Repositories.IItemInTagRepository">
            <summary>
            标签和内容关联项，需要的数据服务接口
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.IItemInTagRepository.AddItemsToTag(System.Collections.Generic.IEnumerable{System.Int64},System.String,System.Int64,System.String)">
            <summary>
            为多个内容项添加相同标签
            </summary>
            <param name="itemIds">内容项Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
            <param name="tagName">标签名</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IItemInTagRepository.AddTagsToItem(System.String[],System.String,System.Int64,System.Int64)">
            <summary>
            为内容项批量设置标签
            </summary>
            <param name="tagNames">标签名称集合</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
            <param name="itemId">内容项Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IItemInTagRepository.DeleteTagFromItem(System.Int64,System.Int64)">
            <summary>
            删除内容项的标签
            </summary>
            <param name="itemId">内容项Id</param>
            <param name="tagInOwnerId">标签与拥有者关联</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IItemInTagRepository.ClearTagsFromItem(System.Int64,System.String,System.Int64)">
            <summary>
            清除内容项的所有标签
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
            <param name="itemId">内容项Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IItemInTagRepository.GetItemIds(System.String,System.String,System.Nullable{System.Int64})">
            <summary>
            获取标签的内容项集合
            </summary>
            <param name="tagName">标签名称</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
            <returns>返回指定的内容项Id集合</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IItemInTagRepository.GetItemIds(System.String,System.String,System.Nullable{System.Int64},System.Int32,System.Int32)">
            <summary>
            获取标签的内容项集合
            </summary>
            <param name="tagName">标签名称</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
            <param name="pageSize">每页记录数</param>
            <param name="pageIndex">当前页码(从1开始)</param>
            <returns>返回指定页码的内容项Id集合</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IItemInTagRepository.GetItemIds(System.Collections.Generic.IEnumerable{System.String},System.String,System.Nullable{System.Int64},System.Int32,System.Int32)">
            <summary>
            获取多个标签的内容项集合
            </summary>
            <param name="tagNames">标签名称列表</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
            <param name="pageSize">每页记录数</param>
            <param name="pageIndex">当前页码(从1开始)</param>
            <returns>返回指定页码的内容项Id集合</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IItemInTagRepository.GetTagIdsOfItem(System.Int64,System.String)">
            <summary>
            获取内容项的所有标签
            </summary>
            <param name="itemId">内容项Id</param>
            <returns>返回内容项的标签Id集合,无返回时返回空集合</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IItemInTagRepository.GetTagInOwnerIdsOfItem(System.Int64,System.Int64,System.String)">
            <summary>
            获取标签标签与拥有者关系Id集合
            </summary>
            <param name="itemId">内容项Id</param>
            <param name="ownerId">拥有者Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IItemInTagRepository.GetItemInTagIdsOfItem(System.Int64,System.String)">
            <summary>
            获取内容项与标签关联Id集合
            </summary>
            <param name="itemId">内容项Id</param>
            <param name="tenantTypeId">租户类型</param>
            <returns>返回内容项的标签Id集合,无返回时返回空集合</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IItemInTagRepository.GetTagNamesOfUsers(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            根据用户ID列表获取用户tag，本方法现用于用户搜索功能的索引生成
            </summary>
            <param name="userIds">用户ID列表</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IItemInTagRepository.GetEntityIdsByUserIds(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary> 
            根据用户ID列表获取ItemInTag的ID列表，本方法现用于用户搜索功能的索引生成
            </summary>
            <param name="userIds">用户ID列表</param>
            <returns>ItemInTag的ID列表</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IItemInTagRepository.GetTagNamesWithIdsOfItem(System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            根据成员获取标签名及标签Id
            </summary>
            <param name="itemId">成员Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="tagInOwnerId">标签与拥有者关联Id</param>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.Repositories.IRelatedTagRepository">
            <summary>
            相关标签仓储接口，实现特殊方法
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.IRelatedTagRepository.AddRelatedTagsToTag(System.String[],System.String,System.Int64,System.Int64)">
            <summary>
            添加相关标签
            </summary>
            <remarks>
            会为标签添加双向的关联关系,例如:
            TagA关联到TagB
            TagB关联到TagA
            </remarks>
            <param name="tagNames">相关标签名称集合</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
            <param name="tagId">标签Id</param>
            <returns> 影响行数</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IRelatedTagRepository.DeleteRelatedTagFromTag(System.Int64,System.Int64)">
            <summary>
            清除关联的标签
            </summary>
            <remarks>会删除双向的关联关系</remarks>
            <param name="relatedTagId">关联的标签Id</param>
            <param name="tagId">被关联的标签Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IRelatedTagRepository.ClearRelatedTagsFromTag(System.Int64)">
            <summary>
            清除拥有者的所有标签
            </summary>
            <param name="tagId">被关联的标签Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IRelatedTagRepository.GetRelatedTagIds(System.Int64)">
            <summary>
            获取相关标签
            </summary>
            <param name="tagId">被关联的标签Id</param>
            <returns>获取相关联的Id集合</returns>
        </member>
        <member name="T:Victornet.Common.Repositories.ITagGroupRepository">
            <summary>
            标签分组仓储接口，实现特殊方法
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.ITagGroupRepository.GetGroups(System.String)">
            <summary>
            获取全部标签分组
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.ITagGroupRepository.GetGroupsOfTag(System.String,System.String)">
            <summary>
            根据标签获取标签分组
            </summary>
            <param name="tagName">标签名</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.Repositories.ITagInGroupRepository">
            <summary>
            标签与分组关联仓储接口，实现特殊方法
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.ITagInGroupRepository.AddTagInGroup(System.String,System.Int64,System.String)">
            <summary>
            添加标签与分组关联
            </summary>
            <param name="tagName">标签名</param>
            <param name="groupId">拥有者Id</param>
            <param name="TenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.ITagInGroupRepository.BatchAddTagsInGroup(System.Collections.Generic.IEnumerable{System.String},System.Int64,System.String)">
            <summary>
            批量添加标签与分组关联
            </summary>
            <param name="tagName">标签名</param>
            <param name="groupId">拥有者Id</param>
            <param name="TenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.ITagInGroupRepository.ClearTagsFromGroup(System.Int64)">
            <summary>
            清除分组的所有标签
            </summary>
            <param name="groupId">分组Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.ITagInGroupRepository.GetTagsOfGroup(System.Int64)">
            <summary>
            获取分组下的标签
            </summary>
            <param name="groupId">分组Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.ITagInGroupRepository.BatchAddGroupsToTag(System.Collections.Generic.IEnumerable{System.Int64},System.String,System.String)">
            <summary>
            批量添加分组给标签
            </summary>
            <param name="groupIds">分组Id集合</param>
            <param name="tagName">标签名</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="T:Victornet.Common.Repositories.ITagInOwnerRepository">
            <summary>
            标签和拥有者关联项，需要的数据服务接口
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.ITagInOwnerRepository.AddTagInOwner(System.String,System.String,System.Int64)">
            <summary>
            添加标签与拥有者关联
            </summary>
            <param name="tagName">标签名</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
            <returns>返回影响行数</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.ITagInOwnerRepository.AddTagInOwner(Victornet.Common.TagInOwner)">
             <summary>
             添加标签与拥有者关联
             </summary>
            <param name="tagInOwner">待创建实体</param>
             <returns>返回实体主键</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.ITagInOwnerRepository.ClearTagsFromOwner(System.Int64,System.String)">
            <summary>
            清除拥有者的所有标签
            </summary>
            <param name="ownerId">拥有者Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.ITagInOwnerRepository.GetTagInOwners(System.Int64,System.String)">
            <summary>
            获取标签标签与拥有者关系
            </summary>
            <param name="ownerId">拥有者</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.ITagInOwnerRepository.GetTagInOwners(System.Int32,System.Int32)">
            <summary>
            分页获取tn_TagsInOwners表的数据(用于建索引)
            </summary>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.ITagInOwnerRepository.GetTopTagInOwners(System.Int64,System.String,System.String,System.Int32)">
            <summary>
            获取拥有者的标签列表
            </summary>
            <param name="ownerId">拥有者Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="keyword">标签关键字</param>
            <param name="topNumber">前N个标签</param>
        </member>
        <member name="T:Victornet.Common.Repositories.ITagRepository`1">
            <summary>
            标签仓储接口，实现特殊方法
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.ITagRepository`1.UpdateAuditStatus(System.Collections.Generic.IEnumerable{System.Int64},System.Boolean)">
            <summary>
            批量更新审核状态
            </summary>
            <param name="ids">标签Id列表</param>
            <param name="auditingStatus">审核状态</param>
        </member>
        <member name="M:Victornet.Common.Repositories.ITagRepository`1.Get(System.String,System.String)">
            <summary>
            获取标签实体
            </summary>
            <param name="tagName">标签名</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.ITagRepository`1.GetTopTags(System.String,System.Int32,System.Nullable{System.Boolean},System.Nullable{Victornet.Common.SortBy_Tag},System.Boolean)">
             <summary>
             获取前N个标签
             </summary>
             <remarks>智能提示时也使用该方法获取数据</remarks>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="topNumber">前N条数据</param>
            <param name="isFeatured">是否为特色标签</param>
            <param name="sortBy">标签排序字段</param>
            <param name="isTagCloud">为true时则不启用缓存</param>
        </member>
        <member name="M:Victornet.Common.Repositories.ITagRepository`1.GetTopTagNames(System.String,System.Int64,System.String,System.Int32)">
             <summary>
             获取前N个标签
             </summary>
             <remarks>用于智能提示</remarks>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
            <param name="keyword">标签名称关键字</param>
            <param name="topNumber">前N条数据</param>
        </member>
        <member name="M:Victornet.Common.Repositories.ITagRepository`1.GetTags(Victornet.Common.TagQuery,System.Int32,System.Int32)">
             <summary>
            分页检索标签
             </summary>
            <param name="query">查询条件</param>
             <param name="pageIndex">当前页码</param>
             <param name="pageSize">每页记录数</param>
             <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.ITagRepository`1.GetTagsOfGroup(System.Int64,System.String,System.Int32)">
             <summary>
            分页检索标签
             </summary>
            <param name="groupId">标签分组Id</param>
            <param name="tenantTypeId">租户类型Id</param>
             <param name="pageIndex">当前页码</param>
             <param name="pageSize">每页记录数</param>
             <returns></returns>
        </member>
        <member name="T:Victornet.Common.Repositories.ItemInTagRepository">
             <summary>
            标签与内容项关联的仓储实现
             </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.ItemInTagRepository.AddItemsToTag(System.Collections.Generic.IEnumerable{System.Int64},System.String,System.Int64,System.String)">
            <summary>
            为多个内容项添加相同标签
            </summary>
            <param name="itemIds">内容项Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
            <param name="tagName">标签名</param>
        </member>
        <member name="M:Victornet.Common.Repositories.ItemInTagRepository.AddTagsToItem(System.String[],System.String,System.Int64,System.Int64)">
            <summary>
            为内容项批量设置标签
            </summary>
            <param name="tagNames">标签名称集合</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
            <param name="itemId">内容项Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.ItemInTagRepository.Delete(Victornet.Common.ItemInTag)">
            <summary>
            删除标签与成员的关系实体
            </summary>
            <param name="entity">待处理的实体</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.ItemInTagRepository.DeleteTagFromItem(System.Int64,System.Int64)">
            <summary>
            删除内容项的标签
            </summary>
            <param name="itemId">内容项Id</param>
            <param name="tagInOwnerId">标签与拥有者关联</param>
        </member>
        <member name="M:Victornet.Common.Repositories.ItemInTagRepository.ClearTagsFromItem(System.Int64,System.String,System.Int64)">
            <summary>
            清除内容项的所有标签
            </summary>
            <param name="itemId">内容项Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.ItemInTagRepository.GetItemIds(System.String,System.String,System.Nullable{System.Int64})">
            <summary>
            获取标签的所有内容项集合
            </summary>
            <param name="tagName">标签名称</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
            <returns>返回指定的内容项Id集合</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.ItemInTagRepository.GetItemIds(System.String,System.String,System.Nullable{System.Int64},System.Int32,System.Int32)">
            <summary>
            获取标签的内容项集合
            </summary>
            <param name="tagName">标签名称</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
            <param name="pageSize">每页记录数</param>
            <param name="pageIndex">当前页码(从1开始)</param>
            <returns>返回指定页码的内容项Id集合</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.ItemInTagRepository.GetItemIds(System.Collections.Generic.IEnumerable{System.String},System.String,System.Nullable{System.Int64},System.Int32,System.Int32)">
            <summary>
            获取多个标签的内容项集合
            </summary>
            <param name="tagNames">标签名称列表</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
            <param name="pageSize">每页记录数</param>
            <param name="pageIndex">当前页码(从1开始)</param>
            <returns>返回指定页码的内容项Id集合</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.ItemInTagRepository.GetTagIdsOfItem(System.Int64,System.String)">
            <summary>
            获取内容项的所有标签
            </summary>
            <param name="itemId">内容项Id</param>
            <returns>返回内容项的标签Id集合,无返回时返回空集合</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.ItemInTagRepository.GetItemInTagIdsOfItem(System.Int64,System.String)">
            <summary>
            获取内容项与标签关联Id集合
            </summary>
            <param name="itemId">内容项Id</param>
            <param name="tenantTypeId">租户类型</param>
            <returns>返回内容项的标签Id集合,无返回时返回空集合</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.ItemInTagRepository.GetTagInOwnerIdsOfItem(System.Int64,System.Int64,System.String)">
            <summary>
            获取标签标签与拥有者关系Id集合
            </summary>
            <param name="itemId">内容项Id</param>
            <param name="ownerId">拥有者Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.ItemInTagRepository.GetTagNamesOfUsers(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            根据用户ID列表获取用户tag，本方法现用于用户搜索功能的索引生成
            </summary>
            <param name="userIds">用户ID列表</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.ItemInTagRepository.GetEntityIdsByUserIds(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            根据用户ID列表获取ItemInTag的ID列表，本方法现用于用户搜索功能的索引生成
            </summary>
            <param name="userIds">用户ID列表</param>
            <returns>ItemInTag的ID列表</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.ItemInTagRepository.GetTagNamesWithIdsOfItem(System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            根据Id获取
            </summary>
            <param name="itemId">成员Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="tagInOwnerId">标签与拥有者关联Id</param>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.Repositories.RelatedTagRepository">
             <summary>
            相关标签的仓储实现
             </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.RelatedTagRepository.AddRelatedTagsToTag(System.String[],System.String,System.Int64,System.Int64)">
            <summary>
            添加相关标签
            </summary>
            <remarks>
            会为标签添加双向的关联关系,例如:
            TagA关联到TagB
            TagB关联到TagA
            </remarks>
            <param name="tagNames">相关标签名称集合</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
            <param name="tagId">标签Id</param>
            <returns> 影响行数</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.RelatedTagRepository.DeleteRelatedTagFromTag(System.Int64,System.Int64)">
            <summary>
            清除关联的标签
            </summary>
            <remarks>会删除双向的关联关系</remarks>
            <param name="relatedTagId">关联的标签Id</param>
            <param name="tagId">被关联的标签Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.RelatedTagRepository.ClearRelatedTagsFromTag(System.Int64)">
            <summary>
            清除所有相关标签
            </summary>
            <param name="tagId">被关联的标签Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.RelatedTagRepository.GetRelatedTagIds(System.Int64)">
            <summary>
            获取相关标签
            </summary>
            <param name="tagId">被关联的标签Id</param>
            <returns>获取相关联的Id集合</returns>
        </member>
        <member name="T:Victornet.Common.Repositories.TagGroupRepository">
            <summary>
            标签分组仓储的具体实现类
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.TagGroupRepository.GetGroupsOfTag(System.String,System.String)">
            <summary>
            根据标签获取标签分组
            </summary>
            <param name="tagName">标签名</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.TagGroupRepository.GetGroups(System.String)">
            <summary>
            获取全部标签分组
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="T:Victornet.Common.Repositories.TagInGroupRepository">
            <summary>
            标签与分组关系仓储的具体实现类
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.TagInGroupRepository.AddTagInGroup(System.String,System.Int64,System.String)">
            <summary>
            添加标签与分组关联
            </summary>
            <param name="tagName">标签名</param>
            <param name="groupId">拥有者Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.TagInGroupRepository.BatchAddGroupsToTag(System.Collections.Generic.IEnumerable{System.Int64},System.String,System.String)">
            <summary>
            批量添加分组给标签
            </summary>
            <param name="groupIds">分组Id集合</param>
            <param name="tagName">标签名</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.TagInGroupRepository.BatchAddTagsInGroup(System.Collections.Generic.IEnumerable{System.String},System.Int64,System.String)">
            <summary>
            批量添加标签与分组关联
            </summary>
            <param name="tagNames">标签名</param>
            <param name="groupId">分组Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.TagInGroupRepository.ClearTagsFromGroup(System.Int64)">
            <summary>
            清除分组的所有标签
            </summary>
            <param name="groupId">分组Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.TagInGroupRepository.GetTagsOfGroup(System.Int64)">
            <summary>
            获取标签与分组关系
            </summary>
            <param name="groupId">分组Id</param>
        </member>
        <member name="T:Victornet.Common.Repositories.TagInOwnerRepository">
             <summary>
            标签与拥有者关联的仓储实现
             </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.TagInOwnerRepository.Delete(Victornet.Common.TagInOwner)">
            <summary>
            删除标签与拥有者关系
            </summary>
            <param name="entity">标签与拥有者关系实体</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.TagInOwnerRepository.AddTagInOwner(System.String,System.String,System.Int64)">
            <summary>
            添加标签与拥有者关联
            </summary>
            <param name="tagName">标签名</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
            <returns>返回影响行数</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.TagInOwnerRepository.AddTagInOwner(Victornet.Common.TagInOwner)">
            <summary>
            添加标签与拥有者关联
            </summary>
            <param name="tagInOwner">待创建实体</param>
            <returns>返回实体主键</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.TagInOwnerRepository.ClearTagsFromOwner(System.Int64,System.String)">
            <summary>
            清除拥有者的所有标签
            </summary>
            <param name="ownerId">拥有者Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.TagInOwnerRepository.GetTagInOwners(System.Int64,System.String)">
            <summary>
            获取拥有者的标签列表
            </summary>
            <param name="ownerId">拥有者Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.TagInOwnerRepository.GetTagInOwners(System.Int64,System.String,System.Int32,System.Int32)">
            <summary>
            获取拥有者的分页标签列表
            </summary>
            <param name="ownerId">拥有者Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="pageSize">每页显示数</param>
            <param name="pageIndex">页码</param>
        </member>
        <member name="M:Victornet.Common.Repositories.TagInOwnerRepository.GetTagInOwners(System.Int32,System.Int32)">
            <summary>
            分页获取tn_TagsInOwners表的数据(用于建索引)
            </summary>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.TagInOwnerRepository.GetTopTagInOwners(System.Int64,System.String,System.String,System.Int32)">
            <summary>
            获取拥有者的标签列表
            </summary>
            <param name="ownerId">拥有者Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="keyword">标签关键字</param>
            <param name="topNumber">前N个标签</param>
        </member>
        <member name="T:Victornet.Common.Repositories.TagRepository`1">
            <summary>
            标签仓储的具体实现类
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.TagRepository`1.Insert(`0)">
            <summary>
            创建实体
            </summary>
            <param name="entity">待创建实体</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.TagRepository`1.UpdateAuditStatus(System.Collections.Generic.IEnumerable{System.Int64},System.Boolean)">
            <summary>
            批量更新审核状态
            </summary>
            <param name="ids">标签Id列表</param>
            <param name="isApproved">是否通过审核</param>
        </member>
        <member name="M:Victornet.Common.Repositories.TagRepository`1.Delete(`0)">
            <summary>
            从数据库删除实体
            </summary>
            <param name="entity">标签实体</param>
            <returns>影响行数</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.TagRepository`1.Get(System.String,System.String)">
            <summary>
            获取标签实体
            </summary>
            <param name="tagName">标签名</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.TagRepository`1.GetTopTags(System.String,System.Int32,System.Nullable{System.Boolean},System.Nullable{Victornet.Common.SortBy_Tag},System.Boolean)">
             <summary>
             获取前N个标签
             </summary>
             <remarks>智能提示时也使用该方法获取数据</remarks>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="topNumber">前N条数据</param>
            <param name="isFeatured">是否为特色标签</param>
            <param name="sortBy">标签排序字段</param>
            <param name="isTagCloud">为true时则不启用缓存</param>
        </member>
        <member name="M:Victornet.Common.Repositories.TagRepository`1.GetTopTagNames(System.String,System.Int64,System.String,System.Int32)">
             <summary>
             获取前N个标签名
             </summary>
             <remarks>用于智能提示</remarks>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
            <param name="keyword">标签名称关键字</param>
            <param name="topNumber">前N条数据</param>
        </member>
        <member name="M:Victornet.Common.Repositories.TagRepository`1.GetTags(Victornet.Common.TagQuery,System.Int32,System.Int32)">
             <summary>
            分页检索标签
             </summary>
            <param name="query">查询条件</param>
             <param name="pageIndex">当前页码</param>
             <param name="pageSize">每页记录数</param>
             <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.TagRepository`1.GetTagsOfGroup(System.Int64,System.String,System.Int32)">
             <summary>
            分页检索标签
             </summary>
            <param name="groupId">标签分组Id</param>
            <param name="tenantTypeId">租户类型Id</param>
             <param name="pageIndex">当前页码</param>
             <param name="pageSize">每页记录数</param>
             <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.TagRepository`1.DeleteTrashDatas">
            <summary>
            删除垃圾数据
            </summary>
            <param name="serviceKey">服务标识</param>
        </member>
        <member name="T:Victornet.Common.Repositories.AuditItemInUserRoleRepository">
            <summary>
            审核设置数据访问
            </summary>
        </member>
        <member name="P:Victornet.Common.Repositories.AuditItemInUserRoleRepository.RealTimeCacheHelper">
            <summary>
            缓存设置
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.AuditItemInUserRoleRepository.CreateDAO">
            <summary>
            默认Database实例
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.AuditItemInUserRoleRepository.GetAuditItemsInUserRole(System.String)">
            <summary>
            获取用户角色对应的审核设置
            </summary>
            <param name="roleName">角色名称</param>
            <returns>返回roleName对应的审核设置</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.AuditItemInUserRoleRepository.UpdateAuditItemInUserRole(System.Collections.Generic.IEnumerable{Victornet.Common.AuditItemInUserRole})">
            <summary>
            更新审核项目设置
            </summary>
            <param name="auditItemInUserRoles">待更新的审核项目规则集合</param>
        </member>
        <member name="M:Victornet.Common.Repositories.AuditItemInUserRoleRepository.GetCacheKey_GetAuditItemsInUserRole(System.String)">
            <summary>
            获取审核项目与角色关联 的CacheKey
            </summary>
            <param name="roleName">角色名</param>
        </member>
        <member name="T:Victornet.Common.Repositories.IAuditItemInUserRoleRepository">
            <summary>
            AuditItemInUserRole仓储接口
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.IAuditItemInUserRoleRepository.GetAuditItemsInUserRole(System.String)">
            <summary>
            获取用户角色对应的审核设置
            </summary>
            <param name="roleName">角色名称</param>
            <returns>返回roleName对应的审核设置</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IAuditItemInUserRoleRepository.UpdateAuditItemInUserRole(System.Collections.Generic.IEnumerable{Victornet.Common.AuditItemInUserRole})">
            <summary>
            更新审核项目设置
            </summary>
            <param name="auditItemInUserRoles">待更新的审核项目规则集合</param>
        </member>
        <member name="T:Victornet.Common.Repositories.IPermissionItemInUserRoleRepository">
            <summary>
            PermissionItemInUserRole仓储接口
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.IPermissionItemInUserRoleRepository.UpdatePermissionItemInUserRole(System.Collections.Generic.IEnumerable{Victornet.Common.PermissionItemInUserRole})">
            <summary>
            更新权限项目设置
            </summary>
            <param name="permissionItemInUserRoles">待更新的权限项目规则集合</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IPermissionItemInUserRoleRepository.GetPermissionItemsInUserRole(System.String)">
            <summary>
            获取用户角色对应的权限设置
            </summary>
            <param name="roleName">角色名称</param>
            <returns>返回roleName对应的权限设置</returns>
        </member>
        <member name="T:Victornet.Common.Repositories.PermissionItemInUserRoleRepository">
            <summary>
            权限项目关联设置的数据访问
            </summary>
        </member>
        <member name="P:Victornet.Common.Repositories.PermissionItemInUserRoleRepository.RealTimeCacheHelper">
            <summary>
            缓存设置
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.PermissionItemInUserRoleRepository.CreateDAO">
            <summary>
            默认Database实例
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.PermissionItemInUserRoleRepository.UpdatePermissionItemInUserRole(System.Collections.Generic.IEnumerable{Victornet.Common.PermissionItemInUserRole})">
            <summary>
            更新权限项目设置
            </summary>
            <param name="permissionItemInUserRoles">待更新的权限项目规则集合</param>
        </member>
        <member name="M:Victornet.Common.Repositories.PermissionItemInUserRoleRepository.GetPermissionItemsInUserRole(System.String)">
            <summary>
            获取用户角色对应的权限设置
            </summary>
            <param name="roleName">角色名称</param>
            <returns>返回roleName对应的权限设置</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.PermissionItemInUserRoleRepository.GetCacheKey_GetPermissionItemsInUserRole(System.String)">
            <summary>
            获取权限项目与角色关联 的CacheKey
            </summary>
            <param name="roleName">角色名</param>
        </member>
        <member name="T:Victornet.Common.Repositories.ContentPrivacySpecifyObjectsRepository">
            <summary>
            内容隐私设置指定对象仓储
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.ContentPrivacySpecifyObjectsRepository.GetPrivacySpecifyObjects(System.String,System.Int64)">
            <summary>
            获取内容隐私设置指定对象
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="contentId">内容Id</param>
            <returns><remarks>key=specifyObjectTypeId,value=内容指定对象集合</remarks></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.ContentPrivacySpecifyObjectsRepository.UpdatePrivacySettings(Victornet.Common.IPrivacyable,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.IEnumerable{Victornet.Common.ContentPrivacySpecifyObject}})">
            <summary>
            更新内容隐私设置
            </summary>
            <param name="privacyable">可隐私接口</param>
            <param name="specifyObjects"><remarks>key=specifyObjectTypeId,value=内容指定对象集合</remarks></param>
        </member>
        <member name="T:Victornet.Common.Repositories.IContentPrivacySpecifyObjectsRepository">
            <summary>
            内容隐私设置指定对象接口
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.IContentPrivacySpecifyObjectsRepository.GetPrivacySpecifyObjects(System.String,System.Int64)">
            <summary>
            获取内容隐私设置指定对象
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="contentId">内容Id</param>
            <returns><remarks>key=specifyObjectTypeId,value=内容指定对象集合</remarks></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IContentPrivacySpecifyObjectsRepository.UpdatePrivacySettings(Victornet.Common.IPrivacyable,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.IEnumerable{Victornet.Common.ContentPrivacySpecifyObject}})">
            <summary>
            更新内容隐私设置
            </summary>
            <param name="privacyable">可隐私接口</param>
            <param name="specifyObjects"><remarks>key=specifyObjectTypeId,value=内容指定对象集合</remarks></param>
        </member>
        <member name="T:Victornet.Common.Repositories.IPrivacyItemRepository">
            <summary>
            隐私项目接口
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.IPrivacyItemRepository.UpdatePrivacyItems(System.Collections.Generic.IEnumerable{Victornet.Common.PrivacyItem})">
            <summary>
            更新隐私规则
            </summary>
            <param name="privacyItems">待更新的隐私项目规则集合</param>
        </member>
        <member name="T:Victornet.Common.Repositories.IStopedUserRepository">
            <summary>
            用户黑名单接口
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.IStopedUserRepository.GetStopedUsers(System.Int64)">
            <summary>
            获取用户的黑名单
            </summary>
            <returns><remarks>key=ToUserId,value=StopedUser</remarks></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IStopedUserRepository.CreateStopedUser(Victornet.Common.StopedUser)">
            <summary>
            把用户加入黑名单
            </summary>
            <param name="stopedUser">黑名单</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IStopedUserRepository.DeleteStopedUser(Victornet.Common.StopedUser)">
            <summary>
            把用户从黑名单中删除
            <param name="stopedUser">黑名单</param>
            </summary>
        </member>
        <member name="T:Victornet.Common.Repositories.IUserPrivacySettingRepository">
            <summary>
            用户隐私设置接口
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.IUserPrivacySettingRepository.UpdateUserPrivacySettings(System.Int64,System.Collections.Generic.Dictionary{System.String,Victornet.Common.PrivacyStatus})">
            <summary>
            更新用户的隐私设置
            </summary>
            <param name="userId">用户Id</param>
            <param name="userSettings"><remarks>key=itemKey,value=PrivacyStatus</remarks></param>
        </member>
        <member name="M:Victornet.Common.Repositories.IUserPrivacySettingRepository.GetUserPrivacySettings(System.Int64)">
            <summary>
            获取用户的隐私设置
            </summary>
            <param name="userId">用户Id</param>
            <returns><para>如果用户无设置返回空集合</para><remarks>key=itemKey,value=PrivacyStatus</remarks></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IUserPrivacySettingRepository.ClearUserPrivacySettings(System.Int64)">
            <summary>
            清空用户隐私设置（用于恢复到默认设置）
            </summary>
            <param name="userId"></param>
        </member>
        <member name="T:Victornet.Common.Repositories.IUserPrivacySpecifyObjectRepository">
            <summary>
            用户隐私设置指定对象接口
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.IUserPrivacySpecifyObjectRepository.UpdateUserPrivacySpecifyObjects(System.Int64,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{Victornet.Common.UserPrivacySpecifyObject}})">
            <summary>
            更新用户隐私设置指定对象
            </summary>
            <param name="userId">用户Id</param>
            <param name="userSettings"><remarks>key=itemKey,value=PrivacyStatus</remarks></param>
            <param name="specifyObjects"><remarks>key=itemKey,value=用户指定对象集合</remarks></param>
        </member>
        <member name="M:Victornet.Common.Repositories.IUserPrivacySpecifyObjectRepository.GetUserPrivacySpecifyObjects(System.Int64,System.String)">
            <summary>
            获取用户隐私设置指定对象集合
            </summary>
            <param name="userId">用户Id</param>
            <param name="itemKey">隐私项目Key</param>
            <returns><remarks>key=specifyObjectTypeId,value=用户指定对象集合</remarks></returns>
        </member>
        <member name="T:Victornet.Common.Repositories.PrivacyItemRepository">
            <summary>
            隐私项目仓储
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.PrivacyItemRepository.UpdatePrivacyItems(System.Collections.Generic.IEnumerable{Victornet.Common.PrivacyItem})">
            <summary>
            更新隐私规则
            </summary>
            <param name="privacyItems">待更新的隐私项目规则集合</param>
        </member>
        <member name="T:Victornet.Common.Repositories.StopedUserRepository">
            <summary>
            用户黑名单仓储
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.StopedUserRepository.GetStopedUsers(System.Int64)">
            <summary>
            获取用户的黑名单
            </summary>
            <returns><remarks>key=ToUserId,value=StopedUser</remarks></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.StopedUserRepository.CreateStopedUser(Victornet.Common.StopedUser)">
            <summary>
            把用户加入黑名单
            </summary>
            <param name="stopedUser">黑名单</param>
        </member>
        <member name="M:Victornet.Common.Repositories.StopedUserRepository.DeleteStopedUser(Victornet.Common.StopedUser)">
            <summary>
            把用户从黑名单中删除
            </summary>
            <param name="stopedUser">黑名单用户</param>
        </member>
        <member name="T:Victornet.Common.Repositories.UserPrivacySettingRepository">
            <summary>
            用户隐私设置仓储
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.UserPrivacySettingRepository.UpdateUserPrivacySettings(System.Int64,System.Collections.Generic.Dictionary{System.String,Victornet.Common.PrivacyStatus})">
            <summary>
            更新用户的隐私设置
            </summary>
            <param name="userId">用户Id</param>
            <param name="userSettings"><remarks>key=itemKey,value=PrivacyStatus</remarks></param>
        </member>
        <member name="M:Victornet.Common.Repositories.UserPrivacySettingRepository.GetUserPrivacySettings(System.Int64)">
            <summary>
             获取用户的隐私设置
             </summary>
             <param name="userId">用户Id</param>
             <returns><para>如果用户无设置返回空集合</para><remarks>key=itemKey,value=PrivacyStatus</remarks></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.UserPrivacySettingRepository.ClearUserPrivacySettings(System.Int64)">
            <summary>
            清空用户隐私设置（用于恢复到默认设置）
            </summary>
            <param name="userId"></param>
        </member>
        <member name="T:Victornet.Common.Repositories.UserPrivacySpecifyObjectRepository">
            <summary>
            用户隐私设置指定对象仓储
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.UserPrivacySpecifyObjectRepository.UpdateUserPrivacySpecifyObjects(System.Int64,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{Victornet.Common.UserPrivacySpecifyObject}})">
            <summary>
            更新用户隐私设置指定对象
            </summary>
            <param name="userId">用户Id</param>
            <param name="specifyObjects"><remarks>key=itemKey,value=用户指定对象集合</remarks></param>
        </member>
        <member name="M:Victornet.Common.Repositories.UserPrivacySpecifyObjectRepository.GetUserPrivacySpecifyObjects(System.Int64,System.String)">
            <summary>
            获取用户隐私设置指定对象集合
            </summary>
            <param name="userId">用户Id</param>
            <param name="itemKey">隐私项目Key</param>
            <returns><remarks>key=specifyObjectTypeId,value=用户指定对象集合</remarks></returns>
        </member>
        <member name="T:Victornet.Common.Repositories.IUserBlockRepository">
            <summary>
            屏蔽 数据访问借口
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.IUserBlockRepository.GetBlockedObjects(System.Int64,System.Int32)">
            <summary>
            获取y用户的屏蔽对象列表
            </summary>
            <param name="userId">用户id</param>
            <param name="objectType">被屏蔽的类型</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IUserBlockRepository.CleanByUser(System.Int64)">
            <summary>
            清除根据用户删除数据（删除 用户的时候使用）
            </summary>
            <param name="userId">用户id</param>
            <returns>是否成功清除数据</returns>
        </member>
        <member name="T:Victornet.Common.Repositories.UserBlockRepository">
            <summary>
            屏蔽用户的数据访问
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.UserBlockRepository.GetBlockedObjects(System.Int64,System.Int32)">
            <summary>
            获取被屏蔽对象列表
            </summary>
            <param name="userId">>UserId</param>
            <param name="objectType">被屏蔽对象类型</param>
            <returns>被屏蔽对象列表</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.UserBlockRepository.GetCacheKey_BlockedObjects(System.Int64,System.Int32)">
            <summary>
            获取cachekey
            </summary>
            <param name="userId">用户id</param>
            <param name="objectType">保存数据类型</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.UserBlockRepository.CleanByUser(System.Int64)">
            <summary>
            清除用户数据（删除用户时使用）
            </summary>
            <param name="userId">用户id</param>
            <returns>是否成功删除</returns>
        </member>
        <member name="T:Victornet.Common.Repositories.FollowRepository">
            <summary>
            关注用户Repository
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.FollowRepository.Update(Victornet.Common.FollowEntity)">
            <summary>
            把实体follow更新到数据库
            </summary>
            <param name="follow"></param>
        </member>
        <member name="M:Victornet.Common.Repositories.FollowRepository.Follow(System.Int64,System.Int64,System.Boolean)">
            <summary>
            关注用户
            </summary>
            <param name="userId">用户Id</param>
            <param name="followedUserId">被关注用户Id</param>
            <param name="isQuietly">是否悄悄关注</param>
        </member>
        <member name="M:Victornet.Common.Repositories.FollowRepository.IsFollowed(System.Int64,System.Int64)">
            <summary>
            判断是否关注了被判定用户
            </summary>
            <param name="userId">用户Id</param>
            <param name="toUserId">被判定用户Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.FollowRepository.IsMutualFollowed(System.Int64,System.Int64)">
            <summary>
            是否为双向关注
            </summary>
            <param name="userId">用户Id</param>
            <param name="toUserId">被判定用户Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.FollowRepository.CancelFollow(System.Int64,System.Int64)">
            <summary>
            取消关注
            </summary>
            <param name="userId">用户Id</param>
            <param name="followedUserId">被关注用户Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.FollowRepository.GetNewFollowerCount(System.Int64)">
            <summary>
            获取用户的最新粉丝数
            </summary>
            <param name="userId">用户Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.FollowRepository.ClearNewFollowerCount(System.Int64)">
             <summary>
             清除最新用户统计
             </summary>
            <param name="userId">用户Id</param>
             <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.FollowRepository.RemoveFollower(System.Int64,System.Int64)">
            <summary>
            移除用户的粉丝
            </summary>
            <param name="userId">用户Id</param>
            <param name="followerUserId">粉丝的用户Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.FollowRepository.Get(System.Int64,System.Int64)">
            <summary>
            获取关注用户实体
            </summary>
            <param name="userId">用户Id</param>
            <param name="followedUserId">被操作用户Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.FollowRepository.GetNoteName(System.Int64,System.Int64)">
            <summary>
            获取用户的备注名称
            </summary>
            <param name="userId">用户Id</param>
            <param name="followedUserId">被关注用户Id</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.FollowRepository.GetTopFollowedUserIds(System.Int64,System.Int32,System.Nullable{System.Int64},System.Nullable{Victornet.Common.Follow_SortBy})">
            <summary>
            获取前N条关注用户Id列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="topNumber">需要获取的记录数</param>
            <param name="groupId">分组Id</param>
            <param name="sortBy">排序方式</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.FollowRepository.GetPortionFollowedUserIds(System.Int64,System.Nullable{System.Int64},System.Nullable{Victornet.Common.Follow_SortBy})">
            <summary>
            获取关注用户Id列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="groupId">分组Id</param>
            <param name="sortBy">排序方式</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.FollowRepository.GetFollowedUserIds(System.Int64,System.Nullable{System.Int64},System.Nullable{Victornet.Common.Follow_SortBy},System.Int32)">
             <summary>
             获取关注用户Id列表
             </summary>
             <param name="userId">用户Id</param>
             <param name="groupId">用户分组Id</param>
             <param name="sortBy">排序条件</param>
             <param name="pageIndex">页码</param>
            <remarks> 默认isQuietly为 false (groupId isMutual isMutual)三者参数为互斥关系，
             当isQuietly为false并且groupId为null 则排序sortBy才生效</remarks>
        </member>
        <member name="M:Victornet.Common.Repositories.FollowRepository.GetFollowedUsers(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            批量获取关注用户列表，用于全文检索
            </summary>
            <param name="userIds">用户Id列表</param>
        </member>
        <member name="M:Victornet.Common.Repositories.FollowRepository.GetTopFollowIds(System.Int64,System.Int32,System.Nullable{System.Int64},System.Nullable{Victornet.Common.Follow_SortBy})">
            <summary>
            获取前N条关注Id列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="topNumber">需要获取的记录数</param>
            <param name="groupId">分组Id</param>
            <param name="sortBy">排序方式</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.FollowRepository.GetFollowIds(System.Int64,System.Nullable{System.Int64},System.Nullable{Victornet.Common.Follow_SortBy})">
            <summary>
            获取关注Id列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="groupId">分组Id</param>
            <param name="sortBy">排序方式</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.FollowRepository.GetFollowIdsForAt(System.String,System.Int64,System.Nullable{Victornet.Common.Follow_SortBy})">
            <summary>
            查询关注的用户列表（用于@用户）
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.FollowRepository.GetFollows(System.Int64,System.Nullable{System.Int64},System.Nullable{Victornet.Common.Follow_SortBy},System.Int32)">
             <summary>
             获取关注Id分页列表
             </summary>
             <param name="userId">用户Id</param>
             <param name="groupId">用户分组Id</param>
             <param name="sortBy">排序条件</param>
             <param name="pageIndex">页码</param>
            <remarks> 
            默认isQuietly为 false (groupId isMutual isMutual)三者参数为互斥关系，
            当isQuietly为false并且groupId为null 则排序sortBy才生效
             </remarks>
        </member>
        <member name="M:Victornet.Common.Repositories.FollowRepository.GetTopFollowedUserIdsFromUser(System.Int64,System.Int64,System.Int32,System.Int32)">
            <summary>
            根据被浏览用户获取我的关注用户中关注他的用户
            </summary>
            <param name="userId">用户Id</param>
            <param name="toUserId">被浏览用户Id</param>
            <param name="topNumber">要获取的数据记录数</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.FollowRepository.GetTopFollowedUserIdsOfFollowers(System.Int64,System.Int64,System.Int32,System.Int32)">
            <summary>
            获取用户粉丝的关注
            </summary>
            <param name="userId">用户Id</param>
            <param name="visitorId">访问者用户Id（用来排除当前访问者与访问者的关注用户）</param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.FollowRepository.GetTogetherFollowedUserIds(System.Int64,System.Int64,System.Int32,System.Int32)">
            <summary>
            获取用户与被浏览用户的共同关注用户Id列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="toUserId">被浏览用户Id</param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.FollowRepository.GetFollowerUserIds(System.Int64,Victornet.Common.Follow_SortBy,System.Int32)">
            <summary>
            获取粉丝Id列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="sortBy">查询条件</param>
            <param name="pageIndex">页码</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.FollowRepository.GetRecentFollowerUserIds(System.DateTime)">
            <summary>
            获取某个时间之后新增的粉丝Id列表，用于全文检索的定时任务
            </summary>
            <param name="lastStart">上次任务的开始时间</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.FollowRepository.GetTopFollowerUserIds(System.Int64,Victornet.Common.Follow_SortBy,System.Int32)">
            <summary>
            获取粉丝列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="sortBy">查询条件</param>
            <param name="topNumber">要获取的数据记录数</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.FollowRepository.CleanByUser(System.Int64)">
             <summary>
            清除用户所用的关注
             </summary>
             <param name="userId">用户Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.FollowRepository.UpdateLastContactDate(System.Int64,System.Collections.Generic.List{System.Int64})">
            <summary>
            批量更新最后联系时间
            </summary>
            <param name="userId"></param>
            <param name="FollowedUserIds"></param>
        </member>
        <member name="M:Victornet.Common.Repositories.FollowRepository.GenerateSql_FollowedIds(System.Int64,System.Int64)">
            <summary>
            获取用户粉丝的关注的SQL
            </summary>
            <param name="userId">用户Id</param>
            <param name="visitorId">访问者用户Id（用来排除当前访问者与访问者的关注用户）</param>
        </member>
        <member name="M:Victornet.Common.Repositories.FollowRepository.GetFollowerUserIdsFromCache(System.Int64,Victornet.Common.Follow_SortBy,PetaPoco.Sql)">
             <summary>
            从缓存中获取粉丝列表
             </summary>
             <param name="userId">用户Id</param>
             <param name="sortBy">排序类型</param>
             <param name="sql">sql语句</param>
        </member>
        <member name="M:Victornet.Common.Repositories.FollowRepository.GenerateSql_FollowerIds(System.Int64,Victornet.Common.Follow_SortBy)">
            <summary>
               获取粉丝列表的SQL
            </summary>
            <param name="userId">用户Id</param>
            <param name="sortBy">排序类型</param>
        </member>
        <member name="M:Victornet.Common.Repositories.FollowRepository.GetCacheKey_GetTopFollowedUserIds(System.Int64,System.Nullable{System.Int64},System.Nullable{Victornet.Common.Follow_SortBy})">
            <summary>
            获取关注用户Id的列表缓存CacheKey
            </summary>
            <param name="userId">用户Id</param>
            <param name="groupId">用户分组Id</param>
            <param name="sortBy">排序方式</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.FollowRepository.GetCacheKey_GetTopFollowIds(System.Int64,System.Nullable{System.Int64},System.Nullable{Victornet.Common.Follow_SortBy})">
            <summary>
            获取关注用Id的列表缓存CacheKey
            </summary>
            <param name="userId">用户Id</param>
            <param name="groupId">用户分组Id</param>
            <param name="sortBy">排序方式</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.FollowRepository.GetCacheKey_GetFollowIdsForAt(System.String,System.Int64,System.Nullable{Victornet.Common.Follow_SortBy})">
            <summary>
            获取关注用户Id的列表缓存CacheKey(用于@)
            </summary>
            <param name="userId">用户Id</param>
            <param name="groupId">用户分组Id</param>
            <param name="sortBy">排序方式</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.FollowRepository.GetCacheKey_FollowUserIds(System.Int64)">
            <summary>
            获取关注的CacheKey
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.FollowRepository.GetCacheKey_FollowerCount(System.Int64)">
            <summary>
            获取最新粉丝数的CacheKey
            <param name="userId">用户Id</param>
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.FollowRepository.GetCacheKey_GetTopFollowedIdsFromUser(System.Int64,System.Int64)">
            <summary>
            获取关注列表的我关注的也关注缓存
            </summary>
            <param name="userId">用户Id</param>
            <param name="toUserId">被浏览用户Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.FollowRepository.GetCacheKey_Follow(System.Int64,System.Int64)">
            <summary>
            获取关注实体的CacheKey
            </summary>
            <param name="userId">s\用户Id</param>
            <param name="toUserId">被关注用户Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.FollowRepository.GetCacheKey_GetTogetherFollowedIds(System.Int64,System.Int64)">
            <summary>
            获取共同关注列表缓存
            </summary>
            <param name="userId">用户Id</param>
            <param name="toUserId">被浏览用户Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.FollowRepository.GetCacheKey_GetTopFollowedIdsOfFollowers(System.Int64)">
            <summary>
            获取粉丝的关注的列表缓存CacheKey
            </summary>
            <param name="userId">用户Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.FollowRepository.GetCacheKey_IsMutualFollowed(System.Int64)">
            <summary>
            获取是否双向关注的缓存CacheKey
            </summary>
            <param name="userId">用户Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.FollowRepository.GetCacheKey_GetFollowedIds(System.Int64,System.Nullable{System.Int64},System.Nullable{Victornet.Common.Follow_SortBy})">
            <summary>
            获取关注的列表缓存
            </summary>
            <param name="userId">用户Id</param>
            <param name="groupId">分组Id</param>
            <param name="sortBy">排序类型</param>
        </member>
        <member name="M:Victornet.Common.Repositories.FollowRepository.GetCacheKey_GetFollowedUserIds(System.Int64,System.Nullable{System.Int64},System.Nullable{Victornet.Common.Follow_SortBy})">
            <summary>
            获取关注用户的列表缓存
            </summary>
            <param name="userId">用户Id</param>
            <param name="groupId">分组Id</param>
            <param name="sortBy">排序类型</param>
        </member>
        <member name="M:Victornet.Common.Repositories.FollowRepository.GetCacheKey_GetFollowerIds(System.Int64,Victornet.Common.Follow_SortBy)">
            <summary>
            获取粉丝Id列表缓存
            </summary>
            <param name="userId">用户Id</param>
            <param name="sortBy">排序类型</param>
        </member>
        <member name="P:Victornet.Common.Repositories.FollowRepository.CacheablePageCount">
            <summary>
            可缓存的列表缓存页数
            </summary>
        </member>
        <member name="T:Victornet.Common.Repositories.IFollowRepository">
            <summary>
            关注用户数据访问接口
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.IFollowRepository.Follow(System.Int64,System.Int64,System.Boolean)">
            <summary>
            关注用户
            </summary>
            <param name="userId">用户Id</param>
            <param name="followedUserId">被操作用户Id</param>
            <param name="isQuietly">是否悄悄关注</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IFollowRepository.IsFollowed(System.Int64,System.Int64)">
            <summary>
            判断是否关注了被判定用户
            </summary>
            <param name="userId">用户Id</param>
            <param name="toUserId">被判定用户Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IFollowRepository.IsMutualFollowed(System.Int64,System.Int64)">
            <summary>
            是否为双向关注
            </summary>
            <param name="userId">用户Id</param>
            <param name="toUserId">被判定用户Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IFollowRepository.CancelFollow(System.Int64,System.Int64)">
            <summary>
            取消关注
            </summary>
            <param name="userId">用户Id</param>
            <param name="followedUserId">被操作用户Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IFollowRepository.GetNewFollowerCount(System.Int64)">
            <summary>
            获取用户的最新粉丝数
            </summary>
            <param name="userId">用户Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IFollowRepository.ClearNewFollowerCount(System.Int64)">
             <summary>
             清除最新用户统计
             </summary>
            <param name="userId">用户Id</param>
             <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IFollowRepository.RemoveFollower(System.Int64,System.Int64)">
            <summary>
            移除用户的粉丝
            </summary>
            <param name="userId">用户Id</param>
            <param name="followerUserId">粉丝的用户Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IFollowRepository.Get(System.Int64,System.Int64)">
            <summary>
            获取关注用户实体
            </summary>
            <param name="userId">用户Id</param>
            <param name="followedUserId">被操作用户Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IFollowRepository.CleanByUser(System.Int64)">
             <summary>
            清除用户所用的关注
             </summary>
             <param name="userId">用户Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IFollowRepository.GetNoteName(System.Int64,System.Int64)">
            <summary>
            获取用户的备注名称
            </summary>
            <param name="userId">用户Id</param>
            <param name="followedUserId">被关注用户Id</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IFollowRepository.GetFollowedUserIds(System.Int64,System.Nullable{System.Int64},System.Nullable{Victornet.Common.Follow_SortBy},System.Int32)">
            <summary>
            获取关注用户Id列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="groupId"><para>用户分组Id</para><remarks>groupId为0时获取未分组的用户，为null时获取所有用户</remarks></param>
            <param name="sortBy">排序条件</param>
            <param name="pageIndex">页码</param>
            <remarks>
            groupId为null 则排序sortBy才生效
            </remarks>
        </member>
        <member name="M:Victornet.Common.Repositories.IFollowRepository.GetTopFollowedUserIds(System.Int64,System.Int32,System.Nullable{System.Int64},System.Nullable{Victornet.Common.Follow_SortBy})">
            <summary>
            获取前N条关注用户Id列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="topNumber">需要获取的记录数</param>
            <param name="groupId">分组Id</param>
            <param name="sortBy">排序方式</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IFollowRepository.GetPortionFollowedUserIds(System.Int64,System.Nullable{System.Int64},System.Nullable{Victornet.Common.Follow_SortBy})">
            <summary>
            获取部分关注用户Id列表
            </summary>
            <remarks>获取全部关注用户的UserId</remarks>
            <param name="userId">用户Id</param>
            <param name="groupId">分组Id</param>
            <param name="sortBy">排序方式</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IFollowRepository.GetTopFollowIds(System.Int64,System.Int32,System.Nullable{System.Int64},System.Nullable{Victornet.Common.Follow_SortBy})">
            <summary>
            获取前N条关注Id列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="topNumber">需要获取的记录数</param>
            <param name="groupId">分组Id</param>
            <param name="sortBy">排序方式</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IFollowRepository.GetFollowIds(System.Int64,System.Nullable{System.Int64},System.Nullable{Victornet.Common.Follow_SortBy})">
            <summary>
            获取关注Id列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="groupId">分组Id</param>
            <param name="sortBy">排序方式</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IFollowRepository.GetFollowIdsForAt(System.String,System.Int64,System.Nullable{Victornet.Common.Follow_SortBy})">
            <summary>
            查询关注的用户Id（用于@用户）
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IFollowRepository.GetFollows(System.Int64,System.Nullable{System.Int64},System.Nullable{Victornet.Common.Follow_SortBy},System.Int32)">
             <summary>
             获取关注Id分页列表
             </summary>
             <param name="userId">用户Id</param>
             <param name="groupId">用户分组Id</param>
             <param name="sortBy">排序条件</param>
             <param name="pageIndex">页码</param>
            <remarks> 
            默认isQuietly为 false (groupId isMutual isMutual)三者参数为互斥关系，
            当isQuietly为false并且groupId为null 则排序sortBy才生效
             </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Victornet.Common.Repositories.IFollowRepository.GetTopFollowedUserIdsFromUser(System.Int64,System.Int64,System.Int32,System.Int32)" -->
        <member name="M:Victornet.Common.Repositories.IFollowRepository.GetTopFollowedUserIdsOfFollowers(System.Int64,System.Int64,System.Int32,System.Int32)">
             <summary>
             获取用户粉丝的关注
             </summary>
             <param name="userId">用户Id</param>
             <param name="visitorId">访问者用户Id（用来排除当前访问者与访问者的关注用户）</param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
             <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IFollowRepository.GetTogetherFollowedUserIds(System.Int64,System.Int64,System.Int32,System.Int32)">
            <summary>
            获取用户与被浏览用户的共同关注用户Id列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="toUserId">被判定用户Id</param>
            <param name="topNumber">获取的数据条数</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IFollowRepository.GetFollowerUserIds(System.Int64,Victornet.Common.Follow_SortBy,System.Int32)">
            <summary>
            获取粉丝Id列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="sortBy">查询条件</param>
            <param name="pageIndex">页码</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IFollowRepository.GetRecentFollowerUserIds(System.DateTime)">
            <summary>
            获取某个时间之后新增的粉丝Id列表，用于全文检索的定时任务
            </summary>
            <param name="lastStart">上次任务的开始时间</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IFollowRepository.GetTopFollowerUserIds(System.Int64,Victornet.Common.Follow_SortBy,System.Int32)">
            <summary>
            获取粉丝列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="sortBy">查询条件</param>
            <param name="topNumber">要获取的数据记录数</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IFollowRepository.GetFollowedUsers(System.Collections.Generic.IEnumerable{System.Int64})">
             <summary>
             批量获取关注用户列表，用于全文检索
             </summary>
             <param name="userIds">用户Id列表</param>
            <remarks>默认isQuietly为0，即不查询悄悄关注的</remarks>
        </member>
        <member name="T:Victornet.Common.Repositories.IPointItemRepository">
            <summary>
            积分项目数据访问接口
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.IPointItemRepository.GetPointItems(System.Nullable{System.Int32})">
            <summary>
            获取积分项目集合
            </summary>
            <param name="applicationId">应用Id</param>
            <returns>如果无满足条件的积分项目返回空集合</returns>
        </member>
        <member name="T:Victornet.Common.Repositories.IPointRecordRepository">
            <summary>
            积分记录数据访问接口
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.IPointRecordRepository.CleanPointRecords(System.Int32,System.Boolean)">
            <summary>
             清理积分记录
            </summary>
            <param name="beforeDays">清理beforeDays天以前的积分记录</param>
            <param name="cleanSystemPointRecords">是否也删除系统积分记录</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IPointRecordRepository.GetPointRecords(System.Nullable{System.Int64},System.Nullable{System.Boolean},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Int32)">
            <summary>
            查询用户积分记录
            </summary>
            <param name="userId">用户Id<remarks>系统积分的UserId=0</remarks></param>
            <param name="isIncome">是不是收入的积分</param>
            <param name="pointItemName">积分项目名称</param>
            <param name="startDate">开始时间</param>
            <param name="endDate">截止时间</param>
            <param name="pageIndex">当前页码</param>
            <param name="pageSize">每页条数</param>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.Repositories.IPointStatisticRepository">
            <summary>
            积分项目数据访问接口
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.IPointStatisticRepository.UpdateStatistic(System.Int64,System.Collections.Generic.Dictionary{Victornet.Common.PointCategory,System.Int32})">
            <summary>
            更新用户积分统计
            </summary>
            <param name="userId">用户Id</param>
            <param name="pointCategory2PointsDictionary"><remarks>key=PointCategory,value=Points</remarks>积分分类-积分字典</param>
            <returns>修订后应获取到的积分值</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IPointStatisticRepository.Clean(System.Int32)">
            <summary>
            删除beforeDays天以前的积分统计
            </summary>
            <param name="beforeDays">天数</param>
            <returns>清除的记录数</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IPointStatisticRepository.Gets(System.Int64,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            查询积分统计列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="pointCategoryKey">积分分类Key</param>
            <param name="statisticalYear">统计年份</param>
            <param name="statisticalMonth">统计月份</param>
            <param name="statisticalDay">统计月份的第几天</param>
            <returns>积分统计列表</returns>
        </member>
        <member name="T:Victornet.Common.Repositories.PointCategoryRepository">
            <summary>
            积分类型Repository
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.PointCategoryRepository.Update(Victornet.Common.PointCategory)">
            <summary>
            更新积分类型
            </summary>
            <param name="entity">待更新的积分类型</param>
        </member>
        <member name="T:Victornet.Common.Repositories.PointItemRepository">
            <summary>
            积分项目Repository
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.PointItemRepository.Update(Victornet.Common.PointItem)">
            <summary>
            更新积分项目
            </summary>
            <param name="entity">待更新的积分项目</param>
        </member>
        <member name="M:Victornet.Common.Repositories.PointItemRepository.GetPointItems(System.Nullable{System.Int32})">
            <summary>
            获取积分项目集合
            </summary>
            <param name="applicationId">应用Id</param>
            <returns>如果无满足条件的积分项目返回空集合</returns>
        </member>
        <member name="T:Victornet.Common.Repositories.PointRecordRepository">
            <summary>
            积分记录Repository
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.PointRecordRepository.CleanPointRecords(System.Int32,System.Boolean)">
            <summary>
             清理积分记录
            </summary>
            <param name="beforeDays">清理beforeDays天以前的积分记录</param>
            <param name="cleanSystemPointRecords">是否也删除系统积分记录</param>
        </member>
        <member name="M:Victornet.Common.Repositories.PointRecordRepository.GetPointRecords(System.Nullable{System.Int64},System.Nullable{System.Boolean},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Int32)">
            <summary>
            查询用户积分记录
            </summary>
            <param name="userId">用户Id<remarks>系统积分的UserId=0</remarks></param>
            <param name="isIncome">是不是收入的积分</param>
            <param name="pointItemName">积分项目名称</param>
            <param name="startDate">开始时间</param>
            <param name="endDate">截止时间</param>
            <param name="pageIndex">当前页码</param>
            <param name="pageSize">每页条数</param>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.Repositories.PointStatisticRepository">
            <summary>
            积分统计Repository
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.PointStatisticRepository.UpdateStatistic(System.Int64,System.Collections.Generic.Dictionary{Victornet.Common.PointCategory,System.Int32})">
            <summary>
            更新积分统计
            </summary>
            <param name="userId">用户Id</param>
            <param name="pointCategory2PointsDictionary"><remarks>key=PointCategory,value=Points</remarks>积分分类-积分字典</param>
            <returns>修订后应获取到的积分值</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.PointStatisticRepository.Clean(System.Int32)">
            <summary>
            删除beforeDays天以前的积分统计
            </summary>
            <param name="beforeDays">天数</param>
            <returns>清除的记录数</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.PointStatisticRepository.Gets(System.Int64,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            查询积分统计列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="PointCategoryKey">积分项目Key</param>
            <param name="statisticalYear">统计年份</param>
            <param name="statisticalMonth">统计月份</param>
            <param name="statisticalDay">统计月份的第几天</param>
            <returns>积分统计列表</returns>
        </member>
        <member name="T:Victornet.Common.Repositories.IUserInRoleRepository">
            <summary>
            UserInRole数据访问接口
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.IUserInRoleRepository.AddUserToRoles(System.Int64,System.Collections.Generic.List{System.String})">
            <summary>
            把用户加入到一组角色中
            </summary>
            <param name="userId">用户Id</param>
            <param name="roleNames">赋予用户的用户角色</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IUserInRoleRepository.GetRoleNamesOfUser(System.Int64,System.Boolean)">
            <summary>
            获取用户的角色名称
            </summary>
            <param name="userId">用户Id</param>
            <param name="onlyPublic">是否仅获取对外公开的角色</param>
            <returns>返回用户的所有角色，如果该用户没有用户角色返回空集合</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IUserInRoleRepository.RemoveUserRoles(System.Int64)">
            <summary>
            移除用户的所有角色
            </summary>
            <param name="userId">用户Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IUserInRoleRepository.Delete(System.Int64,System.String)">
            <summary>
            删除用户的一个角色
            </summary>
            <param name="userId">用户Id</param>
            <param name="roleName">角色名</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IUserInRoleRepository.GetUserIdsOfRole(System.String)">
            <summary>
            查询拥有管理员角色的用户Id集合
            </summary>
            <param name="administratorRoleName">管理员角色名称</param>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.Repositories.RoleRepository">
            <summary>
            用户角色Repository
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.RoleRepository.Delete(Victornet.Common.Role)">
            <summary>
            删除用户角色
            </summary>
            <param name="role">待删除的用户角色</param>
            <returns>删除成功返回1，否则返回0</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.RoleRepository.Update(Victornet.Common.Role)">
            <summary>
            更新用户角色
            </summary>
            <param name="role">待更新的用户角色</param>
        </member>
        <member name="T:Victornet.Common.Repositories.UserInRoleRepository">
            <summary>
            用户角色与用户关联Repository
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.UserInRoleRepository.AddUserToRoles(System.Int64,System.Collections.Generic.List{System.String})">
            <summary>
            把用户加入到一组角色中
            </summary>
            <param name="userId">用户Id</param>
            <param name="roleNames">赋予用户的用户角色</param>
        </member>
        <member name="M:Victornet.Common.Repositories.UserInRoleRepository.Delete(System.Int64,System.String)">
            <summary>
            删除用户的一个角色
            </summary>
            <param name="userId">用户Id</param>
            <param name="roleName">角色名</param>
        </member>
        <member name="M:Victornet.Common.Repositories.UserInRoleRepository.GetRoleNamesOfUser(System.Int64,System.Boolean)">
            <summary>
            获取用户的角色名称
            </summary>
            <param name="userId">用户Id</param>
            <param name="onlyPublic">是否仅获取对外公开的角色</param>
            <returns>用户的所有角色，如果该用户没有用户角色返回空集合</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.UserInRoleRepository.GetUserIdsOfRole(System.String)">
            <summary>
            查询拥有管理员角色的用户Id集合
            </summary>
            <param name="administratorRoleName">管理员角色名称</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.UserInRoleRepository.RemoveUserRoles(System.Int64)">
            <summary>
            移除用户的所有角色
            </summary>
            <param name="userId">用户Id</param>
        </member>
        <member name="M:Victornet.Common.Repositories.IOnlineUserRepository.Offline(System.String)">
            <summary>
            用户离线（注销时调用）
            </summary>
            <param name="userName"></param>
        </member>
        <member name="M:Victornet.Common.Repositories.IOnlineUserRepository.GetLoggedUsers">
            <summary>
            获取在线登录用户列表
            </summary>
            <remarks>key=UserName,value=OnlineUser</remarks>
        </member>
        <member name="M:Victornet.Common.Repositories.IOnlineUserRepository.GetAnonymousUsers">
            <summary>
            获取匿名登录用户列表
            </summary>
            <remarks>key=UserName,value=OnlineUser</remarks>
        </member>
        <member name="M:Victornet.Common.Repositories.IOnlineUserRepository.Refresh(System.Collections.Concurrent.ConcurrentDictionary{System.String,Victornet.Common.OnlineUser})">
            <summary>
            刷新数据库
            </summary>
            <remarks>
            通过Task调用
            </remarks>
        </member>
        <member name="M:Victornet.Common.Repositories.IOnlineUserStatisticRepository.GetHighest">
            <summary>
            获取历史最高在线记录
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.IOnlineUserStatisticRepository.GetOnlineUserStatistics(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            获取在线用户统计记录
            </summary>
            <param name="startDate">开始时间</param>
            <param name="endDate">截止时间</param>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.Repositories.OnlineUserRepository">
            <summary>
            在线用户Repository
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.OnlineUserRepository.Offline(System.String)">
            <summary>
            用户离线（注销时调用）
            </summary>
            <param name="userName"></param>
        </member>
        <member name="M:Victornet.Common.Repositories.OnlineUserRepository.GetLoggedUsers">
            <summary>
            获取在线登录用户列表
            </summary>
            <remarks>key=UserName,value=OnlineUser</remarks>
        </member>
        <member name="M:Victornet.Common.Repositories.OnlineUserRepository.GetAnonymousUsers">
            <summary>
            获取匿名登录用户列表
            </summary>
            <remarks>key=UserName,value=OnlineUser</remarks>
        </member>
        <member name="M:Victornet.Common.Repositories.OnlineUserRepository.Refresh(System.Collections.Concurrent.ConcurrentDictionary{System.String,Victornet.Common.OnlineUser})">
            <summary>
            刷新数据库
            </summary>
            <remarks>
            通过Task调用
            </remarks>
        </member>
        <member name="M:Victornet.Common.Repositories.OnlineUserRepository.GetCacheKey_AnonymousUsers">
            <summary>
            获取在线匿名用户CacheKey
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.OnlineUserRepository.GetCacheKey_LoggedUsers">
            <summary>
            获取在线登录用户CacheKey
            </summary>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.Repositories.OnlineUserStatisticRepository">
            <summary>
            在线用户统计数据访问
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.OnlineUserStatisticRepository.GetHighest">
            <summary>
            获取历史最高在线记录
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.OnlineUserStatisticRepository.GetOnlineUserStatistics(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            获取在线用户统计记录
            </summary>
            <param name="startDate">开始时间</param>
            <param name="endDate">截止时间</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.OnlineUserStatisticRepository.GetCacheKey_Highest">
            <summary>
            获取历史最高在线记录CachKey
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.OnlineUserStatisticRepository.GetCacheKey_OnlineUserStatistics(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            获取在线用户统计记录CacheKey
            </summary>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.Repositories.ISettingsRepository`1">
            <summary>
            设置Repository接口
            </summary>
            <typeparam name="TSettingsEntity">设置的实体类</typeparam>
        </member>
        <member name="M:Victornet.Common.Repositories.ISettingsRepository`1.Get">
            <summary>
            获取设置
            </summary>
            <returns>settings</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.ISettingsRepository`1.Save(`0)">
            <summary>
            保存设置
            </summary>
            <param name="settings">settings</param>
        </member>
        <member name="T:Victornet.Common.Repositories.SettingsRepository`1">
            <summary>
            设置Repository
            </summary>
            <typeparam name="TSettingsEntity">设置的实体类</typeparam>
        </member>
        <member name="P:Victornet.Common.Repositories.SettingsRepository`1.RealTimeCacheHelper">
            <summary>
            缓存设置
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.SettingsRepository`1.CreateDAO">
            <summary>
            默认Database实例
            </summary>
        </member>
        <member name="M:Victornet.Common.Repositories.SettingsRepository`1.Get">
            <summary>
            获取设置
            </summary>
            <returns>settings</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.SettingsRepository`1.Save(`0)">
            <summary>
            保存设置
            </summary>
            <param name="settings">settings</param>
        </member>
        <member name="M:Victornet.Common.Repositories.SettingsRepository`1.GetClassType">
            <summary>
            获取ClassType
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Repositories.SettingsRepository`1.Serialize(`0)">
            <summary>
            把TSettingsEntity对象转换成xml
            </summary>
            <param name="settingsEntity">被转换的对象</param>
            <returns>序列化后的xml字符串</returns>
        </member>
        <member name="M:Victornet.Common.Repositories.SettingsRepository`1.Deserialize(System.String)">
            <summary>
            把json的字符串反序列化成SettingsEntity对象
            </summary>
            <param name="json">被反序列化的xml字符串</param>
            <returns>反序列化后的SettingsEntity</returns>
        </member>
        <member name="T:Victornet.Common.ApplicationDataCalculaterTask">
            <summary>
            定时计算ApplicationData
            </summary>
        </member>
        <member name="M:Victornet.Common.ApplicationDataCalculaterTask.Victornet#Tasks#ITask#Execute(Victornet.Tasks.TaskDetail)">
            <summary>
            计算ApplicationData
            </summary>
            <param name="taskDetail"></param>
        </member>
        <member name="T:Victornet.Common.Area">
            <summary>
            地区实体类
            </summary>
        </member>
        <member name="M:Victornet.Common.Area.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Victornet.Common.Area.AreaCode">
             <summary>
            地区编码
             </summary>
        </member>
        <member name="P:Victornet.Common.Area.ParentCode">
             <summary>
            父级地区编码
             </summary>
        </member>
        <member name="P:Victornet.Common.Area.Name">
             <summary>
            地区名称
             </summary>
        </member>
        <member name="P:Victornet.Common.Area.PostCode">
             <summary>
            邮政编码
             </summary>
        </member>
        <member name="P:Victornet.Common.Area.DisplayOrder">
             <summary>
            排序序号
             </summary>
        </member>
        <member name="P:Victornet.Common.Area.Depth">
             <summary>
            深度
             </summary>
        </member>
        <member name="P:Victornet.Common.Area.ChildCount">
             <summary>
            子地区个数
             </summary>
        </member>
        <member name="P:Victornet.Common.Area.Children">
            <summary>
            子地区列表
            </summary>
        </member>
        <member name="T:Victornet.Common.AreaService">
            <summary>
            地区业务逻辑类
            </summary>
        </member>
        <member name="M:Victornet.Common.AreaService.#ctor">
            <summary>
            构造器方法
            </summary>
        </member>
        <member name="M:Victornet.Common.AreaService.#ctor(Victornet.Common.Repositories.IAreaRepository)">
            <summary>
            构造器方法
            </summary>
            <param name="areaRepository"></param>
        </member>
        <member name="M:Victornet.Common.AreaService.Create(Victornet.Common.Area)">
            <summary>
            添加地区
            </summary>
        </member>
        <member name="M:Victornet.Common.AreaService.Update(Victornet.Common.Area)">
            <summary>
            更新地区
            </summary>
            <param name="area">要更新的地区</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.AreaService.Delete(System.String)">
            <summary>
            删除地区
            </summary>
            <param name="areaCode">地区编码</param>
        </member>
        <member name="M:Victornet.Common.AreaService.Get(System.String)">
            <summary>
            获取地区统计信息
            </summary>
        </member>
        <member name="M:Victornet.Common.AreaService.GetRoots">
            <summary>
            获取顶级地区集合
            </summary>
        </member>
        <member name="M:Victornet.Common.AreaService.GetDescendants(System.String)">
            <summary>
            获取后代地区
            </summary>
            <param name="parentAreaCode">父级地区编码</param>
        </member>
        <member name="M:Victornet.Common.AreaService.IsChildArea(System.String,System.String)">
            <summary>
            判断地区是否父级地区
            </summary>
            <param name="area"></param>
            <param name="parentAreaCode"></param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.AreaService.GetAllParentAreas(System.String)">
            <summary>
            获取所有父级地区
            </summary>
            <param name="areaCode"></param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.AreaService.RecursiveGetAllParentArea(Victornet.Common.Area,System.Collections.Generic.List{Victornet.Common.Area}@)">
            <summary>
            获取所有的父级地区
            </summary>
            <param name="area"></param>
            <param name="areas"></param>
        </member>
        <member name="T:Victornet.Common.AreaSettings">
            <summary>
            站点地区设置
            </summary>
        </member>
        <member name="P:Victornet.Common.AreaSettings.AreaLevel">
            <summary>
            默认使用地区的层级
            </summary>
            <remarks>1-国家级、2-省级（直辖市）、3-市级、4-县级</remarks>
        </member>
        <member name="P:Victornet.Common.AreaSettings.RootAreaCode">
            <summary>
            地区的根地区Code
            </summary>
        </member>
        <member name="T:Victornet.Common.Configuration.LogoSettings">
            <summary>
            标识图全局设置类
            </summary>
        </member>
        <member name="P:Victornet.Common.Configuration.LogoSettings.MaxLogoLength">
            <summary>
            标识图最大长度
            </summary>
        </member>
        <member name="P:Victornet.Common.Configuration.LogoSettings.AllowedFileExtensions">
            <summary>
            附件允许的文件扩展名
            </summary>
        </member>
        <member name="P:Victornet.Common.Configuration.LogoSettings.MaxWidth">
            <summary>
            标识图最大宽度
            </summary>
        </member>
        <member name="P:Victornet.Common.Configuration.LogoSettings.MaxHeight">
            <summary>
            标识图最大高度
            </summary>
        </member>
        <member name="P:Victornet.Common.Configuration.LogoSettings.ResizeMethod">
            <summary>
            标识图超过最大尺寸限制时，裁剪图像所采用的缩放方式
            </summary>
        </member>
        <member name="M:Victornet.Common.Configuration.LogoSettings.ValidateFileExtensions(System.String)">
            <summary>
            验证是否支持当前文件扩展名
            </summary>
            <param name="fileName">文件名（带后缀）</param>
            <returns>true-支持,false-不支持</returns>
        </member>
        <member name="T:Victornet.Common.Configuration.TenantLogoSettings">
            <summary>
            租户标识图配置类
            </summary>
        </member>
        <member name="M:Victornet.Common.Configuration.TenantLogoSettings.#ctor(System.Xml.Linq.XElement)">
            <summary>
            构造器
            </summary>
            <param name="xElement">标识图配置节点</param>
        </member>
        <member name="M:Victornet.Common.Configuration.TenantLogoSettings.GetRegisteredSettings(System.String)">
            <summary>
            获取注册的TenantLogoSettings
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.Configuration.TenantLogoSettings.GetAll">
            <summary>
            获取所有注册的TenantLogoSettings
            </summary>
            <returns>TenantLogoSettings集合</returns>
        </member>
        <member name="M:Victornet.Common.Configuration.TenantLogoSettings.RegisterSettings(System.Xml.Linq.XElement)">
            <summary>
            注册TenantLogoSettings
            </summary>
            <remarks>若xElement下有多个add节点，会同时注册多个TenantLogoSettings</remarks>
            <param name="xElement">标识图配置节点，会据此寻找其下所有子节点add</param>
        </member>
        <member name="P:Victornet.Common.Configuration.TenantLogoSettings.StoreProviderName">
            <summary>
            文件存储功能提供者名称
            </summary>
        </member>
        <member name="P:Victornet.Common.Configuration.TenantLogoSettings.TenantTypeId">
            <summary>
            租户类型Id
            </summary>
        </member>
        <member name="P:Victornet.Common.Configuration.TenantLogoSettings.TenantLogoDirectory">
            <summary>
            租户标识图目录
            </summary>
        </member>
        <member name="P:Victornet.Common.Configuration.TenantLogoSettings.ImageSizeTypes">
            <summary>
            图片尺寸类型集合
            </summary>
        </member>
        <member name="P:Victornet.Common.Configuration.TenantLogoSettings.MaxWidth">
            <summary>
            图片最大宽度
            </summary>
        </member>
        <member name="P:Victornet.Common.Configuration.TenantLogoSettings.MaxHeight">
            <summary>
            图片最大高度
            </summary>
        </member>
        <member name="P:Victornet.Common.Configuration.TenantLogoSettings.MaxLogoLength">
            <summary>
            标识图最大长度(单位：K)
            </summary>
        </member>
        <member name="M:Victornet.Common.Configuration.TenantLogoSettings.ValidateFileLength(System.Int32)">
            <summary>
            验证文件大小是否超出限制
            </summary>
            <param name="contentLength">需要验证的文件大小</param>
            <returns>true-未超出限制,false-超出限制</returns>
        </member>
        <member name="T:Victornet.Common.Configuration.OwnerDataSettings">
            <summary>
            用户数据配置类
            </summary>
        </member>
        <member name="M:Victornet.Common.Configuration.OwnerDataSettings.GetDataKeys(System.String)">
            <summary>
            获取注册的DataKey
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Victornet.Common.Configuration.OwnerDataSettings.RegisterStatisticsDataKeys(System.String,System.String[])">
             <summary>
             注册用户统计内容数的DataKey
             </summary>
             <param name="tenantTypeId">租户类型Id</param>
            <param name="dataKeys">需要统计的数据DataKey</param>
        </member>
        <member name="M:Victornet.Common.Configuration.OwnerDataSettings.RegisterStatisticsDataKeys(System.Collections.Generic.List{System.String},System.String[])">
             <summary>
             注册用户统计内容数的DataKey
             </summary>
             <param name="tenantTypeIds">租户类型Id集合</param>
            <param name="dataKeys">需要统计的数据DataKey</param>
        </member>
        <member name="T:Victornet.Common.Configuration.PrivacySettings">
            <summary>
            动态配置
            </summary>
        </member>
        <member name="P:Victornet.Common.Configuration.PrivacySettings.SpecifyUserMaxCount">
            <summary>
            允许用户指定可见人数的最大值
            </summary>
        </member>
        <member name="P:Victornet.Common.Configuration.PrivacySettings.StopUserMaxCount">
            <summary>
            黑名单人数限制值
            </summary>
        </member>
        <member name="T:Victornet.Common.Configuration.PointSettings">
            <summary>
            积分设置
            </summary>
        </member>
        <member name="P:Victornet.Common.Configuration.PointSettings.ExperiencePointsCoefficient">
            <summary>
            经验系数
            </summary>
        </member>
        <member name="P:Victornet.Common.Configuration.PointSettings.ReputationPointsCoefficient">
            <summary>
            威望系数
            </summary>
        </member>
        <member name="P:Victornet.Common.Configuration.PointSettings.TransactionTax">
            <summary>
            交易税（0-100）
            </summary>
        </member>
        <member name="P:Victornet.Common.Configuration.PointSettings.UserIntegratedPointRuleText">
            <summary>
            显示用户综合积分规则文字描述
            </summary>
            <example>经验*1 + 威望*2</example>
        </member>
        <member name="M:Victornet.Common.Configuration.PointSettings.CalculateIntegratedPoint(System.Int32,System.Int32)">
            <summary>
            计算用户综合积分
            </summary>
            <param name="experiencePoints">经验</param>
            <param name="reputationPoints">威望</param>
            <returns>计算后的综合积分</returns>
        </member>
        <member name="T:Victornet.Common.Configuration.UserSettings">
            <summary>
            用户相关设置
            </summary>
        </member>
        <member name="P:Victornet.Common.Configuration.UserSettings.RegistrationMode">
            <summary>
            用户注册方式设置
            </summary>
        </member>
        <member name="P:Victornet.Common.Configuration.UserSettings.AccountActivation">
            <summary>
            账户激活方法
            </summary>
        </member>
        <member name="P:Victornet.Common.Configuration.UserSettings.MinUserNameLength">
            <summary>
            用户名最短长度
            </summary>
        </member>
        <member name="P:Victornet.Common.Configuration.UserSettings.MaxUserNameLength">
            <summary>
            用户名的最大长度
            </summary>
        </member>
        <member name="P:Victornet.Common.Configuration.UserSettings.UserNameRegex">
            <summary>
            用户名验证正则表达式
            </summary>
        </member>
        <member name="P:Victornet.Common.Configuration.UserSettings.NickNameRegex">
            <summary>
            昵称的正则
            </summary>
        </member>
        <member name="P:Victornet.Common.Configuration.UserSettings.MinPasswordLength">
            <summary>
            密码最小长度
            </summary>
        </member>
        <member name="P:Victornet.Common.Configuration.UserSettings.MinRequiredNonAlphanumericCharacters">
            <summary>
            密码中包含的最少特殊字符数
            </summary>
        </member>
        <member name="P:Victornet.Common.Configuration.UserSettings.EmailRegex">
            <summary>
            Email验证正则表达式
            </summary>
        </member>
        <member name="P:Victornet.Common.Configuration.UserSettings.EnableTrackAnonymous">
            <summary>
            是否启用匿名用户跟踪
            </summary>
        </member>
        <member name="P:Victornet.Common.Configuration.UserSettings.UserOnlineTimeWindow">
            <summary>
            指定用户在最近一次活动时间之后多长时间视为在线的分钟数
            </summary>
        </member>
        <member name="P:Victornet.Common.Configuration.UserSettings.EnableNotActivatedUsersToLogin">
            <summary>
            允许未激活的用户登录
            </summary>
        </member>
        <member name="P:Victornet.Common.Configuration.UserSettings.RequiresUniqueMobile">
            <summary>
            用户注册时是否允许手机号重复
            </summary>
        </member>
        <member name="P:Victornet.Common.Configuration.UserSettings.UserPasswordFormat">
            <summary>
            用户密码加密方式
            </summary>
        </member>
        <member name="P:Victornet.Common.Configuration.UserSettings.EnableNickname">
            <summary>
            是否启用昵称
            </summary>
        </member>
        <member name="P:Victornet.Common.Configuration.UserSettings.DisplayNameType">
            <summary>
            用户对外显示哪个名称（如果未启用昵称，则该选项无需设置）
            </summary>
        </member>
        <member name="P:Victornet.Common.Configuration.UserSettings.AutomaticModerated">
            <summary>
            新注册用户是否自动处于管制状态
            </summary>
        </member>
        <member name="P:Victornet.Common.Configuration.UserSettings.NoModeratedUserPoint">
            <summary>
            用户自动接触管制状态所需的积分（用户综合积分）
            </summary>
        </member>
        <member name="P:Victornet.Common.Configuration.UserSettings.DisallowedUserNames">
            <summary>
            不允许使用的用户名
            </summary>
            <remarks>
            多个用户名之间用逗号分割
            </remarks>
        </member>
        <member name="P:Victornet.Common.Configuration.UserSettings.MyHomePageAsSiteEntry">
            <summary>
            我的首页作为站点入口
            </summary>
            <remarks>
            登录成功后是否跳转到我的首页
            </remarks>
        </member>
        <member name="P:Victornet.Common.Configuration.UserSettings.SuperAdministratorRoleName">
            <summary>
            超级管理员角色名称
            </summary>
        </member>
        <member name="P:Victornet.Common.Configuration.UserSettings.AnonymousRoleName">
            <summary>
            匿名用户角色名称
            </summary>
        </member>
        <member name="P:Victornet.Common.Configuration.UserSettings.EnableAudit">
            <summary>
            是否启用人工审核
            </summary>
        </member>
        <member name="P:Victornet.Common.Configuration.UserSettings.NoAuditedRoleNames">
            <summary>
            不需要审核的角色集合
            </summary>
        </member>
        <member name="P:Victornet.Common.Configuration.UserSettings.MinNoAuditedUserRank">
            <summary>
            最小不需要审核的用户等级
            </summary>
        </member>
        <member name="T:Victornet.Common.LogoService">
            <summary>
            标识图业务逻辑类
            </summary>
        </member>
        <member name="M:Victornet.Common.LogoService.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="P:Victornet.Common.LogoService.StoreProvider">
            <summary>
            文件存储Provider
            </summary>
        </member>
        <member name="P:Victornet.Common.LogoService.TenantLogoSettings">
            <summary>
            租户标识图设置
            </summary>
        </member>
        <member name="M:Victornet.Common.LogoService.UploadLogo(System.Object,System.IO.Stream)">
            <summary>
            上传Logo
            </summary>
            <param name="associateId"></param>
            <param name="stream"></param>
            <returns>上传文件的相对路径（包含文件名）</returns>
        </member>
        <member name="M:Victornet.Common.LogoService.DeleteLogo(System.Object)">
            <summary>
            删除Logo
            </summary>
            <param name="associateId">关联Id</param>
        </member>
        <member name="M:Victornet.Common.LogoService.GetDirectlyUrl(System.Object)">
            <summary>
            获取直连URL
            </summary>
            <param name="associateId">关联Id</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.LogoService.GetLogo(System.Object)">
            <summary>
            获取Logo
            </summary>
            <param name="associateId">关联Id</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.LogoService.GetResizedLogo(System.Object,System.String)">
            <summary>
            获取不同尺寸的Logo
            </summary>
            <param name="associateId"></param>
            <param name="imageSizeTypeKey"></param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.LogoService.GetLogoRelativePath(System.Object)">
            <summary>
            获取Logo存储的相对路径
            </summary>
            <param name="associateId">associateId</param>
        </member>
        <member name="M:Victornet.Common.LogoService.GetLogoFileName(System.Object)">
            <summary>
            获取Logo文件名称
            </summary>
            <param name="associateId">associateId</param>
        </member>
        <member name="T:Victornet.Common.IOwnerDataGetter">
            <summary>
            OwnerData数据访问接口
            </summary>
        </member>
        <member name="P:Victornet.Common.IOwnerDataGetter.ApplicationId">
            <summary>
            应用Id
            </summary>
        </member>
        <member name="P:Victornet.Common.IOwnerDataGetter.DataKey">
            <summary>
            DataKey
            </summary>
        </member>
        <member name="P:Victornet.Common.IOwnerDataGetter.DataName">
            <summary>
            要显示的名称
            </summary>
        </member>
        <member name="M:Victornet.Common.IOwnerDataGetter.GetDataUrl(System.String,System.Nullable{System.Int64})">
            <summary>
            链接数据地址
            </summary>
            <param name="ownerId"></param>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.OwnerData">
            <summary>
            用户数据实体类
            </summary>
        </member>
        <member name="M:Victornet.Common.OwnerData.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Victornet.Common.OwnerData.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Victornet.Common.OwnerData.OwnerId">
            <summary>
            UserId
            </summary>
        </member>
        <member name="P:Victornet.Common.OwnerData.TenantTypeId">
            <summary>
            租户类型Id
            </summary>
        </member>
        <member name="P:Victornet.Common.OwnerData.Datakey">
            <summary>
            数据键值（要求在用户的DataKey中唯一）
            </summary>
        </member>
        <member name="P:Victornet.Common.OwnerData.LongValue">
            <summary>
            long数据值
            </summary>
        </member>
        <member name="P:Victornet.Common.OwnerData.DecimalValue">
            <summary>
            decimal数据值
            </summary>
        </member>
        <member name="P:Victornet.Common.OwnerData.StringValue">
            <summary>
            字符串数据值
            </summary>
        </member>
        <member name="T:Victornet.Common.OwnerData_SortBy">
            <summary>
            用户数据排序
            </summary>
        </member>
        <member name="F:Victornet.Common.OwnerData_SortBy.LongValue">
            <summary>
            LongValue正排序
            </summary>
        </member>
        <member name="F:Victornet.Common.OwnerData_SortBy.LongValue_DESC">
            <summary>
            LongValue倒排序
            </summary>
        </member>
        <member name="F:Victornet.Common.OwnerData_SortBy.DecimalValue">
            <summary>
            DecimalValue正排序
            </summary>
        </member>
        <member name="F:Victornet.Common.OwnerData_SortBy.DecimalValue_DESC">
            <summary>
            DecimalValue倒排序
            </summary>
        </member>
        <member name="T:Victornet.Common.OwnerDataGetterFactory">
            <summary>
            评论URL获取器工厂
            </summary>
        </member>
        <member name="M:Victornet.Common.OwnerDataGetterFactory.Get(System.String)">
            <summary>
            依据tenantTypeId获取OwnerDatalGetterFactory
            </summary>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.OwnerDataKeys">
            <summary>
            拥有者数据标识
            </summary>
        </member>
        <member name="M:Victornet.Common.OwnerDataKeys.Instance">
            <summary>
            获取单例
            </summary>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.OwnerDataService">
            <summary>
            用户数据业务逻辑类
            </summary>
        </member>
        <member name="M:Victornet.Common.OwnerDataService.#ctor(System.String)">
            <summary>
            构造器
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Victornet.Common.OwnerDataService.#ctor(System.String,Victornet.Common.Repositories.IOwnerDataRepository)">
            <summary>
            构造器
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerDataRepository">用户数据仓储</param>
        </member>
        <member name="M:Victornet.Common.OwnerDataService.Change(System.Int64,System.String,System.Int64)">
            <summary>
            变更用户数据
            </summary>
            <param name="ownerId">用户Id</param>
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的数值</param>
        </member>
        <member name="M:Victornet.Common.OwnerDataService.Change(System.Int64,System.String,System.Decimal)">
            <summary>
            变更用户数据
            </summary>
            <param name="ownerId">用户Id</param>
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的数值</param>
        </member>
        <member name="M:Victornet.Common.OwnerDataService.Change(System.Int64,System.String,System.String)">
            <summary>
            变更用户数据
            </summary>
            <param name="ownerId">用户Id</param>
            <param name="dataKey">数据标识</param>
            <param name="value">待变更的值</param>
        </member>
        <member name="M:Victornet.Common.OwnerDataService.Get(System.Int64,System.String)">
            <summary>
            获取DataKey对应的长整形
            </summary>
            <param name="ownerId">用户Id</param>
            <param name="dataKey">DataKey</param>
            <returns>dataKey不存在时返回0</returns>
        </member>
        <member name="M:Victornet.Common.OwnerDataService.GetLong(System.Int64,System.String)">
            <summary>
            获取DataKey对应的长整形
            </summary>
            <param name="ownerId">用户Id</param>
            <param name="dataKey">DataKey</param>
            <returns>dataKey不存在时返回0</returns>
        </member>
        <member name="M:Victornet.Common.OwnerDataService.GetDecimal(System.Int64,System.String)">
            <summary>
            获取DataKey对应的Decimal
            </summary>
            <param name="ownerId">用户Id</param>
            <param name="dataKey">DataKey</param>
            <returns>dataKey不存在时返回0</returns>
        </member>
        <member name="M:Victornet.Common.OwnerDataService.GetString(System.Int64,System.String)">
            <summary>
            获取DataKey对应的String
            </summary>
            <param name="ownerId">用户Id</param>
            <param name="dataKey">DataKey</param>
            <returns>dataKey不存在时返回空字符串</returns>
        </member>
        <member name="M:Victornet.Common.OwnerDataService.GetTotalCount(System.Collections.Generic.IEnumerable{System.String},System.Int64)">
            <summary>
            获取多个数据的总计数
            </summary>
            <param name="dataKeys">需要获取统计计数的DataKeys</param>
            <param name="ownerId">用户Id</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.OwnerDataService.GetTopOwnerIds(System.String,System.Int32,System.Nullable{Victornet.Common.OwnerData_SortBy})">
            <summary>
            获取前N个用户Id数据
            </summary>
            <param name="dataKey">dataKey</param>
            <param name="topNumber">获取记录的个数</param>
            <param name="sortBy">排序字段</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.OwnerDataService.GetPagingOwnerIds(System.String,System.Int32,System.Nullable{Victornet.Common.OwnerData_SortBy})">
            <summary>
            获取用户Id分页数据
            </summary>
            <param name="dataKey">dataKey</param>
            <param name="pageIndex">页码</param>
            <param name="sortBy">排序字段</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.OwnerDataService.ClearOwnerData(System.Int64)">
            <summary>
            清除指定用户的用户数据
            </summary>
            <param name="ownerId">用户Id</param>
        </member>
        <member name="M:Victornet.Common.OwnerDataService.Gets(System.Int64,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            批量获取拥有者的数据统计
            </summary>
            <param name="ownerId"></param>
            <param name="dataKeys"></param>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.SystemData">
            <summary>
            系统数据实体类
            </summary>
        </member>
        <member name="M:Victornet.Common.SystemData.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Victornet.Common.SystemData.Datakey">
             <summary>
            数据键值
             </summary>
        </member>
        <member name="P:Victornet.Common.SystemData.LongValue">
             <summary>
            long数据值
             </summary>
        </member>
        <member name="P:Victornet.Common.SystemData.DecimalValue">
             <summary>
            decimal数据值
             </summary>
        </member>
        <member name="T:Victornet.Common.SystemDataKeys">
            <summary>
            系统数据标识
            </summary>
        </member>
        <member name="M:Victornet.Common.SystemDataKeys.Instance">
            <summary>
            获取单例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.SystemDataKeys.TradePoints">
            <summary>
            交易积分
            </summary>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.SystemDataService">
            <summary>
            系统数据业务逻辑
            </summary>
        </member>
        <member name="M:Victornet.Common.SystemDataService.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Victornet.Common.SystemDataService.#ctor(Victornet.Common.Repositories.ISystemDataRepository)">
            <summary>
            构造器
            </summary>
            <param name="systemDataRepository">系统数据仓储</param>
        </member>
        <member name="M:Victornet.Common.SystemDataService.Change(System.String,System.Int64)">
            <summary>
            变更系统数据
            </summary>
            <param name="dataKey">数据标识</param>
            <param name="number">待变更的数值</param>
        </member>
        <member name="M:Victornet.Common.SystemDataService.Change(System.String,System.Decimal)">
            <summary>
            变更系统数据
            </summary>
            <param name="dataKey">数据标识</param>
            <param name="number">待变更的数值</param>
        </member>
        <member name="M:Victornet.Common.SystemDataService.GetLong(System.String)">
            <summary>
            获取DataKey对应的长整形
            </summary>
            <param name="dataKey">DataKey</param>
            <returns>dataKey不存在时返回0</returns>
        </member>
        <member name="M:Victornet.Common.SystemDataService.GetDecimal(System.String)">
            <summary>
            获取DataKey对应的Decimal
            </summary>
            <param name="dataKey">DataKey</param>
            <returns>dataKey不存在时返回0</returns>
        </member>
        <member name="T:Victornet.Common.MultiTenantServiceKeys">
            <summary>
            多租户服务标识
            </summary>
        </member>
        <member name="M:Victornet.Common.MultiTenantServiceKeys.Count">
            <summary>
            计数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.MultiTenantServiceKeys.Comment">
            <summary>
            评论
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.MultiTenantServiceKeys.SiteCategory">
            <summary>
            站点类别
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.MultiTenantServiceKeys.UserCategory">
            <summary>
            用户类别
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.MultiTenantServiceKeys.Tag">
            <summary>
            标签
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.MultiTenantServiceKeys.Recommend">
            <summary>
             推荐
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.MultiTenantServiceKeys.Attitude">
            <summary>
            顶踩
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.MultiTenantServiceKeys.Attachment">
            <summary>
            附件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.MultiTenantServiceKeys.AtUser">
            <summary>
            AtUser
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.MultiTenantServiceKeys.Subscribe">
            <summary>
            关注内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.MultiTenantServiceKeys.Favorites">
            <summary>
            收藏
            </summary>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.TenantType">
            <summary>
            用户数据实体类
            </summary>
        </member>
        <member name="P:Victornet.Common.TenantType.TenantTypeId">
            <summary>
            租户类型Id
            </summary>
        </member>
        <member name="P:Victornet.Common.TenantType.Name">
            <summary>
            租户类型名称
            </summary>
        </member>
        <member name="P:Victornet.Common.TenantType.ApplicationId">
            <summary>
            应用Id
            </summary>
        </member>
        <member name="P:Victornet.Common.TenantType.ClassType">
            <summary>
            类型
            </summary>
        </member>
        <member name="T:Victornet.Common.TenantTypeIds">
            <summary>
            租户类型Id
            </summary>
        </member>
        <member name="M:Victornet.Common.TenantTypeIds.User">
            <summary>
            用户
            </summary>
        </member>
        <member name="M:Victornet.Common.TenantTypeIds.Group">
            <summary>
            群组
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.TenantTypeIds.Message">
            <summary>
            私信
            </summary>
        </member>
        <member name="M:Victornet.Common.TenantTypeIds.UserProfile">
            <summary>
            用户资料
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.TenantTypeIds.Search">
            <summary>
            搜索
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.TenantTypeIds.Comment">
            <summary>
            评论
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.TenantTypeIds.Tag">
            <summary>
            标签
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.TenantTypeIds.Attachment">
            <summary>
            附件
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.TenantTypeIds.Recommend">
            <summary>
            推荐
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.TenantTypeIds.Link">
            <summary>
            友情链接
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.TenantTypeIds.Announcement">
            <summary>
            站点公告
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.TenantTypeIds.Identification">
            <summary>
            身份认证
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.TenantTypeIds.IdentificationType">
            <summary>
            认证标识
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.TenantTypeIds.Advertising">
            <summary>
            广告
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.TenantTypeIds.AdvertisingPosition">
            <summary>
            广告位
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.TenantTypeIds.Role">
            <summary>
            角色
            </summary>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.TenantTypeService">
            <summary>
            租户类型业务逻辑类
            </summary>
        </member>
        <member name="M:Victornet.Common.TenantTypeService.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Victornet.Common.TenantTypeService.#ctor(Victornet.Common.Repositories.ITenantTypeRepository)">
            <summary>
            构造器
            </summary>
            <param name="userDataRepository">用户数据仓储</param>
        </member>
        <member name="M:Victornet.Common.TenantTypeService.Gets(System.String,System.Nullable{System.Int32})">
            <summary>
            依据服务或应用获取租户类型
            </summary>
            <param name="serviceKey">服务标识</param>
            <param name="applicationId">应用Id</param>
            <returns>如未满足条件的TenantType则返回空集合</returns>
        </member>
        <member name="M:Victornet.Common.TenantTypeService.Get(System.String)">
            <summary>
            依据tenantTypeId获取租户类型
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.InviteFriendSettings">
            <summary>
            邀请好友设置
            </summary>
        </member>
        <member name="F:Victornet.Common.InviteFriendSettings.allowInvitationCodeUseOnce">
            <summary>
            邀请码是否仅允许使用一次
            </summary>
        </member>
        <member name="P:Victornet.Common.InviteFriendSettings.AllowInvitationCodeUseOnce">
            <summary>
            邀请码是否仅允许使用一次(仅在注册选项为邀请注册的时候才允许管理员修改，其他时候。都修改false)
            </summary>
        </member>
        <member name="F:Victornet.Common.InviteFriendSettings.invitationCodeTimeLiness">
            <summary>
            邀请码有效期（单位：天）
            </summary>
        </member>
        <member name="P:Victornet.Common.InviteFriendSettings.InvitationCodeTimeLiness">
            <summary>
            邀请码有效期（单位：天）
            </summary>
        </member>
        <member name="F:Victornet.Common.InviteFriendSettings.invitationCodeUnitPrice">
            <summary>
            设置购买邀请码所需的交易积分
            </summary>
        </member>
        <member name="P:Victornet.Common.InviteFriendSettings.InvitationCodeUnitPrice">
            <summary>
            设置购买邀请码所需的交易积分
            </summary>
        </member>
        <member name="F:Victornet.Common.InviteFriendSettings.defaultUserInvitationCodeCount">
            <summary>
            默认用户邀请码配额
            </summary>
        </member>
        <member name="P:Victornet.Common.InviteFriendSettings.DefaultUserInvitationCodeCount">
            <summary>
            默认用户邀请码配额
            </summary>
        </member>
        <member name="T:Victornet.Common.CSVParser">
            <summary>
            CSV文件解析帮助类
            </summary>
        </member>
        <member name="M:Victornet.Common.CSVParser.GetContactAccessor(System.IO.Stream)">
            <summary>
            从CSV文件总获取联系人的方法
            </summary>
            <param name="fileStream">CSV文件流</param>
            <returns>联系人字典</returns>
        </member>
        <member name="T:Victornet.Common.IEmailContactAccessor">
            <summary>
            邮箱联系人
            </summary>
        </member>
        <member name="P:Victornet.Common.IEmailContactAccessor.EmailDomainName">
            <summary>
            Email后缀名称（不包含@）
            </summary>
        </member>
        <member name="M:Victornet.Common.IEmailContactAccessor.GetContacts(System.String,System.String,System.Boolean@)">
            <summary>
            获取邮箱联系人
            </summary>
            <param name="userName">账号</param>
            <param name="password">密码</param>
            <param name="isSuccessLogin">是否成功登录</param>
            <returns>Key:联系人Email地址，Value：联系人名称</returns>
        </member>
        <member name="T:Victornet.Common.IMsnContactAccessor">
            <summary>
            获取Msn联系人
            </summary>
        </member>
        <member name="M:Victornet.Common.IMsnContactAccessor.GetContacts(System.String,System.String,System.Boolean@)">
            <summary>
            获取Msn联系人
            </summary>
            <param name="userName">账号</param>
            <param name="password">密码</param>
            <param name="isSuccessLogin">是否成功登录</param>
            <returns>Key:联系人Email地址，Value：联系人名称</returns>
        </member>
        <member name="M:Victornet.Common.InvitationCode.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Victornet.Common.InvitationCode.Code">
             <summary>
            (使用MD5_16生成)
             </summary>
        </member>
        <member name="P:Victornet.Common.InvitationCode.UserId">
             <summary>
            用户Id
             </summary>
        </member>
        <member name="P:Victornet.Common.InvitationCode.IsMultiple">
             <summary>
            是否可以多次使用
             </summary>
        </member>
        <member name="P:Victornet.Common.InvitationCode.ExpiredDate">
             <summary>
            过期日期
             </summary>
        </member>
        <member name="P:Victornet.Common.InvitationCode.DateCreated">
             <summary>
            创建日期
             </summary>
        </member>
        <member name="T:Victornet.Common.InvitationCodeStatistic">
            <summary>
            用户配额实体
            </summary>
        </member>
        <member name="M:Victornet.Common.InvitationCodeStatistic.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Victornet.Common.InvitationCodeStatistic.UserId">
             <summary>
            UserId
             </summary>
        </member>
        <member name="P:Victornet.Common.InvitationCodeStatistic.CodeUnUsedCount">
            <summary>
            未使用的配额
            </summary>
        </member>
        <member name="P:Victornet.Common.InvitationCodeStatistic.CodeUsedCount">
            <summary>
            已经使用的配额
            </summary>
        </member>
        <member name="P:Victornet.Common.InvitationCodeStatistic.CodeBuyedCount">
            <summary>
            购买过的数目
            </summary>
        </member>
        <member name="T:Victornet.Common.InviteFriendRecord">
            <summary>
            邀请好友的记录实体
            </summary>
        </member>
        <member name="M:Victornet.Common.InviteFriendRecord.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Victornet.Common.InviteFriendRecord.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Victornet.Common.InviteFriendRecord.UserId">
             <summary>
            邀请人
             </summary>
        </member>
        <member name="P:Victornet.Common.InviteFriendRecord.InvitedUserId">
             <summary>
            受邀人
             </summary>
        </member>
        <member name="P:Victornet.Common.InviteFriendRecord.Code">
             <summary>
            邀请码
             </summary>
        </member>
        <member name="P:Victornet.Common.InviteFriendRecord.InvitingUserHasBeingRewarded">
            <summary>
            邀请用户是否得到了奖励
            </summary>
        </member>
        <member name="P:Victornet.Common.InviteFriendRecord.DateCreated">
             <summary>
            创建日期
             </summary>
        </member>
        <member name="T:Victornet.Common.InviteFriendService">
            <summary>
            邀请好友业务逻辑类
            </summary>
        </member>
        <member name="M:Victornet.Common.InviteFriendService.#ctor">
            <summary>
            不带参数的构造方法
            </summary>
        </member>
        <member name="M:Victornet.Common.InviteFriendService.#ctor(Victornet.Common.Repositories.IInvitationCodesRepository,Victornet.Common.Repositories.IInvitationCodeStatisticsRepository,Victornet.Common.Repositories.IInviteFriendRecordsRepository)">
            <summary>
             带参数的初始化方法(主要应用于测试用例)
            </summary>
            <param name="invitationCodesRepository"></param>
            <param name="invitationCodeStatisticsRepository"></param>
            <param name="inviteFriendRecordsRepository"></param>
        </member>
        <member name="M:Victornet.Common.InviteFriendService.GetInvitationCode(System.Int64)">
            <summary>
            获取邀请码
            </summary>
            <param name="userId">申请人</param>
        </member>
        <member name="M:Victornet.Common.InviteFriendService.GetInvitationCodeEntity(System.String)">
            <summary>
            获取邀请码实体
            </summary>
            <param name="invitationCode">邀请码</param>
        </member>
        <member name="M:Victornet.Common.InviteFriendService.BuyInvitationCodes(System.Int64,System.Int32)">
            <summary>
            用户购买邀请码
            </summary>
            <param name="userId">用户Id</param>
            <param name="invitationCodeCount">购买的邀请码数量</param>
        </member>
        <member name="M:Victornet.Common.InviteFriendService.DeleteInvitationCode(System.Int64,System.String)">
            <summary>
            删除邀请码（当邀请码被使用时进行调用）
            </summary>
            <param name="userId">用户Id</param>
            <param name="invitationCode">邀请码</param>
        </member>
        <member name="M:Victornet.Common.InviteFriendService.DeleteTrashInvitationCodes">
            <summary>
            批量删除过期的邀请码
            </summary>
        </member>
        <member name="M:Victornet.Common.InviteFriendService.GetMyInvitationCodes(System.Int64,System.Int32)">
            <summary>
            获取我的未使用邀请码列表
            </summary>
            <param name="userId">用户Id</param>
            <returns>未使用邀请码列表</returns>
        </member>
        <member name="M:Victornet.Common.InviteFriendService.ChangeUserInvitationCodeCount(System.Int64,System.Int32,System.Int32,System.Int32)">
            <summary>
            变更用户邀请码配额
            </summary>
            <param name="userId">用户Id</param>
            <param name="userInvitationCodeUnUsedCount">用户未使用邀请码配额增量（若减少请使用负数）</param>
            <param name="userInvitationCodeUsedCount">用户使用的邀请码配额增量（若减少请使用负数）</param>
            <param name="userInvitationCodeBuyedCount">用户购买的邀请码配额增量（若减少请使用负数）</param>
            <returns>是否更新成功</returns>
        </member>
        <member name="M:Victornet.Common.InviteFriendService.GetUserInvitationCodeStatistic(System.Int64)">
            <summary>
            获取用户邀请码统计实体
            </summary>
            <param name="userId">用户Id</param>
            <returns>用户邀请码统计实体</returns>
        </member>
        <member name="M:Victornet.Common.InviteFriendService.CreateInviteFriendRecord(Victornet.Common.InviteFriendRecord)">
            <summary>
            创建邀请好友记录
            </summary>
            <param name="inviteFriendRecord">被创建的记录实体</param>
        </member>
        <member name="M:Victornet.Common.InviteFriendService.GetInvitingUserId(System.Int64)">
            <summary>
            通过被邀请人ID获取邀请人
            </summary>
            <param name="userId">被邀请人ID</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.InviteFriendService.GetMyInviteFriendRecords(System.Int64,System.Int32)">
            <summary>
            获取我的邀请好友记录
            </summary>
            <param name="userId">用户Id</param>
            <returns>被邀请的好友Id列表</returns>
        </member>
        <member name="M:Victornet.Common.InviteFriendService.CleanByUser(System.Int64)">
            <summary>
            删除用户的所有邀请好友记录（删除用户的时候使用）
            </summary>
            <param name="userId">用户id</param>
        </member>
        <member name="M:Victornet.Common.InviteFriendService.RewardingUser(System.Int64)">
            <summary>
            记录邀请用户奖励
            </summary>
            <param name="userId">用户Id</param>
        </member>
        <member name="T:Victornet.Common.DeleteTrashInvitationCodesTask">
            <summary>
            每天执行批量删除过期的邀请码任务
            </summary>
        </member>
        <member name="M:Victornet.Common.DeleteTrashInvitationCodesTask.Execute(Victornet.Tasks.TaskDetail)">
            <summary>
            任务执行的内容
            </summary>
            <param name="taskDetail">任务配置状态信息</param>
        </member>
        <member name="T:Victornet.Common.LinktimelinessSettings">
            <summary>
            链接时效性配置
            </summary>
        </member>
        <member name="P:Victornet.Common.LinktimelinessSettings.Highlinktimeliness">
            <summary>
            高链接时效性期限配置(单位：天)
            </summary>
        </member>
        <member name="P:Victornet.Common.LinktimelinessSettings.Lowlinktimeliness">
            <summary>
            低链接时效性期限配置(单位：天)
            </summary>
        </member>
        <member name="T:Victornet.Common.ReminderSettings">
            <summary>
            站点提醒设置
            </summary>
        </member>
        <member name="P:Victornet.Common.ReminderSettings.ReminderModeSettingses">
            <summary>
            提醒方式集合
            </summary>
        </member>
        <member name="P:Victornet.Common.ReminderSettings.ReminderRecordStorageDay">
            <summary>
            提醒记录保留的天数
            </summary>
        </member>
        <member name="T:Victornet.Common.IReminderInfoAccessor">
            <summary>
            提醒信息查询接口
            </summary>
        </member>
        <member name="P:Victornet.Common.IReminderInfoAccessor.ReminderInfoTypeId">
            <summary>
            提醒信息类型Id
            </summary>
        </member>
        <member name="M:Victornet.Common.IReminderInfoAccessor.GetProcessUrl(System.Int64)">
            <summary>
            获取处理地址
            </summary>
        </member>
        <member name="M:Victornet.Common.IReminderInfoAccessor.GetUserReminderInfos">
            <summary>
            获取用户提醒信息集合
            </summary>
            <returns>用户提醒信息集合</returns>
        </member>
        <member name="T:Victornet.Common.IReminderSender">
            <summary>
            发送提醒接口
            </summary>
        </member>
        <member name="P:Victornet.Common.IReminderSender.ReminderModeId">
            <summary>
            提醒方式Id
            </summary>
        </member>
        <member name="M:Victornet.Common.IReminderSender.SendReminder(System.Collections.Generic.IList{Victornet.Common.UserReminderInfo})">
            <summary>
            发送提醒
            </summary>
            <param name="userReminderInfos">用户提醒信息集合</param>
        </member>
        <member name="T:Victornet.Common.ReminderInfo">
            <summary>
            提醒信息
            </summary>
        </member>
        <member name="P:Victornet.Common.ReminderInfo.ObjectId">
            <summary>
            提醒对象Id
            </summary>
        </member>
        <member name="P:Victornet.Common.ReminderInfo.Title">
            <summary>
            标题
            </summary>
        </member>
        <member name="P:Victornet.Common.ReminderInfo.DateCreated">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="T:Victornet.Common.ReminderInfoType">
            <summary>
            提醒信息类型实体类
            </summary>
        </member>
        <member name="M:Victornet.Common.ReminderInfoType.#cctor">
            <summary>
            静态构造器
            </summary>
        </member>
        <member name="M:Victornet.Common.ReminderInfoType.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Victornet.Common.ReminderInfoType.GetAll">
            <summary>
            获取提醒信息类型
            </summary>
            <returns>提醒信息类型</returns>
        </member>
        <member name="M:Victornet.Common.ReminderInfoType.Get(System.Int32)">
            <summary>
            获取提醒信息类型
            </summary>
            <param name="typeId">类型Id</param>
            <returns>提醒信息类型</returns>
        </member>
        <member name="M:Victornet.Common.ReminderInfoType.Add(Victornet.Common.ReminderInfoType)">
            <summary>
            添加提醒信息类型
            </summary>
            <param name="ReminderInfoType">提醒信息类型</param>
        </member>
        <member name="M:Victornet.Common.ReminderInfoType.Remove(System.Int32)">
            <summary>
            删除提醒信息类型
            </summary>
            <param name="typeId">类型Id</param>
        </member>
        <member name="P:Victornet.Common.ReminderInfoType.TypeId">
            <summary>
            类型Id
            </summary>
        </member>
        <member name="P:Victornet.Common.ReminderInfoType.TypeName">
            <summary>
            类型名称
            </summary>
        </member>
        <member name="P:Victornet.Common.ReminderInfoType.Description">
            <summary>
            类型描述
            </summary>
        </member>
        <member name="T:Victornet.Common.ReminderInfoTypeIds">
            <summary>
            提醒信息类型Id管理类
            </summary>
        </member>
        <member name="M:Victornet.Common.ReminderInfoTypeIds.Instance">
            <summary>
            获取单例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.ReminderInfoTypeIds.Message">
            <summary>
            私信
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.ReminderInfoTypeIds.Notice">
            <summary>
            通知
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.ReminderInfoTypeIds.Invitation">
            <summary>
            请求
            </summary>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.ReminderInfoTypeSettings">
            <summary>
            提醒信息类型设置实体类
            </summary>
        </member>
        <member name="P:Victornet.Common.ReminderInfoTypeSettings.ReminderInfoTypeId">
            <summary>
            提醒信息类型Id
            </summary>
        </member>
        <member name="P:Victornet.Common.ReminderInfoTypeSettings.ReminderThreshold">
            <summary>
            发送提醒的时间阀值
            </summary>
        </member>
        <member name="P:Victornet.Common.ReminderInfoTypeSettings.IsEnabled">
            <summary>
            是否启用提醒
            </summary>
        </member>
        <member name="P:Victornet.Common.ReminderInfoTypeSettings.IsRepeated">
            <summary>
            是否重复提醒
            </summary>
        </member>
        <member name="P:Victornet.Common.ReminderInfoTypeSettings.RepeatInterval">
            <summary>
            重复提醒间隔时间，多长时间（单位：分钟）发送一次提醒
            </summary>
        </member>
        <member name="T:Victornet.Common.ReminderMode">
            <summary>
            提醒方式实体类
            </summary>
        </member>
        <member name="M:Victornet.Common.ReminderMode.#cctor">
            <summary>
            静态构造器
            </summary>
        </member>
        <member name="M:Victornet.Common.ReminderMode.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Victornet.Common.ReminderMode.GetAll">
            <summary>
            获取提醒方式
            </summary>
            <returns>提醒方式</returns>
        </member>
        <member name="M:Victornet.Common.ReminderMode.Get(System.Int32)">
            <summary>
            获取提醒方式
            </summary>
            <param name="typeId">类型Id</param>
            <returns>提醒方式</returns>
        </member>
        <member name="M:Victornet.Common.ReminderMode.Add(Victornet.Common.ReminderMode)">
            <summary>
            添加提醒方式
            </summary>
            <param name="ReminderMode">提醒方式</param>
        </member>
        <member name="M:Victornet.Common.ReminderMode.Remove(System.Int32)">
            <summary>
            删除提醒方式
            </summary>
            <param name="typeId">类型Id</param>
        </member>
        <member name="P:Victornet.Common.ReminderMode.ModeId">
            <summary>
            提醒方式Id
            </summary>
        </member>
        <member name="P:Victornet.Common.ReminderMode.ModeName">
            <summary>
            提醒方式名称
            </summary>
        </member>
        <member name="P:Victornet.Common.ReminderMode.IsLimitUsed">
            <summary>
            是否仅允许特定角色用户使用（若是，则会检查站点提醒设置中提醒方式的角色限制）
            </summary>
        </member>
        <member name="P:Victornet.Common.ReminderMode.Description">
            <summary>
            提醒方式描述
            </summary>
        </member>
        <member name="T:Victornet.Common.ReminderModeIds">
            <summary>
            提醒方式Id管理类
            </summary>
        </member>
        <member name="M:Victornet.Common.ReminderModeIds.Instance">
            <summary>
            获取单例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.ReminderModeIds.Email">
            <summary>
            电子邮件
            </summary>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.ReminderModeSettings">
            <summary>
            提醒方式实体类
            </summary>
        </member>
        <member name="P:Victornet.Common.ReminderModeSettings.ModeId">
            <summary>
            提醒方式Id
            </summary>
        </member>
        <member name="P:Victornet.Common.ReminderModeSettings.ReminderInfoTypeSettingses">
            <summary>
            提醒类型设置
            </summary>
        </member>
        <member name="P:Victornet.Common.ReminderModeSettings.AllowedUserRoleNames">
            <summary>
            允许的用户角色
            </summary>
        </member>
        <member name="T:Victornet.Common.ReminderRecord">
            <summary>
            提醒记录
            </summary>
        </member>
        <member name="M:Victornet.Common.ReminderRecord.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Victornet.Common.ReminderRecord.Id">
             <summary>
            id
             </summary>
        </member>
        <member name="P:Victornet.Common.ReminderRecord.UserId">
             <summary>
            用户id
             </summary>
        </member>
        <member name="P:Victornet.Common.ReminderRecord.ReminderModeId">
             <summary>
            提醒方式(Email=1，手机=2)
             </summary>
        </member>
        <member name="P:Victornet.Common.ReminderRecord.ReminderInfoTypeId">
             <summary>
            提醒信息类型（Message=1，Notice=2，Invitation=3）
             </summary>
        </member>
        <member name="P:Victornet.Common.ReminderRecord.ObjectId">
             <summary>
            提醒对象Id
             </summary>
        </member>
        <member name="P:Victornet.Common.ReminderRecord.DateCreated">
             <summary>
            创建日期
             </summary>
        </member>
        <member name="P:Victornet.Common.ReminderRecord.LastReminderTime">
             <summary>
            最后提醒时间
             </summary>
        </member>
        <member name="T:Victornet.Common.ReminderService">
            <summary>
            提醒业务逻辑类
            </summary>
        </member>
        <member name="M:Victornet.Common.ReminderService.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Victornet.Common.ReminderService.#ctor(Victornet.Common.Repositories.IReminderRecordRepository,Victornet.Common.Repositories.IUserReminderSettingsRepository)">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Victornet.Common.ReminderService.CreateRecords(System.Int64,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            创建提醒记录
            </summary>
            <param name="userId">被提醒用户Id</param>
            <param name="reminderModeId">提醒方式</param>
            <param name="reminderInfoTypeId">提醒信息类型</param>
            <param name="objectIds">提醒对象Id集合</param>
        </member>
        <member name="M:Victornet.Common.ReminderService.UpdateRecoreds(System.Int64,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            更新提醒记录（只更新最后提醒时间）
            </summary>
            <param name="userId">被提醒用户Id</param>
            <param name="reminderModeId">提醒方式Id</param>
            <param name="reminderInfoTypeId">提醒信息类型Id</param>
            <param name="objectIds">提醒对象Id集合</param>
        </member>
        <member name="M:Victornet.Common.ReminderService.CleanByUser(System.Int64)">
            <summary>
            删除用户数据（删除用户时使用）
            </summary>
            <param name="userId">用户id</param>
        </member>
        <member name="M:Victornet.Common.ReminderService.DeleteTrashRecords">
            <summary>
            清除垃圾提醒记录
            </summary>
        </member>
        <member name="M:Victornet.Common.ReminderService.GetRecords(System.Int64,System.Int32,System.Int32)">
            <summary>
            获取用户所有的提醒记录
            </summary>
            <param name="userId">被提醒用户Id</param>
            <param name="reminderModeId">提醒方式Id</param>
            <param name="reminderInfoTypeId">提醒信息类型Id</param>
        </member>
        <member name="M:Victornet.Common.ReminderService.IsExits(System.Int64,System.Int32,System.Int32,System.Int64)">
            <summary>
            是否提醒过
            </summary>
            <param name="userId">被提醒用户Id</param>
            <param name="reminderModeId">提醒方式</param>
            <param name="reminderInfoTypeId">提醒信息类型</param>
            <param name="objectId">提醒对象Id</param>
        </member>
        <member name="M:Victornet.Common.ReminderService.GetUserReminderSettings(System.Int64,System.Int32,System.Int32)">
            <summary>
            用户获取提醒设置
            </summary>
            <param name="userId">用户Id</param>
            <param name="reminderModeId">提醒方式Id</param>
            <param name="reminderInfoTypeId">提醒信息类型Id</param>
            <returns>用户提醒设置</returns>
        </member>
        <member name="M:Victornet.Common.ReminderService.GetAllUserReminderSettings(System.Int64)">
            <summary>
            用户获取所有提醒设置
            </summary>
            <param name="userId">用户Id</param>
            <returns>Key:提醒方式Id,Value:用户提醒设置集合</returns>
        </member>
        <member name="M:Victornet.Common.ReminderService.BatchUpdateUserReminderSettings(System.Int64,System.Collections.Generic.IEnumerable{Victornet.Common.UserReminderSettings})">
            <summary>
            用户更新提醒设置
            </summary>
            <param name="userId">用户Id</param>
            <param name="userReminderSettings">用户提醒设置集合</param>
        </member>
        <member name="T:Victornet.Common.DeleteTrashReminderRecordsTask">
            <summary>
            定期清理垃圾提醒记录
            </summary>
        </member>
        <member name="M:Victornet.Common.DeleteTrashReminderRecordsTask.Execute(Victornet.Tasks.TaskDetail)">
            <summary>
            任务执行的内容
            </summary>
            <param name="taskDetail">任务配置状态信息</param>
        </member>
        <member name="T:Victornet.Common.SendReminderTask">
            <summary>
            定期发送提醒任务
            </summary>
        </member>
        <member name="M:Victornet.Common.SendReminderTask.Execute(Victornet.Tasks.TaskDetail)">
            <summary>
            任务执行的内容
            </summary>
            <param name="taskDetail">任务配置状态信息</param>
        </member>
        <member name="T:Victornet.Common.UserReminderInfo">
            <summary>
            用户提醒信息
            </summary>
        </member>
        <member name="M:Victornet.Common.UserReminderInfo.#ctor">
            <summary>
            默认构造器
            </summary>
        </member>
        <member name="M:Victornet.Common.UserReminderInfo.#ctor(System.Int64,System.Collections.Generic.IList{Victornet.Common.ReminderInfo})">
            <summary>
            有参构造器
            </summary>
            <param name="userId">用户Id</param>
            <param name="reminderInfos">提醒信息集合</param>
        </member>
        <member name="P:Victornet.Common.UserReminderInfo.UserId">
            <summary>
            用户Id
            </summary>
        </member>
        <member name="P:Victornet.Common.UserReminderInfo.ProcessUrl">
            <summary>
            处理地址（任务自运行时赋值）
            </summary>
        </member>
        <member name="P:Victornet.Common.UserReminderInfo.ReminderInfoType">
            <summary>
            提醒信息类型
            </summary>
        </member>
        <member name="P:Victornet.Common.UserReminderInfo.ReminderInfos">
            <summary>
            提醒信息集合
            </summary>
        </member>
        <member name="M:Victornet.Common.UserReminderInfo.Append(Victornet.Common.ReminderInfo)">
            <summary>
            添加提醒信息
            </summary>
            <param name="reminderInfo">提醒信息</param>
        </member>
        <member name="M:Victornet.Common.UserReminderInfo.SetReminderInfos(System.Collections.Generic.IList{Victornet.Common.ReminderInfo})">
            <summary>
            设置提醒信息
            </summary>
            <param name="reminderInfo">提醒信息</param>
        </member>
        <member name="T:Victornet.Common.UserReminderSettings">
            <summary>
            用户提醒设置实体
            </summary>
        </member>
        <member name="M:Victornet.Common.UserReminderSettings.New(Victornet.Common.ReminderInfoTypeSettings)">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Victornet.Common.UserReminderSettings.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Victornet.Common.UserReminderSettings.UserId">
             <summary>
            用户Id
             </summary>
        </member>
        <member name="P:Victornet.Common.UserReminderSettings.ReminderModeId">
             <summary>
            提醒方式(Email=1，手机=2)
             </summary>
        </member>
        <member name="P:Victornet.Common.UserReminderSettings.ReminderInfoTypeId">
             <summary>
            提醒信息类型（私信=1，通知=2，请求=3）
             </summary>
        </member>
        <member name="P:Victornet.Common.UserReminderSettings.ReminderThreshold">
             <summary>
            发送提醒的时间阀值（单位为分钟），超过此值，发现有未处理的信息将发送提醒
             </summary>
        </member>
        <member name="P:Victornet.Common.UserReminderSettings.IsEnabled">
             <summary>
            是否启用提醒
             </summary>
        </member>
        <member name="P:Victornet.Common.UserReminderSettings.IsRepeated">
             <summary>
            是否重复提醒
             </summary>
        </member>
        <member name="P:Victornet.Common.UserReminderSettings.RepeatInterval">
             <summary>
            重复提醒间隔时间，多长时间（单位：分钟）发送一次提醒
             </summary>
        </member>
        <member name="T:Victornet.Common.Announcement">
            <summary>
            公告实体类
            </summary>
        </member>
        <member name="M:Victornet.Common.Announcement.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Victornet.Common.Announcement.Id">
             <summary>
            Primary key
             </summary>
        </member>
        <member name="P:Victornet.Common.Announcement.Subject">
             <summary>
            公告主题
             </summary>
        </member>
        <member name="P:Victornet.Common.Announcement.SubjectStyle">
             <summary>
            主题字体风格
             </summary>
        </member>
        <member name="P:Victornet.Common.Announcement.Body">
             <summary>
            公告内容
             </summary>
        </member>
        <member name="P:Victornet.Common.Announcement.IsHyperLink">
             <summary>
            是否是连接
             </summary>
        </member>
        <member name="P:Victornet.Common.Announcement.HyperLinkUrl">
             <summary>
            链接地址
             </summary>
        </member>
        <member name="P:Victornet.Common.Announcement.EnabledDescription">
             <summary>
            是否启用
             </summary>
        </member>
        <member name="P:Victornet.Common.Announcement.ReleaseDate">
             <summary>
            发布时间
             </summary>
        </member>
        <member name="P:Victornet.Common.Announcement.ExpiredDate">
             <summary>
            过期时间
             </summary>
        </member>
        <member name="P:Victornet.Common.Announcement.LastModified">
             <summary>
            更新时间
             </summary>
        </member>
        <member name="P:Victornet.Common.Announcement.CreatDate">
             <summary>
            创建时间
             </summary>
        </member>
        <member name="P:Victornet.Common.Announcement.UserId">
             <summary>
            创建人Id
             </summary>
        </member>
        <member name="P:Victornet.Common.Announcement.DisplayOrder">
             <summary>
            显示顺序
             </summary>
        </member>
        <member name="P:Victornet.Common.Announcement.DisplayArea">
             <summary>
            展示区域
             </summary>
        </member>
        <member name="P:Victornet.Common.Announcement.HitTimes">
            <summary>
            浏览数
            </summary>
        </member>
        <member name="P:Victornet.Common.Announcement.UserName">
            <summary>
            撰稿人
            </summary>
        </member>
        <member name="P:Victornet.Common.Announcement.IsAdministrator">
            <summary>
            管理员标示
            </summary>
        </member>
        <member name="T:Victornet.Common.Announcement_Status">
            <summary>
            公告状态
            </summary>
        </member>
        <member name="F:Victornet.Common.Announcement_Status.UnPublish">
            <summary>
            未发布
            </summary>
        </member>
        <member name="F:Victornet.Common.Announcement_Status.Published">
            <summary>
            已发布
            </summary>
        </member>
        <member name="F:Victornet.Common.Announcement_Status.Expired">
            <summary>
            已过期
            </summary>
        </member>
        <member name="T:Victornet.Common.Announcement_DisplayArea">
            <summary>
            公告呈现区域
            </summary>
        </member>
        <member name="F:Victornet.Common.Announcement_DisplayArea.Home">
            <summary>
            频道首页
            </summary>
        </member>
        <member name="F:Victornet.Common.Announcement_DisplayArea.UserSpace">
            <summary>
            用户空间首页
            </summary>
        </member>
        <member name="T:Victornet.Common.AnnouncementService">
            <summary>
            公告业务逻辑
            </summary>
        </member>
        <member name="M:Victornet.Common.AnnouncementService.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Victornet.Common.AnnouncementService.#ctor(Victornet.Common.Repositories.IAnnouncementRepository)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Victornet.Common.AnnouncementService.Create(Victornet.Common.Announcement)">
            <summary>
            创建公告
            </summary>
            <param name="announcement">公告实体</param>
        </member>
        <member name="M:Victornet.Common.AnnouncementService.Update(Victornet.Common.Announcement)">
            <summary>
            更新公告
            </summary>
            <param name="announcement">公告实体</param>
        </member>
        <member name="M:Victornet.Common.AnnouncementService.Delete(System.Int64)">
            <summary>
            删除公告
            </summary>
            <param name="announcementId">公告Id</param>
        </member>
        <member name="M:Victornet.Common.AnnouncementService.ChangeStatusToExpired(System.Int64)">
            <summary>
            更变为过期
            </summary>
            <param name="announcementId">公告Id</param>
        </member>
        <member name="M:Victornet.Common.AnnouncementService.Get(System.Int64)">
            <summary>
            获取公告
            </summary>
            <param name="announcementId">公告Id</param>
        </member>
        <member name="M:Victornet.Common.AnnouncementService.Gets(System.String)">
            <summary>
            根据展示区域过去公告
            </summary>
            <param name="displayArea">显示区域</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.AnnouncementService.GetForAdmin(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{Victornet.Common.Announcement_Status},System.String,System.Int32,System.Int32)">
            <summary>
            获取公告(后台管理)
            </summary>
            <param name="keyword">关键字</param>
            <param name="startDate_Expired">过期时间前</param>
            <param name="endDate_Expired">过期时间后</param>
            <param name="startDate_Update">更新时间前</param>
            <param name="endDate_Update">更新时间后</param>
            <param name="status">状态</param>
            <param name="displayArea">显示区域</param>
            <param name="pageIndex">pageIndex</param>
            <param name="pageSize">pageSize</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.AnnouncementService.Gets(System.Int32,System.Int32)">
            <summary>
            获取公告(前台)
            </summary>
            <param name="pageSize">pageSize</param>
            <param name="pageIndex">pageIndex</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.AnnouncementService.ChangeDisplayOrder(System.Int64,System.Int64)">
            <summary>
            改变显示顺序
            </summary>
            <param name="id">id</param>
            <param name="referenceId">referenceId</param>
        </member>
        <member name="T:Victornet.Common.Category">
            <summary>
            分类实体类
            </summary>
        </member>
        <member name="M:Victornet.Common.Category.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Victornet.Common.Category.CategoryId">
             <summary>
            类别Id 
             </summary>
        </member>
        <member name="P:Victornet.Common.Category.ParentId">
             <summary>
            父评论Id（顶级ParentId=0）
             </summary>
        </member>
        <member name="P:Victornet.Common.Category.OwnerId">
             <summary>
            拥有者Id
             </summary>
        </member>
        <member name="P:Victornet.Common.Category.TenantTypeId">
             <summary>
            租户类型Id
             </summary>
        </member>
        <member name="P:Victornet.Common.Category.CategoryName">
             <summary>
            类别名称
             </summary>
        </member>
        <member name="P:Victornet.Common.Category.Description">
             <summary>
            类别描述
             </summary>
        </member>
        <member name="P:Victornet.Common.Category.DisplayOrder">
             <summary>
            排序序号
             </summary>
        </member>
        <member name="P:Victornet.Common.Category.Depth">
             <summary>
            类别深度 顶级类别 Depth=0
             </summary>
        </member>
        <member name="P:Victornet.Common.Category.ChildCount">
             <summary>
            子类别数目
             </summary>
        </member>
        <member name="P:Victornet.Common.Category.ItemCount">
             <summary>
            内容项数目
             </summary>
        </member>
        <member name="P:Victornet.Common.Category.PrivacyStatus">
             <summary>
            隐私状态
             </summary>
        </member>
        <member name="P:Victornet.Common.Category.AuditStatus">
             <summary>
            审核状态
             </summary>
        </member>
        <member name="P:Victornet.Common.Category.FeaturedItemId">
             <summary>
            特征内容项目Id
             </summary>
        </member>
        <member name="P:Victornet.Common.Category.LastModified">
             <summary>
            最后更新日期
             </summary>
        </member>
        <member name="P:Victornet.Common.Category.DateCreated">
             <summary>
            创建日期
             </summary>
        </member>
        <member name="P:Victornet.Common.Category.Parent">
            <summary>
            父类别 
            </summary>
        </member>
        <member name="P:Victornet.Common.Category.Children">
            <summary>
            子类别列表
            </summary>
        </member>
        <member name="P:Victornet.Common.Category.CumulateItemCount">
            <summary>
            累积内容项数量(包含所有后代ItemCount)
            </summary>
        </member>
        <member name="P:Victornet.Common.Category.MaxDepth">
            <summary>
            移动个数
            </summary>
        </member>
        <member name="T:Victornet.Common.CategoryEventArgs">
            <summary>
            分类自定义事件
            </summary>
        </member>
        <member name="M:Victornet.Common.CategoryEventArgs.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="eventOperationType">时间操作类型</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Victornet.Common.CategoryEventArgs.#ctor(System.String,System.String,System.Int64)">
            <summary>
            构造函数
            </summary>
            <param name="eventOperationType">时间操作类型</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="itemId">分类成员Id</param>
        </member>
        <member name="M:Victornet.Common.CategoryEventArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="eventOperationType">时间操作类型</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="tagName">分类名</param>
        </member>
        <member name="P:Victornet.Common.CategoryEventArgs.TenantTypeId">
            <summary>
            租户类型Id
            </summary>
        </member>
        <member name="P:Victornet.Common.CategoryEventArgs.ItemId">
            <summary>
            分类成员Id
            </summary>
        </member>
        <member name="P:Victornet.Common.CategoryEventArgs.CategoryName">
            <summary>
            分类名
            </summary>
        </member>
        <member name="T:Victornet.Common.CategoryService">
            <summary>
            分类业务逻辑类
            </summary>
        </member>
        <member name="T:Victornet.Common.CategoryService`1">
            <summary>
            分类业务逻辑类
            </summary>
        </member>
        <member name="M:Victornet.Common.CategoryService`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Victornet.Common.CategoryService`1.#ctor(Victornet.Common.Repositories.ICategoryRepository{`0},Victornet.Common.Repositories.IItemInCategoryRepository)">
            <summary>
            可设置repository的构造函数
            </summary>
        </member>
        <member name="M:Victornet.Common.CategoryService`1.Create(`0)">
            <summary>
            创建类别
            </summary>
            <param name="category">待创建的类别</param>
            <returns>创建成功返回true，否则返回false</returns>
        </member>
        <member name="M:Victornet.Common.CategoryService`1.Update(`0)">
            <summary>
            更新类别，注意：不能更新ParentId属性！
            </summary>
            <param name="category">待更新的类别</param>
        </member>
        <member name="M:Victornet.Common.CategoryService`1.Delete(System.Int64)">
            <summary>
            删除类别
            </summary>
            <param name="categoryId">待删除类别Id</param>
            <returns>删除成功返回true，否则返回false</returns>
        </member>
        <member name="M:Victornet.Common.CategoryService`1.CleanByUser(System.Int64)">
            <summary>
            根据用户删除用户类别（删除用户时使用）
            </summary>
        </member>
        <member name="M:Victornet.Common.CategoryService`1.UpdateAuditStatus(System.Collections.Generic.IEnumerable{System.Int64},Victornet.Common.AuditStatus)">
            <summary>
            批量更新审核状态
            </summary>
            <param name="ids">分类Id列表</param>
            <param name="auditingStatus">审核状态</param>
        </member>
        <member name="M:Victornet.Common.CategoryService`1.Merge(System.Int64,System.Int64)">
            <summary>
            从fromCategoryId并入到toCategoryId
            </summary>
            <remarks>
            例如：将分类fromCategoryId合并到分类toCategoryId，那么fromCategoryId分类下的所有子分类和实体全部归到toCategoryId分类，同时删除fromCategoryId分类
            </remarks>
            <param name="fromCategoryId">合并分类源类别</param>
            <param name="toCategoryId">合并分类目标类别</param>
        </member>
        <member name="M:Victornet.Common.CategoryService`1.Move(System.Int64,System.Int64)">
            <summary>
            把fromCategoryId移动到toCategoryId
            </summary>
            <remarks>
            将一个分类移动到另一个分类，并作为另一个分类的子分类
            </remarks>
            <param name="fromCategoryId">被移动类别</param>
            <param name="toCategoryId">目标类别</param>
        </member>
        <member name="M:Victornet.Common.CategoryService`1.Get(System.Int64)">
            <summary>
            获取Category
            </summary>
            <param name="categoryId">CategoryId</param>
        </member>
        <member name="M:Victornet.Common.CategoryService`1.GetOwnerCategories(System.Int64,System.String)">
            <summary>
            获取拥有者的类别列表
            </summary>
            <param name="ownerId">类别拥有者Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns>按树状排序的</returns>
        </member>
        <member name="M:Victornet.Common.CategoryService`1.GetRootCategories(System.String,System.Int64)">
            <summary>
            获取Onwer的所有根类别
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">OwnerId</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.CategoryService`1.GetChildren(System.Int64)">
            <summary>
            获取子类别
            </summary>
            <param name="parentCategoryId">父类别Id</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.CategoryService`1.GetDescendants(System.Int64)">
            <summary>
            获取后代类别
            </summary>
            <param name="parentCategoryId">父类别Id</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.CategoryService`1.GetCategories(System.Nullable{Victornet.Common.PubliclyAuditStatus},System.String,System.String,System.Int32)">
            <summary>
            分页检索类别
            </summary>
            <returns>
            按创建时间倒序排列的分页类别列表
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Victornet.Common.CategoryService`1.GetOwnerCategories(System.Nullable{Victornet.Common.PubliclyAuditStatus},System.String,System.String,System.Int64,System.Int32,System.Int32)" -->
        <member name="M:Victornet.Common.CategoryService`1.AddItemsToCategory(System.Collections.Generic.IEnumerable{System.Int64},System.Int64)">
            <summary>
            批量为内容项设置类别
            </summary>
            <param name="itemIds">内容项Id集合</param>
            <param name="categoryId">类别Id</param>
        </member>
        <member name="M:Victornet.Common.CategoryService`1.AddCategoriesToItem(System.Collections.Generic.IEnumerable{System.Int64},System.Int64)">
            <summary>
            为内容项批量设置类别
            </summary>
            <param name="categoryIds">类别Id集合</param>
            <param name="itemId">内容项Id</param>
            <param name="ownerId">类别拥有者Id</param>
        </member>
        <member name="M:Victornet.Common.CategoryService`1.ClearCategoriesFromItem(System.Int64,System.Nullable{System.Int64},System.String)">
            <summary>
            清除内容项的所有类别(某个租户和用户的)
            </summary>
            <param name="itemId">内容项Id</param>
            <param name="ownerId">分类所有者</param>
            <param name="tenantTypeId">租户Id</param>
        </member>
        <member name="M:Victornet.Common.CategoryService`1.ClearItemsFromCategory(`0)">
            <summary>
            删除分类下的所有的关联项
            </summary>
            <param name="category">要处理的分类</param>
            <param name="ownerId">拥有者Id</param>
        </member>
        <member name="M:Victornet.Common.CategoryService`1.ClearItemsFromCategory(System.Int64)">
            <summary>
            删除分类下的所有的关联项
            </summary>
            <param name="categoryId">分类Id</param>
        </member>
        <member name="M:Victornet.Common.CategoryService`1.DeleteItemInCategory(System.Int64,System.Int64)">
            <summary>
            删除分类同内容的关联项
            </summary>
            <param name="categoryId">分类Id</param>
            <param name="itemId">内容项Id</param>
            <param name="ownerId">拥有者Id</param>
        </member>
        <member name="M:Victornet.Common.CategoryService`1.MoveItemsToCategory(System.Collections.Generic.IEnumerable{System.Int64},System.Int64,System.Nullable{System.Int64},System.String)">
            <summary>
            将内容项从fromCategoryId转移到toCategoryId
            </summary>
            <param name="itemIds">要转移的内容项</param>
            <param name="toCategoryId">目标分类Id</param>
            <param name="ownerId">分类所有者</param>
            <param name="tenantTypeId">租户Id</param>
        </member>
        <member name="M:Victornet.Common.CategoryService`1.GetItemIds(System.Int64,System.Boolean)">
            <summary>
            获取类别的内容项集合
            </summary>
            <param name="categoryId">分类的Id集合</param>
            <returns>内容项的ID集合</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Victornet.Common.CategoryService`1.GetItemIds(System.Int64,System.Boolean,System.Int32,System.Int32,System.Int64@)" -->
        <member name="M:Victornet.Common.CategoryService`1.GetCategoriesOfItem(System.Int64,System.Nullable{System.Int64},System.String)">
            <summary>
            获取内容项的所有类别
            </summary>
            <param name="itemId">内容项Id</param>
            <returns>返回内容项的类别集合</returns>
            <param name="ownerId">分类所有者</param>
            <param name="tenantTypeId">租户Id</param>
        </member>
        <member name="T:Victornet.Common.ItemInCategory">
            <summary>
            分类与内容的关联项实体
            </summary>
        </member>
        <member name="M:Victornet.Common.ItemInCategory.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Victornet.Common.ItemInCategory.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Victornet.Common.ItemInCategory.CategoryId">
             <summary>
            类别Id
             </summary>
        </member>
        <member name="P:Victornet.Common.ItemInCategory.ItemId">
             <summary>
            内容项Id
             </summary>
        </member>
        <member name="T:Victornet.Common.IRecommendUrlGetter">
            <summary>
            推荐中获取连接的接口
            </summary>
        </member>
        <member name="P:Victornet.Common.IRecommendUrlGetter.TenantTypeId">
            <summary>
            租户类型id
            </summary>
        </member>
        <member name="M:Victornet.Common.IRecommendUrlGetter.RecommendItemDetail(System.Int64)">
            <summary>
            详细页面地址
            </summary>
            <param name="itemId"></param>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.RecommendUrlGetterFactory">
            <summary>
            推荐获取连接的工厂
            </summary>
        </member>
        <member name="M:Victornet.Common.RecommendUrlGetterFactory.Get(System.String)">
            <summary>
            获取连接的方法
            </summary>
            <param name="tenantTypeId">租户类型id</param>
            <returns>获取连接的实例</returns>
        </member>
        <member name="T:Victornet.Common.RecommendItem">
            <summary>
            推荐内容
            </summary>
        </member>
        <member name="M:Victornet.Common.RecommendItem.New">
            <summary>
             推荐内容
            </summary>
        </member>
        <member name="P:Victornet.Common.RecommendItem.IsLink">
            <summary>
            IsLink
            </summary>
        </member>
        <member name="P:Victornet.Common.RecommendItem.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Victornet.Common.RecommendItem.TenantTypeId">
             <summary>
            租户类型Id
             </summary>
        </member>
        <member name="P:Victornet.Common.RecommendItem.TypeId">
             <summary>
            推荐类型Id
             </summary>
        </member>
        <member name="P:Victornet.Common.RecommendItem.ItemId">
             <summary>
            内容实体Id
             </summary>
        </member>
        <member name="P:Victornet.Common.RecommendItem.ItemName">
             <summary>
            推荐标题（默认为内容名称或标题，允许推荐人修改）
             </summary>
        </member>
        <member name="P:Victornet.Common.RecommendItem.FeaturedImage">
             <summary>
            推荐标题图(存储图片文件名或完整图片链接地址)
             </summary>
        </member>
        <member name="P:Victornet.Common.RecommendItem.ReferrerName">
             <summary>
            推荐人DisplayName
             </summary>
        </member>
        <member name="P:Victornet.Common.RecommendItem.ReferrerId">
             <summary>
            推荐人用户Id
             </summary>
        </member>
        <member name="P:Victornet.Common.RecommendItem.DateCreated">
             <summary>
            推荐日期
             </summary>
        </member>
        <member name="P:Victornet.Common.RecommendItem.ExpiredDate">
             <summary>
            推荐期限
             </summary>
        </member>
        <member name="P:Victornet.Common.RecommendItem.DisplayOrder">
             <summary>
            排序顺序（默认和Id一致）
             </summary>
        </member>
        <member name="P:Victornet.Common.RecommendItem.RecommendItemType">
            <summary>
            推荐类别
            </summary>
        </member>
        <member name="P:Victornet.Common.RecommendItem.DetailUrl">
            <summary>
            详细页面地址
            </summary>
        </member>
        <member name="P:Victornet.Common.RecommendItem.LinkAddress">
            <summary>
            外链地址
            </summary>
        </member>
        <member name="P:Victornet.Common.RecommendItem.UserId">
            <summary>
            作者Id
            </summary>
        </member>
        <member name="T:Victornet.Common.RecommendItemType">
            <summary>
            推荐类别
            </summary>
        </member>
        <member name="M:Victornet.Common.RecommendItemType.New">
            <summary>
            推荐类别
            </summary>
        </member>
        <member name="P:Victornet.Common.RecommendItemType.TypeId">
             <summary>
            创建后不允许修改，建议格式为：6位TenantTypeId +2位顺序号
             </summary>
        </member>
        <member name="P:Victornet.Common.RecommendItemType.TenantTypeId">
             <summary>
            租户类型Id
             </summary>
        </member>
        <member name="P:Victornet.Common.RecommendItemType.Name">
             <summary>
            推荐类型名称
             </summary>
        </member>
        <member name="P:Victornet.Common.RecommendItemType.Description">
             <summary>
            推荐类型描述
             </summary>
        </member>
        <member name="P:Victornet.Common.RecommendItemType.HasFeaturedImage">
             <summary>
            是否包含标题图
             </summary>
        </member>
        <member name="P:Victornet.Common.RecommendItemType.DateCreated">
             <summary>
            创建日期
             </summary>
        </member>
        <member name="T:Victornet.Common.RecommendService">
            <summary>
            推荐业务逻辑类
            </summary>
        </member>
        <member name="M:Victornet.Common.RecommendService.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Victornet.Common.RecommendService.#ctor(Victornet.Common.Repositories.IRecommendItemRepository,Victornet.Common.Repositories.IRecommendItemTypeRepository)">
            <summary>
            构造器
            </summary>
            <param name="recommendItemRepository">推荐内容仓储接口</param>
            <param name="recommendItemTypeRepository">推荐类别仓储接口</param>
        </member>
        <member name="M:Victornet.Common.RecommendService.CreateRecommendType(Victornet.Common.RecommendItemType)">
            <summary>
            创建推荐类别
            </summary>
            <param name="recommendType">推荐类别实体</param>
            <returns>创建成功返回true，失败返回false</returns>
        </member>
        <member name="M:Victornet.Common.RecommendService.UpdateRecommendType(Victornet.Common.RecommendItemType)">
            <summary>
            更新推荐类别
            </summary>
            <param name="recommendType">推荐类别实体</param>
            <returns>更新成功返回true，失败返回false</returns>
        </member>
        <member name="M:Victornet.Common.RecommendService.DeleteRecommendType(System.String)">
            <summary>
            删除推荐类别
            </summary>
            <param name="recommendTypeId">推荐类别Id</param>
            <returns>删除成功返回true，失败返回false</returns>
        </member>
        <member name="M:Victornet.Common.RecommendService.GetRecommendType(System.String)">
            <summary>
            获取推荐类别
            </summary>
            <param name="recommendTypeId">推荐类别Id</param>
        </member>
        <member name="M:Victornet.Common.RecommendService.GetRecommendTypes(System.String)">
            <summary>
            获取推荐类别列表
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Victornet.Common.RecommendService.Create(Victornet.Common.RecommendItem)">
            <summary>
            创建推荐内容
            </summary>
            <param name="item">推荐内容实体</param>
            <returns>创建成功返回true，失败返回false</returns>
        </member>
        <member name="M:Victornet.Common.RecommendService.Update(Victornet.Common.RecommendItem)">
            <summary>
            更新推荐内容
            </summary>
            <param name="item">推荐内容实体</param>
            <returns>更新成功返回true，失败返回false</returns>
        </member>
        <member name="M:Victornet.Common.RecommendService.ChangeDisplayOrder(System.Int64,System.Int64)">
            <summary>
            变更推荐内容的排列顺序
            </summary>
            <param name="id">待调整的推荐Id</param>
            <param name="referenceId">参照推荐Id</param>
        </member>
        <member name="M:Victornet.Common.RecommendService.UploadLogo(System.Int64,System.IO.Stream)">
            <summary>
            上传Logo
            </summary>
            <param name="recommendId">推荐Id</param>
            <param name="stream">Logo文件流</param>
        </member>
        <member name="M:Victornet.Common.RecommendService.DeleteLogo(System.Int64)">
            <summary>
            删除Logo
            </summary>
            <param name="recommendId">推荐Id</param>
        </member>
        <member name="M:Victornet.Common.RecommendService.Delete(System.Int64)">
            <summary>
            删除推荐内容
            </summary>
            <param name="recommendId">推荐Id</param>
            <returns>删除成功返回true，失败返回false</returns>
        </member>
        <member name="M:Victornet.Common.RecommendService.Delete(System.Int64,System.String)">
            <summary>
            删除推荐内容
            </summary>
            <param name="itemId">内容Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns>删除成功返回true，失败返回false</returns>
        </member>
        <member name="M:Victornet.Common.RecommendService.DeleteExpiredRecommendItems">
            <summary>
            定期移除过期的推荐内容
            </summary>
        </member>
        <member name="M:Victornet.Common.RecommendService.Get(System.Int64)">
            <summary>
            获取推荐内容
            </summary>
            <param name="recommendId">推荐内容Id</param>
        </member>
        <member name="M:Victornet.Common.RecommendService.Get(System.Int64,System.String)">
            <summary>
            获取推荐内容
            </summary>
            <param name="itemId">推荐内容Id</param>
            <param name="recommendTypeId">推荐类型Id</param>
        </member>
        <member name="M:Victornet.Common.RecommendService.GetTops(System.Int32,System.String)">
            <summary>
            获取某种推荐类别下的前N条推荐内容
            </summary>
            <param name="topNumber">前N条</param>
            <param name="recommendTypeId">推荐类别Id</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.RecommendService.Gets(System.String,System.Int32)">
            <summary>
            获取某种推荐类别下的推荐内容分页集合
            </summary>
            <param name="topNumber">前N条</param>
            <param name="recommendTypeId">推荐类别Id</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.RecommendService.Gets(System.Int64,System.String)">
            <summary>
            获取某条内容的所有推荐
            </summary>
            <param name="itemId">内容Id</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.RecommendService.GetsForAdmin(System.String,System.String,System.Nullable{System.Boolean},System.Int32,System.Int32)">
            <summary>
            分页获取推荐内容后台管理列表
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="recommendTypeId">推荐类型Id</param>
            <param name="isLink">是否是外链</param>
            <param name="pageSize">页容量</param>
            <param name="pageIndex">页码</param>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.DeleteExpiredRecommendItemsTask">
            <summary>
            定期移除过期的推荐内容的任务
            </summary>
        </member>
        <member name="M:Victornet.Common.DeleteExpiredRecommendItemsTask.Execute(Victornet.Tasks.TaskDetail)">
            <summary>
            任务执行的内容
            </summary>
            <param name="taskDetail">任务配置状态信息</param>
        </member>
        <member name="T:Victornet.Common.ITagUrlGetter">
            <summary>
            标签Url获取接口
            </summary>
        </member>
        <member name="M:Victornet.Common.ITagUrlGetter.GetUrl(System.String,System.Int64)">
            <summary>
            获取标签访问Url
            </summary>
            <param name="tagName">标签名</param>
            <param name="ownerId"></param>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.TagUrlGetterManager">
            <summary>
            标签url获取管理器
            </summary>
        </member>
        <member name="M:Victornet.Common.TagUrlGetterManager.GetRegisteredGetter(System.String)">
            <summary>
            获取注册的TagUrlGetters
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.TagUrlGetterManager.RegisterGetter(System.String,Victornet.Common.ITagUrlGetter)">
             <summary>
             注册UserDataSettings
             </summary>
             <param name="tenantTypeId">租户类型Id</param>
            <param name="getter">标签Url获取器</param>
        </member>
        <member name="M:Victornet.Common.CountTypesExtension.ItemCounts(Victornet.Common.CountTypes)">
            <summary>
            讨论次数
            </summary>
        </member>
        <member name="T:Victornet.Common.ItemInTag">
            <summary>
            标签与内容的关联项实体
            </summary>
        </member>
        <member name="M:Victornet.Common.ItemInTag.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Victornet.Common.ItemInTag.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Victornet.Common.ItemInTag.TagName">
            <summary>
            标签名称
            </summary>
        </member>
        <member name="P:Victornet.Common.ItemInTag.TagInOwnerId">
            <summary>
            标签与拥有者关联Id
            </summary>
        </member>
        <member name="P:Victornet.Common.ItemInTag.ItemId">
             <summary>
            内容项Id
             </summary>
        </member>
        <member name="P:Victornet.Common.ItemInTag.TenantTypeId">
            <summary>
            租户类型Id
            </summary>
        </member>
        <member name="T:Victornet.Common.RelatedTag">
            <summary>
            相关标签实体
            </summary>
        </member>
        <member name="M:Victornet.Common.RelatedTag.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Victornet.Common.RelatedTag.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Victornet.Common.RelatedTag.TagId">
             <summary>
            标签Id
             </summary>
        </member>
        <member name="P:Victornet.Common.RelatedTag.RelatedTagId">
             <summary>
            相关标签Id
             </summary>
        </member>
        <member name="T:Victornet.Common.Tag">
            <summary>
            标签实体类
            </summary>
        </member>
        <member name="M:Victornet.Common.Tag.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Victornet.Common.Tag.TagId">
             <summary>
            标签Id
             </summary>
        </member>
        <member name="P:Victornet.Common.Tag.TenantTypeId">
             <summary>
            租户类型Id
             </summary>
        </member>
        <member name="P:Victornet.Common.Tag.TagName">
             <summary>
            标签名称
             </summary>
        </member>
        <member name="P:Victornet.Common.Tag.DisplayName">
            <summary>
            标签显示名
            </summary>
        </member>
        <member name="P:Victornet.Common.Tag.Description">
             <summary>
            描述
             </summary>
        </member>
        <member name="P:Victornet.Common.Tag.FeaturedImage">
             <summary>
            标签标题图
             </summary>
        </member>
        <member name="P:Victornet.Common.Tag.IsFeatured">
             <summary>
            是否为特色标签
             </summary>
        </member>
        <member name="P:Victornet.Common.Tag.ItemCount">
            <summary>
            内容项数目
            </summary>
        </member>
        <member name="P:Victornet.Common.Tag.OwnerCount">
            <summary>
            标签使用数
            </summary>
        </member>
        <member name="P:Victornet.Common.Tag.AuditStatus">
             <summary>
            审核状态
             </summary>
        </member>
        <member name="P:Victornet.Common.Tag.DateCreated">
             <summary>
            创建日期
             </summary>
        </member>
        <member name="P:Victornet.Common.Tag.RelatedObjectIds">
            <summary>
            相关对象Id
            </summary>
        </member>
        <member name="P:Victornet.Common.Tag.OwnerId">
            <summary>
            拥有者Id
            </summary>
        </member>
        <member name="P:Victornet.Common.Tag.PreDayItemCount">
            <summary>
            24小时内的讨论次数
            </summary>
        </member>
        <member name="P:Victornet.Common.Tag.PreWeekItemCount">
            <summary>
            最近7天的讨论次数
            </summary>
        </member>
        <member name="P:Victornet.Common.Tag.GroupName">
            <summary>
            分组名
            </summary>
        </member>
        <member name="T:Victornet.Common.SortBy_Tag">
            <summary>
            标签排序字段
            </summary>
        </member>
        <member name="F:Victornet.Common.SortBy_Tag.OwnerCountDesc">
            <summary>
            使用数
            </summary>
        </member>
        <member name="F:Victornet.Common.SortBy_Tag.ItemCountDesc">
            <summary>
            内容数
            </summary>
        </member>
        <member name="F:Victornet.Common.SortBy_Tag.PreDayItemCountDesc">
            <summary>
            每日内容数
            </summary>
        </member>
        <member name="F:Victornet.Common.SortBy_Tag.PreWeekItemCountDesc">
            <summary>
            每周内容数
            </summary>
        </member>
        <member name="F:Victornet.Common.SortBy_Tag.DateCreated">
            <summary>
            发布日期
            </summary>
        </member>
        <member name="F:Victornet.Common.SortBy_Tag.DateCreatedDesc">
            <summary>
            发布日期倒序
            </summary>
        </member>
        <member name="T:Victornet.Common.TagEventArgs">
            <summary>
            标签自定义事件
            </summary>
        </member>
        <member name="M:Victornet.Common.TagEventArgs.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="eventOperationType">时间操作类型</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Victornet.Common.TagEventArgs.#ctor(System.String,System.String,System.Int64)">
            <summary>
            构造函数
            </summary>
            <param name="eventOperationType">时间操作类型</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="itemId">标签成员Id</param>
        </member>
        <member name="M:Victornet.Common.TagEventArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="eventOperationType">时间操作类型</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="tagName">标签名</param>
        </member>
        <member name="P:Victornet.Common.TagEventArgs.TenantTypeId">
            <summary>
            租户类型Id
            </summary>
        </member>
        <member name="P:Victornet.Common.TagEventArgs.ItemId">
            <summary>
            标签成员Id
            </summary>
        </member>
        <member name="P:Victornet.Common.TagEventArgs.TagName">
            <summary>
            标签名
            </summary>
        </member>
        <member name="T:Victornet.Common.TagGroup">
            <summary>
            标签实体类
            </summary>
        </member>
        <member name="M:Victornet.Common.TagGroup.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Victornet.Common.TagGroup.GroupId">
            <summary>
            分组Id
            </summary>
        </member>
        <member name="P:Victornet.Common.TagGroup.TenantTypeId">
            <summary>
            租户类型Id
            </summary>
        </member>
        <member name="P:Victornet.Common.TagGroup.GroupName">
            <summary>
            标签分组名
            </summary>
        </member>
        <member name="T:Victornet.Common.TagInGroup">
            <summary>
            标签实体类
            </summary>
        </member>
        <member name="M:Victornet.Common.TagInGroup.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Victornet.Common.TagInGroup.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Victornet.Common.TagInGroup.GroupId">
            <summary>
            分组Id
            </summary>
        </member>
        <member name="P:Victornet.Common.TagInGroup.TagName">
            <summary>
            标签名称
            </summary>
        </member>
        <member name="T:Victornet.Common.TagInOwner">
            <summary>
            标签与内容的关联项实体
            </summary>
        </member>
        <member name="M:Victornet.Common.TagInOwner.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Victornet.Common.TagInOwner.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Victornet.Common.TagInOwner.TagName">
            <summary>
            标签名称
            </summary>
        </member>
        <member name="P:Victornet.Common.TagInOwner.TenantTypeId">
             <summary>
            租户类型Id
             </summary>
        </member>
        <member name="P:Victornet.Common.TagInOwner.OwnerId">
             <summary>
            拥有者Id
             </summary>
        </member>
        <member name="P:Victornet.Common.TagInOwner.ItemCount">
             <summary>
            内容项数目
             </summary>
        </member>
        <member name="T:Victornet.Common.TagQuery">
            <summary>
            封装后台管理用户时用于查询用户的条件
            </summary>
        </member>
        <member name="P:Victornet.Common.TagQuery.PubliclyAuditStatus">
            <summary>
            审核状态
            </summary>
        </member>
        <member name="P:Victornet.Common.TagQuery.TenantTypeId">
             <summary>
            租户类型Id
             </summary>
        </member>
        <member name="P:Victornet.Common.TagQuery.Keyword">
            <summary>
            关键字
            </summary>
        </member>
        <member name="P:Victornet.Common.TagQuery.IsFeatured">
             <summary>
            是否为特色标签
             </summary>
        </member>
        <member name="T:Victornet.Common.TagService">
            <summary>
            标签业务逻辑类
            </summary>
        </member>
        <member name="M:Victornet.Common.TagService.#ctor(System.String)">
            <summary>
            构造器
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="T:Victornet.Common.TagService`1">
            <summary>
            标签业务逻辑类
            </summary>
        </member>
        <member name="M:Victornet.Common.TagService`1.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Victornet.Common.TagService`1.#ctor(System.String,Victornet.Common.Repositories.ITagRepository{`0},Victornet.Common.Repositories.IItemInTagRepository,Victornet.Common.Repositories.ITagInOwnerRepository,Victornet.Common.Repositories.IRelatedTagRepository,Victornet.Common.Repositories.ITagInGroupRepository,Victornet.Common.Repositories.ITagGroupRepository)">
            <summary>
            可设置repository的构造函数
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="tagRepository">标签Repository</param>
            <param name="itemInTagRepository">内容与标签关系Repository</param>
            <param name="tagInOwnerReposiory">标签与拥有者关系Repository</param>
            <param name="tagGroupRepository">标签分组Repository</param>
            <param name="tagInGroupRepository">标签与分组关系Repository</param>
            <param name="relatedTagRepository"></param>
        </member>
        <member name="F:Victornet.Common.TagService`1.SplitCharacters">
            <summary>
            用于标签分割的字符数组
            </summary>
            <remarks>
            可以在添加标签时用户SplitCharacters中的字符做分割一次录入多个标签
            </remarks>
        </member>
        <member name="F:Victornet.Common.TagService`1.URLSpecialCharacters">
            <summary>
            Url特殊字符
            </summary>
        </member>
        <member name="F:Victornet.Common.TagService`1.siteTagLevelPartitions">
            <summary>
            标签云系数
            </summary>
        </member>
        <member name="M:Victornet.Common.TagService`1.Create(`0,System.IO.Stream)">
            <summary>
            创建标签
            </summary>
            <param name="tag">待创建的标签</param>
            <param name="logoStream">标题图文件流</param>
            <returns>创建成功返回true，否则返回false</returns>
        </member>
        <member name="M:Victornet.Common.TagService`1.Update(`0,System.IO.Stream)">
            <summary>
            更新标签
            </summary>
            <param name="tag">待创建的标签</param>
            <param name="logoStream">标题图文件流</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.TagService`1.Delete(System.Int64)">
            <summary>
            删除标签
            </summary>
            <param name="tagId">标签Id</param>
            <returns>删除成功返回true，否则返回false</returns>
        </member>
        <member name="M:Victornet.Common.TagService`1.UpdateAuditStatus(System.Collections.Generic.IEnumerable{System.Int64},System.Boolean)">
            <summary>
            批量更新审核状态
            </summary>
            <param name="ids">评论Id列表</param>
            <param name="isApproved">审核状态</param>
        </member>
        <member name="M:Victornet.Common.TagService`1.Get(System.Int64)">
            <summary>
            获取Tag
            </summary>
            <param name="tagId">标签Id</param>
        </member>
        <member name="M:Victornet.Common.TagService`1.Get(System.String)">
            <summary>
            获取标签实体
            </summary>
            <param name="tagName">标签名</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.TagService`1.GetTopTags(System.Int32,System.Nullable{Victornet.Common.SortBy_Tag})">
             <summary>
             获取前N个标签
             </summary>
            <param name="topNumber">前N条数据</param>
            <param name="sortBy">标签排序字段</param>
             <returns>{Key:标签实体,Value:标签级别}</returns>
        </member>
        <member name="M:Victornet.Common.TagService`1.GetTopTags(System.Int32,System.Nullable{System.Boolean},System.Nullable{Victornet.Common.SortBy_Tag})">
             <summary>
             获取前N个标签
             </summary>
            <param name="topNumber">获取数据的条数</param>
            <param name="isFeatured">是否为特色标签</param>
            <param name="sortBy">标签排序字段</param>
        </member>
        <member name="M:Victornet.Common.TagService`1.GetOwnerTopTags(System.Int32,System.Int64)">
             <summary>
             获取用户的前N个标签
             </summary>
            <param name="topNumber">前N条数据</param>
            <param name="ownerId">拥有者Id</param>
             <returns>{Key:标签实体,Value:标签级别}</returns>
        </member>
        <member name="M:Victornet.Common.TagService`1.GetTopTagNames(System.String,System.Int32)">
             <summary>
             获取前N个标签名
             </summary>
             <remarks>用于智能提示</remarks>
            <param name="keyword">标签名称关键字</param>
            <param name="topNumber">前N条数据</param>
        </member>
        <member name="M:Victornet.Common.TagService`1.GetTopTagNames(System.Int32,System.String,System.Int32)">
             <summary>
             获取前N个标签名
             </summary>
             <remarks>用于智能提示</remarks>
            <param name="ownerId">拥有者Id</param>
            <param name="keyword">标签名称关键字</param>
            <param name="topNumber">前N条数据</param>
        </member>
        <member name="M:Victornet.Common.TagService`1.GetTags(Victornet.Common.TagQuery,System.Int32,System.Int32)">
             <summary>
            分页检索标签
             </summary>
            <param name="query">查询条件</param>
             <param name="pageIndex">当前页码</param>
             <param name="pageSize">每页记录数</param>
             <returns></returns>
        </member>
        <member name="M:Victornet.Common.TagService`1.GetTags(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            根据标签Id列表组装标签实体
            </summary>
            <param name="tagIds">标签Id集合</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.TagService`1.GetTagsByTagInOwnerIds(System.Collections.Generic.IEnumerable{System.Int64})">
             <summary>
             根据Id集合获取标签
             </summary>
            <param name="tagInOwnerIds">前N条数据</param>
             <returns>{Key:标签实体,Value:标签级别}</returns>
        </member>
        <member name="M:Victornet.Common.TagService`1.GetTagInOwners(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            根据标签Id列表组装标签实体
            </summary>
            <param name="tagIds">标签Id集合</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.TagService`1.GetTagsOfGroup(System.Int64,System.String,System.Int32)">
             <summary>
            分页检索标签
             </summary>
            <param name="groupId">标签分组Id</param>
            <param name="tenantTypeId">租户类型Id</param>
             <param name="pageIndex">当前页码</param>
             <param name="pageSize">每页记录数</param>
             <returns></returns>
        </member>
        <member name="M:Victornet.Common.TagService`1.AddTagInOwner(System.String,System.String,System.Int64)">
            <summary>
            添加标签与拥有者关联
            </summary>
            <param name="tagName">标签名</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
            <returns>返回主键</returns>
        </member>
        <member name="M:Victornet.Common.TagService`1.DeleteOwnerTag(System.Int64)">
            <summary>
            删除拥有者标签
            </summary>
            <param name="tagInOwnerId">标签与拥有者关系Id</param>
        </member>
        <member name="M:Victornet.Common.TagService`1.ClearTagsFromOwner(System.Int64)">
            <summary>
            清除拥有者的所有标签
            </summary>
            <param name="ownerId">拥有者Id</param>
        </member>
        <member name="M:Victornet.Common.TagService`1.GetOwnerTags(System.Int64)">
            <summary>
            获取拥有者的标签列表
            </summary>
            <param name="ownerId">拥有者Id</param>
        </member>
        <member name="M:Victornet.Common.TagService`1.GetOwnerTags(System.Int32,System.Int32)">
            <summary>
            分页获取tn_TagsInOwners表的数据(用于建索引)
            </summary>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.TagService`1.GetTopOwnerTags(System.Int64,System.String,System.Int32)">
            <summary>
            获取拥有者的前N个标签
            </summary>
            <param name="ownerId">拥有者Id</param>
            <param name="keyword">标签关键字</param>
            <param name="topNumber">前N个标签</param>
        </member>
        <member name="M:Victornet.Common.TagService`1.GetTopOwnerTags(System.Int64,System.Int32,System.String)">
            <summary>
            获取拥有者的前N个标签（用户构件标签云）
            </summary>
            <param name="ownerId">标签拥有者Id</param>
            <param name="topNumber">获取标签数</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.TagService`1.AddItemsToTag(System.Collections.Generic.IEnumerable{System.Int64},System.Int64,System.String)">
            <summary>
            为多个内容项添加相同标签
            </summary>
            <param name="itemIds">内容项Id</param>
            <param name="ownerId">拥有者Id</param>
            <param name="tagName">标签名</param>
        </member>
        <member name="M:Victornet.Common.TagService`1.AddTagToItem(System.String,System.Int64,System.Int64)">
            <summary>
            为内容项批量设置标签
            </summary>
            <param name="tagName">标签名称</param>
            <param name="ownerId">拥有者Id</param>
            <param name="itemId">内容项Id</param>
        </member>
        <member name="M:Victornet.Common.TagService`1.AddTagsToItem(System.String,System.Int64,System.Int64)">
            <summary>
            为内容项批量设置标签
            </summary>
            <remarks>标签中如果要包含空格需要用""引起来</remarks>
            <param name="tagString">待处理的标签字符串</param>
            <param name="ownerId">拥有者Id</param>
            <param name="itemId">内容项Id</param>
        </member>
        <member name="M:Victornet.Common.TagService`1.AddTagsToItem(System.String[],System.Int64,System.Int64)">
            <summary>
            为内容项批量设置标签
            </summary>
            <remarks>标签中如果要包含空格需要用""引起来</remarks>
            <param name="tagNames">待添加的标签集合</param>
            <param name="ownerId">拥有者Id</param>
            <param name="itemId">内容项Id</param>
        </member>
        <member name="M:Victornet.Common.TagService`1.DeleteTagFromItem(System.Int64)">
            <summary>
            删除标签与内容项的关联
            </summary>
            <param name="itemInTagId">内容项与标签关联Id</param>
        </member>
        <member name="M:Victornet.Common.TagService`1.ClearTagsFromItem(System.Int64,System.Int64)">
            <summary>
            清除内容项的所有标签
            </summary>
            <param name="itemId">内容项Id</param>
            <param name="ownerId">拥有者Id</param>
        </member>
        <member name="M:Victornet.Common.TagService`1.GetItemIds(System.String,System.Nullable{System.Int64})">
            <summary>
            获取标签的所有内容项集合
            </summary>
            <param name="tagName">标签名称</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">拥有者Id</param>
            <returns>返回指定的内容项Id集合</returns>
        </member>
        <member name="M:Victornet.Common.TagService`1.GetItemIds(System.String,System.Nullable{System.Int64},System.Int32,System.Int32)">
            <summary>
            获取标签的内容项集合
            </summary>
            <param name="tagName">标签名称</param>
            <param name="ownerId">拥有者Id</param>
            <param name="pageSize">每页记录数</param>
            <param name="pageIndex">当前页码(从1开始)</param>
            <returns>返回指定页码的内容项Id集合</returns>
        </member>
        <member name="M:Victornet.Common.TagService`1.GetItemIds(System.Collections.Generic.IEnumerable{System.String},System.Nullable{System.Int64},System.Int32,System.Int32)">
            <summary>
            获取多个标签的内容项集合
            </summary>
            <param name="tagNames">标签名称列表</param>
            <param name="ownerId">拥有者Id</param>
            <param name="pageSize">每页记录数</param>
            <param name="pageIndex">当前页码(从1开始)</param>
            <returns>返回指定页码的内容项Id集合</returns>
        </member>
        <member name="M:Victornet.Common.TagService`1.GetItemInTagsOfItem(System.Int64)">
            <summary>
            获取内容项的所有标签
            </summary>
            <param name="itemId">内容项Id</param>
            <returns>返回内容项的标签集合</returns>
        </member>
        <member name="M:Victornet.Common.TagService`1.GetTopTagsOfItem(System.Int64,System.Int32)">
            <summary>
            获取内容项的前N个标签标签
            </summary>
            <param name="itemId">内容项Id</param>
            <param name="topNumber">前N条记录</param>
            <returns>返回内容项的标签集合</returns>
        </member>
        <member name="M:Victornet.Common.TagService`1.GetOwnerTagsOfItem(System.Int64,System.Int64)">
            <summary>
            根据内容项获取拥有者设置的标签
            </summary>
            <param name="itemId">内容项Id</param>
            <param name="ownerId">拥有者Id</param>
        </member>
        <member name="M:Victornet.Common.TagService`1.GetItemInTagIdsByItemIds(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            根据用户ID列表获取ItemInTag的ID列表，本方法现用于用户搜索功能的索引生成
            </summary>
            <param name="userIds">用户ID列表</param>
            <returns>ItemInTag的ID列表</returns>
        </member>
        <member name="M:Victornet.Common.TagService`1.GetItemInTags(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            根据Id列表获取ItemInTag的实体列表
            </summary>
            <param name="entityIds">ItemInTag的Id列表</param>
            <returns>ItemInTag的实体列表</returns>
        </member>
        <member name="M:Victornet.Common.TagService`1.GetTagNamesWithIdsOfItem(System.Int64,System.Nullable{System.Int64})">
            <summary>
            根据Id获取
            </summary>
            <param name="itemId">成员Id</param>
            <param name="tagInOwnerId">标签与拥有者关联Id</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.TagService`1.AddRelatedTagsToTag(System.String,System.Int32,System.Int64)">
            <summary>
            添加相关标签
            </summary>
            <param name="tagString">待处理的标签字符串</param>
            <param name="ownerId">拥有者Id</param>
            <param name="tagId">标签Id</param>
        </member>
        <member name="M:Victornet.Common.TagService`1.ClearRelatedTagsFromTag(System.Int64)">
            <summary>
            清除拥有者的所有标签
            </summary>
            <param name="tagId">被关联的标签Id</param>
        </member>
        <member name="M:Victornet.Common.TagService`1.DeleteRelatedTagFromTag(System.Int64,System.Int64)">
            <summary>
            清除关联的标签
            </summary>
            <remarks>会删除双向的关联关系</remarks>
            <param name="relatedTagId">关联的标签Id</param>
            <param name="tagId">被关联的标签Id</param>
        </member>
        <member name="M:Victornet.Common.TagService`1.GetRelatedTags(System.Int64)">
            <summary>
            获取相关标签
            </summary>
            <param name="tagId">被关联的标签Id</param>
        </member>
        <member name="M:Victornet.Common.TagService`1.CreateGroup(Victornet.Common.TagGroup)">
            <summary>
            创建标签分组
            </summary>
            <param name="group">待创建分组实体</param>
        </member>
        <member name="M:Victornet.Common.TagService`1.UpdateGroup(Victornet.Common.TagGroup)">
            <summary>
            更新标签分组
            </summary>
            <param name="group">待更新分组实体</param>
        </member>
        <member name="M:Victornet.Common.TagService`1.DeleteGroup(Victornet.Common.TagGroup)">
            <summary>
            更新标签分组
            </summary>
            <param name="group">待更新分组实体</param>
        </member>
        <member name="M:Victornet.Common.TagService`1.GetGroups(System.String)">
            <summary>
            获取所有标签分组管理员后台用
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Victornet.Common.TagService`1.GetGroup(System.Int64)">
            <summary>
            获取标签分组实体
            </summary>
            <param name="groupId">分组Id</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.TagService`1.AddTagInGroup(System.String,System.Int64)">
            <summary>
            添加标签与分组关联
            </summary>
            <param name="tagName">标签名</param>
            <param name="groupId">拥有者Id</param>
        </member>
        <member name="M:Victornet.Common.TagService`1.BatchAddTagsInGroup(System.Collections.Generic.IEnumerable{System.String},System.Int64)">
            <summary>
            批量添加标签与分组关联
            </summary>
            <param name="tagNames">标签名</param>
            <param name="groupId">拥有者Id</param>
        </member>
        <member name="M:Victornet.Common.TagService`1.BatchAddGroupsToTag(System.Collections.Generic.IEnumerable{System.Int64},System.String)">
            <summary>
            批量添加分组给标签
            </summary>
            <param name="groupIds">分组Id集合</param>
            <param name="tagName">标签名</param>
        </member>
        <member name="M:Victornet.Common.TagService`1.ClearTagsFromGroup(System.Int64)">
            <summary>
            清除分组的所有标签
            </summary>
            <param name="groupId">分组Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Victornet.Common.TagService`1.GetTagsOfGroup(System.Int64)">
            <summary>
            获取分组下的标签
            </summary>
            <param name="groupId">分组Id</param>
        </member>
        <member name="M:Victornet.Common.TagService`1.GetTopTagsOfGroup(System.Int64,System.Int32)">
            <summary>
            获取分组下的前N个标签
            </summary>
            <param name="groupId">分组Id</param>
            <param name="topNumber">获取记录数</param>
        </member>
        <member name="M:Victornet.Common.TagService`1.GetGroupsOfTag(System.String,System.String)">
            <summary>
            根据标签获取标签分组
            </summary>
            <param name="tagName">标签名</param>
            <param name="tenantTypeId">租户类型Id</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.TagService`1.ResolveBodyForEdit(System.String,System.Int64,System.Int64,System.String)">
            <summary>
            解析内容用于创建话题
            </summary>
            <param name="body">待解析的内容</param>
            <param name="ownerId">标签拥有者Id</param>
            <param name="associateId">关联项Id</param>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Victornet.Common.TagService`1.ResolveBodyForDetail(System.String,System.Int64,System.Int64,System.Func{System.Collections.Generic.KeyValuePair{System.String,System.Int64},System.Int64,System.String})">
            <summary>
            解析内容中的AtUser用户展示展示
            </summary>
            <param name="body">待解析的内容</param>
            <param name="associateId">关联项Id</param>
            <param name="ownerId">标签拥有者Id</param>
            <param name="TagGenerate">用户生成对应标签的方法</param>
        </member>
        <member name="M:Victornet.Common.TagService`1.SplitTagString(System.String)">
            <summary>
            分割tagString的到标签名集合
            </summary>
            <remarks>保留引号中标签名的空格</remarks>
            <param name="tagString">标签名字符串</param>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.TagSettings">
            <summary>
            站点Tag设置
            </summary>
        </member>
        <member name="P:Victornet.Common.TagSettings.MaxTagsCount">
            <summary>
            最大标签数
            </summary>
        </member>
        <member name="T:Victornet.Common.CountEntity">
            <summary>
            计数实体
            </summary>
        </member>
        <member name="M:Victornet.Common.CountEntity.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Victornet.Common.CountEntity.CountId">
             <summary>
            id
             </summary>
        </member>
        <member name="P:Victornet.Common.CountEntity.OwnerId">
             <summary>
            拥有者id
             </summary>
        </member>
        <member name="P:Victornet.Common.CountEntity.ObjectId">
             <summary>
            计数对象id
             </summary>
        </member>
        <member name="P:Victornet.Common.CountEntity.CountType">
             <summary>
            计数类型
             </summary>
        </member>
        <member name="P:Victornet.Common.CountEntity.StatisticsCount">
             <summary>
            计数
             </summary>
        </member>
        <member name="T:Victornet.Common.CountPerDayEntity">
            <summary>
            每日计数实体
            </summary>
        </member>
        <member name="M:Victornet.Common.CountPerDayEntity.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Victornet.Common.CountPerDayEntity.Id">
             <summary>
            id
             </summary>
        </member>
        <member name="P:Victornet.Common.CountPerDayEntity.OwnerId">
             <summary>
            拥有者id
             </summary>
        </member>
        <member name="P:Victornet.Common.CountPerDayEntity.ObjectId">
             <summary>
            计数对象id
             </summary>
        </member>
        <member name="P:Victornet.Common.CountPerDayEntity.ReferenceYear">
             <summary>
            统计日期的年份
             </summary>
        </member>
        <member name="P:Victornet.Common.CountPerDayEntity.ReferenceMonth">
             <summary>
            统计日期的月份
             </summary>
        </member>
        <member name="P:Victornet.Common.CountPerDayEntity.ReferenceDay">
             <summary>
            统计日期的天
             </summary>
        </member>
        <member name="P:Victornet.Common.CountPerDayEntity.StatisticsCount">
             <summary>
            当天计数
             </summary>
        </member>
        <member name="P:Victornet.Common.CountPerDayEntity.CountType">
             <summary>
            计数类型
             </summary>
        </member>
        <member name="P:Victornet.Common.CountPerDayEntity.ReferenceDate">
            <summary>
            统计日期
            </summary>
        </member>
        <member name="T:Victornet.Common.CountQueueItem">
            <summary>
            计数队列项
            </summary>
        </member>
        <member name="M:Victornet.Common.CountQueueItem.#ctor(System.String,System.Int64,System.Int64,System.Int32)">
            <summary>
            构造器
            </summary>
            <param name="countType">计数类型</param>
            <param name="objectId">计数对象Id</param>
            <param name="ownerId">拥有者</param>
            <param name="statisticsCount">当天计数</param>
        </member>
        <member name="P:Victornet.Common.CountQueueItem.ObjectId">
            <summary>
            计数对象Id
            </summary>
        </member>
        <member name="P:Victornet.Common.CountQueueItem.CountType">
            <summary>
            计数类型
            </summary>
        </member>
        <member name="P:Victornet.Common.CountQueueItem.OwnerId">
            <summary>
            拥有者Id
            </summary>
        </member>
        <member name="P:Victornet.Common.CountQueueItem.StatisticsCount">
            <summary>
            计数
            </summary>
        </member>
        <member name="M:Victornet.Common.CountQueueItem.AsCountEntity">
            <summary>
            转为计数实体
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.CountQueueItem.AsCountPerDayEntity">
            <summary>
            转为每日计数实体
            </summary>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.CountService">
            <summary>
            附件业务逻辑类
            </summary>
        </member>
        <member name="M:Victornet.Common.CountService.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Victornet.Common.CountService.#ctor(Victornet.Common.ICountRepository,System.String)">
            <summary>
            可设置repository的构造函数（主要用于测试用例）
            </summary>
        </member>
        <member name="M:Victornet.Common.CountService.RegisterCounts">
            <summary>
            注册计数
            </summary>
        </member>
        <member name="M:Victornet.Common.CountService.RegisterCountPerDay">
            <summary>
            注册每日计数
            </summary>
        </member>
        <member name="M:Victornet.Common.CountService.RegisterStageCount(System.String,System.Int32[])">
            <summary>
            注册阶段计数
            </summary>
            <param name="countType">基础阶段计数</param>
            <param name="stageDays">阶段计数统计天数集合</param>
        </member>
        <member name="M:Victornet.Common.CountService.ChangeCount(System.String,System.Int64,System.Int64,System.Int32,System.Boolean)">
            <summary>
            更新计数
            </summary>
            <param name="countType">计数类型（不允许是阶段计数类型）</param>
            <param name="objectId">计数对象Id</param>
            <param name="ownerId">拥有者Id</param>
            <param name="changeCount">变化数</param>
            <param name="isRealTime">是否立即更新显示计数</param>
            <remarks>若同时使用了每日计数，则会同时更新每日计数，以及该计数类型相关的阶段计数</remarks>
        </member>
        <member name="M:Victornet.Common.CountService.Delete(System.Int64)">
            <summary>
            删除计数
            </summary>
            <param name="objectId">计数对象Id</param>
            <returns>删除成功返回true，否则返回false</returns>
        </member>
        <member name="M:Victornet.Common.CountService.Get(System.String,System.Int64)">
            <summary>
            获取计数
            </summary>
            <param name="countType">计数类型</param>
            <param name="objectId">计数对象Id</param>
        </member>
        <member name="M:Victornet.Common.CountService.Gets(System.String,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            获取计数集合
            </summary>
            <param name="countType">计数类型</param>
            <param name="objectIds">计数对象Id集合</param>
        </member>
        <member name="M:Victornet.Common.CountService.GetStageCount(System.String,System.Int32,System.Int64)">
            <summary>
            获取阶段计数
            </summary>
            <param name="countType">计数类型</param>
            <param name="dayCount">阶段计数统计天数，一定要和注册时的天数进行对应才能正常获取到</param>
            <param name="objectId">计数对象Id</param>
        </member>
        <member name="M:Victornet.Common.CountService.GetAllCountPerDays(System.String)">
            <summary>
            获取计数对象Id的所有每天计数记录
            </summary>
            <param name="countType">计数类型</param>
            <returns>每天计数记录集合</returns>
        </member>
        <member name="M:Victornet.Common.CountService.GetTops(System.Int32,System.String,System.Nullable{System.Int32},System.Nullable{System.Int64})">
            <summary>
            获取计数对象Id排行集合
            </summary>
            <param name="topNumber"></param>
            <param name="countType">计数类型</param>
            <param name="dayCount">阶段计数类型的天数（非阶段计数类型请输入null）</param>
            <param name="ownerId">拥有者Id</param>
            <returns>计数对象Id集合</returns>
        </member>
        <member name="M:Victornet.Common.CountService.Gets(System.String,System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int32})">
            <summary>
            获取计数对象Id排行分页集合
            </summary>
            <param name="countType">计数类型</param>
            <param name="dayCount">阶段计数类型的天数（非阶段计数类型请输入null）</param>
            <param name="ownerId">拥有者Id</param>
            <param name="pageIndex">页码</param>
        </member>
        <member name="M:Victornet.Common.CountService.GetTableName_Counts">
            <summary>
            获取计数表名
            </summary>
            <returns>计数表名</returns>
        </member>
        <member name="M:Victornet.Common.CountService.GetTableName_CountsPerDay">
            <summary>
            获取每日计数表名
            </summary>
            <returns>每日计数表名</returns>
        </member>
        <member name="M:Victornet.Common.CountService.GetStageCountType(System.String,System.Int32)">
            <summary>
            获取阶段计数类型
            </summary>
            <param name="countType">计数类型</param>
            <param name="dayCount">阶段计数统计天数，一定要和注册时的天数进行对应才能正常获取到</param>
        </member>
        <member name="T:Victornet.Common.CountTypes">
            <summary>
            计数类型
            </summary>
        </member>
        <member name="M:Victornet.Common.CountTypes.Instance">
            <summary>
            获取单例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.CountTypes.HitTimes">
            <summary>
            浏览计数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.CountTypes.DownloadCount">
            <summary>
            下载计数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.CountTypes.CommentCount">
            <summary>
            评论数
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.CountTypes.ReputationPointsCounts">
            <summary>
            威望数
            </summary>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.CountRepository">
            <summary>
            Count仓储
            </summary>
        </member>
        <member name="M:Victornet.Common.CountRepository.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:Victornet.Common.CountRepository.#ctor(System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Collections.Generic.Queue{Victornet.Common.CountQueueItem}},System.Collections.Concurrent.ConcurrentDictionary{System.String,System.Collections.Generic.Queue{Victornet.Common.CountQueueItem}})">
            <summary>
            无参构造器
            </summary>
            <remarks>仅用于单元测试</remarks>
        </member>
        <member name="M:Victornet.Common.CountRepository.CreateDAO">
            <summary>
            默认Database实例
            </summary>
        </member>
        <member name="M:Victornet.Common.CountRepository.CheckCountTable(System.String)">
            <summary>
            注册计数
            </summary>
        </member>
        <member name="M:Victornet.Common.CountRepository.CheckCountPerDayTable(System.String)">
            <summary>
            注册每日计数
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Victornet.Common.CountRepository.ChangeCount(System.String,System.String,System.Int64,System.Int64,System.Int32,System.Collections.Generic.IList{System.String},System.Boolean)">
            <summary>
            调整计数
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="countType">计数类型</param>
            <param name="objectId">计数对象Id</param>
            <param name="ownerId">ownerId</param>
            <param name="changeCount">变化数</param>
            <param name="stageCountTypes">阶段计数集合</param>
            <param name="isRealTime">是否立即更新显示计数</param>
        </member>
        <member name="M:Victornet.Common.CountRepository.ExecQueue">
            <summary>
            执行队列
            </summary>
        </member>
        <member name="M:Victornet.Common.CountRepository.UpdateStageCountPerDay(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            批量更新计数表中的阶段计数
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="countType">计数类型</param>
            <param name="countType2Days"> 计数类型 -统计天数字典集合</param>
        </member>
        <member name="M:Victornet.Common.CountRepository.DeleteTrashCountPerDays(System.String,System.String,System.Int32)">
            <summary>
            删除每日计数表中的过期的历史计数记录
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="countType">计数类型</param>
            <param name="maxValue">保留记录的最大天数</param>
        </member>
        <member name="M:Victornet.Common.CountRepository.DeleteTrashCount">
            <summary>
            删除垃圾数据
            </summary>
        </member>
        <member name="M:Victornet.Common.CountRepository.Get(System.String,System.String,System.Int64)">
            <summary>
            获取计数
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="countType">计数类型</param>
            <param name="objectId">计数对象Id</param>
        </member>
        <member name="M:Victornet.Common.CountRepository.Gets(System.String,System.String,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            获取计数集合
            </summary>
            <param name="countType">计数类型</param>
            <param name="objectIds">计数对象Id集合</param>
        </member>
        <member name="M:Victornet.Common.CountRepository.Delete(System.String,System.Int64)">
            <summary>
            删除计数
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="objectId">计数对象Id</param>
            <returns>删除成功返回true，否则返回false</returns>
        </member>
        <member name="M:Victornet.Common.CountRepository.GetAllCountPerDays(System.String,System.String)">
            <summary>
            获取计数对象Id的所有每天计数记录
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="countType">计数类型</param>
            <returns>每天计数记录集合</returns>
        </member>
        <member name="M:Victornet.Common.CountRepository.GetTops(System.Int32,System.String,System.String,System.Nullable{System.Int64})">
            <summary>
            获取计数对象Id集合
            </summary>
            <remarks>
            一次性取出前SecondaryMaxRecords条记录
            </remarks>
            <param name="topNumber">准备获取的条数</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="countType">计数类型</param>
            <param name="ownerId">拥有者Id</param>
            <returns>计数对象Id集合</returns>
        </member>
        <member name="M:Victornet.Common.CountRepository.Gets(System.String,System.String,System.Nullable{System.Int64},System.Int32)">
            <summary>
            获取计数
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="countType">计数类型</param>
            <param name="ownerId">拥有者Id</param>
            <param name="pageIndex">页码数</param>
        </member>
        <member name="M:Victornet.Common.CountRepository.GetTableName_Counts(System.String)">
            <summary>
            获取计数表名
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <returns>计数表名</returns>
        </member>
        <member name="M:Victornet.Common.CountRepository.GetTableName_CountsPerDay(System.String)">
            <summary>
            获取每日计数表名
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <returns>每日计数表名</returns>
        </member>
        <member name="M:Victornet.Common.CountRepository.GetsSql(System.String,System.String,System.Nullable{System.Int64})">
            <summary>
            获取计数
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="countType">计数类型</param>
            <param name="ownerId">拥有者Id</param>
        </member>
        <member name="M:Victornet.Common.CountRepository.GetCacheKey_Counts(System.String,System.String,System.Nullable{System.Int64})">
            <summary>
            获取计数Id集合的CacheKey
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="countType">计数类型</param>
            <param name="ownerId">拥有者Id</param>
        </member>
        <member name="M:Victornet.Common.CountRepository.GetCacheKey_Count(System.String,System.String,System.Int64)">
            <summary>
            获取计数的CacheKey
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="countType">计数类型</param>
            <param name="objectId">计数类型id</param>
            <returns></returns>
        </member>
        <member name="P:Victornet.Common.CountRepository.CacheablePageCount">
            <summary>
            可缓存的列表缓存页数
            </summary>
        </member>
        <member name="P:Victornet.Common.CountRepository.PrimaryMaxRecords">
            <summary>
            主流查询最大允许返回记录数
            </summary>
        </member>
        <member name="P:Victornet.Common.CountRepository.SecondaryMaxRecords">
            <summary>
            非主流查询最大允许返回记录数
            </summary>
            <remarks>
            例如：排行数据
            </remarks>
        </member>
        <member name="T:Victornet.Common.ICountRepository">
            <summary>
            计数仓储接口
            </summary>
        </member>
        <member name="M:Victornet.Common.ICountRepository.CheckCountTable(System.String)">
            <summary>
            注册计数
            </summary>
        </member>
        <member name="M:Victornet.Common.ICountRepository.CheckCountPerDayTable(System.String)">
            <summary>
            注册每日计数
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
        </member>
        <member name="M:Victornet.Common.ICountRepository.ChangeCount(System.String,System.String,System.Int64,System.Int64,System.Int32,System.Collections.Generic.IList{System.String},System.Boolean)">
            <summary>
            调整计数
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="countType">计数类型</param>
            <param name="objectId">计数对象Id</param>
            <param name="ownerId">ownerId</param>
            <param name="changeCount">变化数</param>
            <param name="stageCountTypes">阶段计数集合</param>
            <param name="isRealTime">是否立即更新显示计数</param>
        </member>
        <member name="M:Victornet.Common.ICountRepository.ExecQueue">
            <summary>
            执行队列
            </summary>
        </member>
        <member name="M:Victornet.Common.ICountRepository.UpdateStageCountPerDay(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            批量更新计数表中的阶段计数
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="countType">计数类型</param>
            <param name="countType2Days">阶段计数类型-统计天数字典集合</param>
        </member>
        <member name="M:Victornet.Common.ICountRepository.DeleteTrashCountPerDays(System.String,System.String,System.Int32)">
            <summary>
            删除每日计数表中的过期的历史计数记录
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="countType">计数类型</param>
            <param name="maxValue">保留记录的最大天数</param>
        </member>
        <member name="M:Victornet.Common.ICountRepository.Get(System.String,System.String,System.Int64)">
            <summary>
            获取计数
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="countType">计数类型</param>
            <param name="objectId">计数对象Id</param>
        </member>
        <member name="M:Victornet.Common.ICountRepository.Delete(System.String,System.Int64)">
            <summary>
            删除计数
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="objectId">计数对象Id</param>
            <returns>删除成功返回true，否则返回false</returns>
        </member>
        <member name="M:Victornet.Common.ICountRepository.GetTops(System.Int32,System.String,System.String,System.Nullable{System.Int64})">
            <summary>
            获取计数对象Id集合
            </summary>
            <param name="topNumber">前几条</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="countType">计数类型</param>
            <param name="ownerId">拥有者Id</param>
            <returns>计数对象Id集合</returns>
        </member>
        <member name="M:Victornet.Common.ICountRepository.Gets(System.String,System.String,System.Nullable{System.Int64},System.Int32)">
            <summary>
            获取技术
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="countType">技术类型</param>
            <param name="ownerId">拥有者id</param>
            <param name="pageIndex">页码</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.ICountRepository.GetAllCountPerDays(System.String,System.String)">
            <summary>
            获取计数对象Id的所有每天计数记录
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="countType">计数类型</param>
            <returns>每天计数记录集合</returns>
        </member>
        <member name="M:Victornet.Common.ICountRepository.GetTableName_Counts(System.String)">
            <summary>
            获取计数表名
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <returns>计数表名</returns>
        </member>
        <member name="M:Victornet.Common.ICountRepository.GetTableName_CountsPerDay(System.String)">
            <summary>
            获取每日计数表名
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <returns>每日计数表名</returns>
        </member>
        <member name="M:Victornet.Common.ICountRepository.Gets(System.String,System.String,System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            获取计数集合
            </summary>
            <param name="countType">计数类型</param>
            <param name="objectIds">计数对象Id集合</param>
        </member>
        <member name="T:Victornet.Common.StageCountTypeManager">
            <summary>
            阶段计数管理类
            </summary>
        </member>
        <member name="M:Victornet.Common.StageCountTypeManager.Instance(System.String)">
            <summary>
            通过tenantTypeId获取StageCountTypeManager实例
            </summary>
            <param name="tenantTypeId">tenantTypeId</param>
        </member>
        <member name="M:Victornet.Common.StageCountTypeManager.AddStageCounts(System.String,System.Int32[])">
            <summary>
            注册阶段计数
            </summary>
            <param name="baseCountType">基础阶段计数</param>
            <param name="stageDays">阶段计数统计天数集合</param>
        </member>
        <member name="M:Victornet.Common.StageCountTypeManager.GetStageCountType(System.String,System.Int32)">
            <summary>
            解析阶段计数的countType
            </summary>
            <param name="baseCountType">基础阶段计数</param>
            <param name="dayCount">统计天数</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.StageCountTypeManager.GetStageCountTypes(System.String)">
            <summary>
            获取所有阶段计数类型
            </summary>
            <param name="baseCountType">基础阶段计数</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.StageCountTypeManager.GetAllStageCountTypes">
            <summary>
            获取所有阶段计数类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.StageCountTypeManager.GetMaxDayCount(System.String)">
            <summary>
            获取每日计数记录的最大保留天数
            </summary>
            <param name="baseCountType">基础阶段计数</param>
        </member>
        <member name="M:Victornet.Common.StageCountTypeManager.GetAllTenantTypeIds">
            <summary>
            获取所有使用阶段计数的租户类型Id集合
            </summary>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.ExecCountQueueTask">
            <summary>
            执行计数队列任务
            </summary>
        </member>
        <member name="M:Victornet.Common.ExecCountQueueTask.Execute(Victornet.Tasks.TaskDetail)">
            <summary>
            任务执行的内容
            </summary>
            <param name="taskDetail">任务配置状态信息</param>
        </member>
        <member name="T:Victornet.Common.UpdateStageCountTask">
            <summary>
            每天批量更新阶段计数任务
            </summary>
        </member>
        <member name="M:Victornet.Common.UpdateStageCountTask.Execute(Victornet.Tasks.TaskDetail)">
            <summary>
            任务执行的内容
            </summary>
            <param name="taskDetail">任务配置状态信息</param>
        </member>
        <member name="T:Victornet.Common.ApplicationDataKeysExtensions">
            <summary>
            ApplicationDataKeys扩展
            </summary>
        </member>
        <member name="M:Victornet.Common.ApplicationDataKeysExtensions.PubliclyAuditStatus(Victornet.Common.ApplicationDataKeys)">
            <summary>
            应用的哪些审核状态可以对外显示
            </summary>
            <param name="applicationDataKeys"></param>
        </member>
        <member name="T:Victornet.Common.AuditStrictDegree">
            <summary>
            审核严格程度
            </summary>
        </member>
        <member name="F:Victornet.Common.AuditStrictDegree.NotSet">
            <summary>
            未设置
            </summary>
        </member>
        <member name="F:Victornet.Common.AuditStrictDegree.None">
            <summary>
            不审核
            </summary>
        </member>
        <member name="F:Victornet.Common.AuditStrictDegree.Create">
            <summary>
            创建时审核
            </summary>
        </member>
        <member name="F:Victornet.Common.AuditStrictDegree.Update">
            <summary>
            更新时也审核
            </summary>
        </member>
        <member name="T:Victornet.Common.AuditStatus">
            <summary>
            审核状态
            </summary>
        </member>
        <member name="F:Victornet.Common.AuditStatus.Fail">
            <summary>
            未通过
            </summary>
        </member>
        <member name="F:Victornet.Common.AuditStatus.Pending">
            <summary>
            待审核
            </summary>
        </member>
        <member name="F:Victornet.Common.AuditStatus.Again">
            <summary>
            需再次审核
            </summary>
        </member>
        <member name="F:Victornet.Common.AuditStatus.Success">
            <summary>
            通过审核
            </summary>
        </member>
        <member name="T:Victornet.Common.PubliclyAuditStatus">
            <summary>
            用于显示的审核状态
            </summary>
        </member>
        <member name="F:Victornet.Common.PubliclyAuditStatus.Fail">
            <summary>
            未通过
            </summary>
        </member>
        <member name="F:Victornet.Common.PubliclyAuditStatus.Pending_GreaterThanOrEqual">
            <summary>
            待审核、需再次审核、通过审核
            </summary>
        </member>
        <member name="F:Victornet.Common.PubliclyAuditStatus.Pending">
            <summary>
            待审核
            </summary>
        </member>
        <member name="F:Victornet.Common.PubliclyAuditStatus.Again_GreaterThanOrEqual">
            <summary>
            需再次审核、通过审核
            </summary>
        </member>
        <member name="F:Victornet.Common.PubliclyAuditStatus.Again">
            <summary>
            需再次审核
            </summary>
        </member>
        <member name="F:Victornet.Common.PubliclyAuditStatus.Success">
            <summary>
            通过审核
            </summary>
        </member>
        <member name="T:Victornet.Common.AuditEventArgs">
            <summary>
            审核变化自定义事件
            </summary>
        </member>
        <member name="M:Victornet.Common.AuditEventArgs.#ctor(System.Nullable{Victornet.Common.AuditStatus},System.Nullable{Victornet.Common.AuditStatus})">
            <summary>
            构造函数
            </summary>
            <param name="oldAuditStatus">变化前的审核状态</param>
            <param name="newAuditStatus">变化后的审核状态</param>
        </member>
        <member name="P:Victornet.Common.AuditEventArgs.OldAuditStatus">
            <summary>
            旧审核状态
            </summary>
        </member>
        <member name="P:Victornet.Common.AuditEventArgs.NewAuditStatus">
            <summary>
            新审核状态
            </summary>
        </member>
        <member name="T:Victornet.Common.AuditItem">
            <summary>
            权限实体类
            </summary>
        </member>
        <member name="P:Victornet.Common.AuditItem.ItemKey">
             <summary>
            动态项目标志
             </summary>
        </member>
        <member name="P:Victornet.Common.AuditItem.ApplicationId">
             <summary>
            应用程序id
             </summary>
        </member>
        <member name="P:Victornet.Common.AuditItem.ItemName">
             <summary>
            项目名称
             </summary>
        </member>
        <member name="P:Victornet.Common.AuditItem.DisplayOrder">
             <summary>
            排序序号
             </summary>
        </member>
        <member name="P:Victornet.Common.AuditItem.Description">
             <summary>
            描述
             </summary>
        </member>
        <member name="T:Victornet.Common.AuditItemInUserRole">
            <summary>
            审核项目与角色实体类
            </summary>
        </member>
        <member name="M:Victornet.Common.AuditItemInUserRole.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Victornet.Common.AuditItemInUserRole.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Victornet.Common.AuditItemInUserRole.RoleName">
             <summary>
            角色名称
             </summary>
        </member>
        <member name="P:Victornet.Common.AuditItemInUserRole.ItemKey">
             <summary>
            审核项目标识
             </summary>
        </member>
        <member name="P:Victornet.Common.AuditItemInUserRole.StrictDegree">
             <summary>
            严格程度
             </summary>
        </member>
        <member name="P:Victornet.Common.AuditItemInUserRole.IsLocked">
             <summary>
            是否锁定
             </summary>
        </member>
        <member name="T:Victornet.Common.AuditItemKeys">
            <summary>
            审核项目标识
            </summary>
        </member>
        <member name="M:Victornet.Common.AuditItemKeys.Instance">
            <summary>
            获取该类的单例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.AuditItemKeys.Comment">
            <summary>
            评论
            </summary>
        </member>
        <member name="T:Victornet.Common.AuditService">
            <summary>
            审核业务逻辑类
            </summary>
        </member>
        <member name="M:Victornet.Common.AuditService.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Victornet.Common.AuditService.#ctor(Victornet.Repositories.IRepository{Victornet.Common.AuditItem},Victornet.Common.Repositories.IAuditItemInUserRoleRepository)">
            <summary>
            构造器
            </summary>
            <param name="auditItemRepository">AuditItem仓储</param>
            <param name="auditItemInUserRoleRepository">PermissionItemInUserRoleRepository仓储</param>
        </member>
        <member name="M:Victornet.Common.AuditService.GetAuditItems(System.Int32)">
            <summary>
            获取审核项集合
            </summary>
            <param name="applicationId">应用程序ID</param>
            <returns>审核项集合</returns>
        </member>
        <member name="M:Victornet.Common.AuditService.GetAuditItem(System.String)">
            <summary>
            获取AuditItem
            </summary>
            <param name="itemKey">审核项标识</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.AuditService.GetAuditItemsInUserRole(System.String,System.Nullable{System.Int32})">
            <summary>
            获取用户角色对应的审核设置
            </summary>
            <param name="roleName">角色名称</param>
            <returns>返回roleName对应的审核设置</returns>
        </member>
        <member name="M:Victornet.Common.AuditService.UpdateAuditItemInUserRole(System.Collections.Generic.IEnumerable{Victornet.Common.AuditItemInUserRole})">
            <summary>
            更新权限规则
            </summary>
            <param name="AuditItemInUserRoles">待更新的权限项目规则集合</param>
        </member>
        <member name="M:Victornet.Common.AuditService.GetPubliclyAuditStatus(System.Int32)">
            <summary>
            获取应用的PubliclyAuditStatus设置
            </summary>
            <param name="applicationId">ApplicationId</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.AuditService.SavePubliclyAuditStatus(System.Int32,Victornet.Common.PubliclyAuditStatus)">
            <summary>
            保存应用的PubliclyAuditStatus设置
            </summary>
            <param name="applicationId">ApplicationId</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.AuditService.ChangeAuditStatusForCreate(System.Int64,Victornet.Common.IAuditable)">
            <summary>
            创建实体时设置审核状态
            </summary>
            <param name="userId">UserId</param>
            <param name="auditable">可审核实体</param>
        </member>
        <member name="M:Victornet.Common.AuditService.ChangeAuditStatusForUpdate(System.Int64,Victornet.Common.IAuditable)">
            <summary>
            更新实体时设置审核状态
            </summary>
            <param name="userId">UserId</param>
            <param name="auditable">可审核实体</param>
        </member>
        <member name="M:Victornet.Common.AuditService.NeedAudit(System.Int64,Victornet.Common.IAuditable,Victornet.Common.AuditStrictDegree)">
            <summary>
            判断是否需要在一定的严格程度上需要审核
            </summary>
            <param name="userId">UserId</param>
            <param name="auditable">可审核实体</param>
            <param name="strictDegree">审核严格程度</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.AuditService.ResolveAuditDirection(System.Nullable{Victornet.Common.AuditStatus},System.Nullable{Victornet.Common.AuditStatus})">
            <summary>
            解析审核状态变化前后是否会对其他数据产生正向还负向的影响（例如：是该加积分，还是减积分）
            </summary>
            <remarks>该方法仅针对于管理员通过审核或不通过审核的情况</remarks>
            <param name="oldAuditStatus">变化前的审核状态（若是创建操作，请赋值为null）</param>
            <param name="newAuditStatus">变化后的审核状态（若是删除操作，请赋值为null）</param>
            <returns>true-正影响，false-负影响，null-未产生影响</returns>
        </member>
        <member name="T:Victornet.Common.IAuditable">
            <summary>
            可审核接口
            </summary>
        </member>
        <member name="P:Victornet.Common.IAuditable.AuditStatus">
            <summary>
            审核状态
            </summary>
        </member>
        <member name="P:Victornet.Common.IAuditable.AuditItemKey">
            <summary>
            审核项目标识
            </summary>
            <remarks>
            具体实现类显性实现
            </remarks>
        </member>
        <member name="T:Victornet.Common.ApplicationAdministratorRoleNames">
            <summary>
            应用管理员角色处理器
            </summary>
        </member>
        <member name="M:Victornet.Common.ApplicationAdministratorRoleNames.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Victornet.Common.ApplicationAdministratorRoleNames.GetAll">
            <summary>
            获取应用管理员角色
            </summary>
            <param name="applicationId">应用Id</param>
            <returns>应用管理员角色</returns>
        </member>
        <member name="M:Victornet.Common.ApplicationAdministratorRoleNames.GetRoleNames(System.Int32)">
            <summary>
            获取应用管理员角色
            </summary>
            <param name="applicationId">应用Id</param>
            <returns>应用管理员角色</returns>
        </member>
        <member name="M:Victornet.Common.ApplicationAdministratorRoleNames.Add(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            添加应用管理员角色
            </summary>
            <param name="applicationId">应用Id</param>
            <param name="applicationAdministratorRoleNames">应用管理员角色</param>
        </member>
        <member name="M:Victornet.Common.ApplicationAdministratorRoleNames.Remove(System.Int32)">
            <summary>
            删除应用管理员角色
            </summary>
            <param name="applicationId">应用Id</param>
        </member>
        <member name="T:Victornet.Common.AuthorizationService">
            <summary>
            权限验证服务类
            </summary>
        </member>
        <member name="M:Victornet.Common.AuthorizationService.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Victornet.Common.AuthorizationService.#ctor(System.Collections.Generic.IEnumerable{Victornet.Common.ITenantAuthorizationHandler},System.String,System.String,Victornet.Common.PermissionService)">
            <summary>
            构造函数
            </summary>
            <param name="tenantAuthorizationHandlers">租户权限处理器集合</param>
            <param name="anonymous">匿名用户角色名称</param>
            <param name="superAdministrator">超级管理员角色名称</param>
            <param name="permissionService">权限管理服务</param>
        </member>
        <member name="M:Victornet.Common.AuthorizationService.IsSuperAdministrator(Victornet.Common.IUser)">
            <summary>
            当前用户是不是超级管理员
            </summary>
            <param name="currentUser">当前用户</param>
            <returns>是超级管理员返回true，否则返回false</returns>
        </member>
        <member name="M:Victornet.Common.AuthorizationService.IsOwner(Victornet.Common.IUser,System.Int64[])">
            <summary>
            是不是拥有者
            </summary>
            <remarks>
            拥有者一般对自己的内容有管理权限
            </remarks>
            <param name="currentUser">当前用户</param>
            <param name="userIds">可能作为拥着有的多个用户Id</param>
            <returns>是拥有者返回true，否则返回false</returns>
        </member>
        <member name="M:Victornet.Common.AuthorizationService.IsTenantManager(Victornet.Common.IUser,System.String,System.Int64)">
            <summary>
            是不是租户管理者
            </summary>
            <param name="currentUser"></param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="tenantOwnerId">租户的OwnerId</param>
            <returns>是租户拥有者返回true，否则返回false</returns>
        </member>
        <member name="M:Victornet.Common.AuthorizationService.IsTenantMember(Victornet.Common.IUser,System.String,System.Int64)">
            <summary>
            是不是租户普通成员
            </summary>
            <param name="currentUser"></param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="tenantOwnerId">租户的OwnerId</param>
            <returns>是租户拥有者返回true，否则返回false</returns>
        </member>
        <member name="M:Victornet.Common.AuthorizationService.IsApplicationManager(Victornet.Common.IUser,System.Int32)">
            <summary>
            是不是应用管理员
            </summary>
            <param name="currentUser"></param>
            <param name="applicationId">应用Id</param>
            <returns>是应用管理员返回true，否则返回false</returns>
        </member>
        <member name="M:Victornet.Common.AuthorizationService.Check(Victornet.Common.IUser,System.String)">
            <summary>
            检查用户是否有权限进行某项操作
            </summary>
            <param name="currentUser">当前用户</param>
            <param name="permissionItemKey">权限项目标识</param>
            <returns>有权限操作返回true，否则返回false</returns>
        </member>
        <member name="T:Victornet.Common.IAuthorizationService">
            <summary>
            授权服务接口
            </summary>
        </member>
        <member name="M:Victornet.Common.IAuthorizationService.IsSuperAdministrator(Victornet.Common.IUser)">
            <summary>
            当前用户是不是超级管理员
            </summary>
            <param name="currentUser">当前用户</param>
            <returns>是超级管理员返回true，否则返回false</returns>
        </member>
        <member name="M:Victornet.Common.IAuthorizationService.IsOwner(Victornet.Common.IUser,System.Int64[])">
            <summary>
            是不是拥有者
            </summary>
            <remarks>
            拥有者一般对自己的内容有管理权限
            </remarks>
            <param name="currentUser">当前用户</param>
            <param name="userIds">可能作为拥着有的多个用户Id</param>
            <returns>是拥有者返回true，否则返回false</returns>
        </member>
        <member name="M:Victornet.Common.IAuthorizationService.IsTenantManager(Victornet.Common.IUser,System.String,System.Int64)">
            <summary>
            是不是租户管理者
            </summary>
            <param name="currentUser">当前用户</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="tenantOwnerId">租户的OwnerId</param>
            <returns>是租户拥有者返回true，否则返回false</returns>
        </member>
        <member name="M:Victornet.Common.IAuthorizationService.IsTenantMember(Victornet.Common.IUser,System.String,System.Int64)">
            <summary>
            是不是租户普通成员
            </summary>
            <param name="currentUser">当前用户</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="tenantOwnerId">租户的OwnerId</param>
            <returns>是租户拥有者返回true，否则返回false</returns>
        </member>
        <member name="M:Victornet.Common.IAuthorizationService.IsApplicationManager(Victornet.Common.IUser,System.Int32)">
            <summary>
            是不是应用管理员
            </summary>
            <param name="currentUser"></param>
            <param name="applicationId">应用Id</param>
            <returns>是应用管理员返回true，否则返回false</returns>
        </member>
        <member name="M:Victornet.Common.IAuthorizationService.Check(Victornet.Common.IUser,System.String)">
            <summary>
            检查用户是否有权限进行某项操作
            </summary>
            <param name="currentUser">当前用户</param>
            <param name="permissionItemKey">权限项目标识</param>
            <returns>有权限操作返回true，否则返回false</returns>
        </member>
        <member name="T:Victornet.Common.ITenantAuthorizationHandler">
            <summary>
            租户权限验证处理器
            </summary>
        </member>
        <member name="P:Victornet.Common.ITenantAuthorizationHandler.TenantTypeId">
            <summary>
            租户类型Id
            </summary>
        </member>
        <member name="M:Victornet.Common.ITenantAuthorizationHandler.IsTenantManager(Victornet.Common.IUser,System.Int64)">
            <summary>
            判断是否为租户管理者
            </summary>
            <param name="currentUser">当前用户</param>
            <param name="tenantOwnerId">租户拥有者Id</param>
            <returns>true-是；false-不是</returns>
        </member>
        <member name="M:Victornet.Common.ITenantAuthorizationHandler.IsTenantMember(Victornet.Common.IUser,System.Int64)">
            <summary>
            判断是否为租户普通成员
            </summary>
            <param name="currentUser">当前用户</param>
            <param name="tenantOwnerId">租户拥有者Id</param>
            <returns>true-是；false-不是</returns>
        </member>
        <member name="T:Victornet.Common.PermissionType">
            <summary>
            权限许可类型
            </summary>
        </member>
        <member name="T:Victornet.Common.PermissionScope">
            <summary>
            权限许可范围
            </summary>
            <remarks>
            范围越大对应的整型值越大
            </remarks>
        </member>
        <member name="T:Victornet.Common.PermissionItem">
            <summary>
            权限实体类
            </summary>
        </member>
        <member name="P:Victornet.Common.PermissionItem.ItemKey">
             <summary>
            权限项目标志
             </summary>
        </member>
        <member name="P:Victornet.Common.PermissionItem.ApplicationId">
             <summary>
            应用程序id
             </summary>
        </member>
        <member name="P:Victornet.Common.PermissionItem.ItemName">
             <summary>
            权限项目名称
             </summary>
        </member>
        <member name="P:Victornet.Common.PermissionItem.DisplayOrder">
             <summary>
            排序序号
             </summary>
        </member>
        <member name="P:Victornet.Common.PermissionItem.EnableQuota">
             <summary>
            是否启用权限额度
             </summary>
        </member>
        <member name="P:Victornet.Common.PermissionItem.EnableScope">
             <summary>
            是否启用权限范围
             </summary>
        </member>
        <member name="T:Victornet.Common.PermissionItemInUserRole">
            <summary>
            权限项目与角色关联
            </summary>
        </member>
        <member name="M:Victornet.Common.PermissionItemInUserRole.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Victornet.Common.PermissionItemInUserRole.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Victornet.Common.PermissionItemInUserRole.RoleName">
             <summary>
            角色名称
             </summary>
        </member>
        <member name="P:Victornet.Common.PermissionItemInUserRole.ItemKey">
             <summary>
            权限项目标识
             </summary>
        </member>
        <member name="P:Victornet.Common.PermissionItemInUserRole.PermissionType">
             <summary>
            权限设置类型
             </summary>
        </member>
        <member name="P:Victornet.Common.PermissionItemInUserRole.PermissionQuota">
             <summary>
            允许的权限额度
             </summary>
        </member>
        <member name="P:Victornet.Common.PermissionItemInUserRole.PermissionScope">
             <summary>
            允许的权限范围
             </summary>
        </member>
        <member name="P:Victornet.Common.PermissionItemInUserRole.IsLocked">
             <summary>
            是否锁定
             </summary>
        </member>
        <member name="T:Victornet.Common.PermissionItemKeys">
            <summary>
            权限项目标识配置类（便于使用PermissionItemKey）
            </summary>
            <remarks>
            各Application应该对该配置类的方法进行扩展
            </remarks>
        </member>
        <member name="M:Victornet.Common.PermissionItemKeys.Instance">
            <summary>
            获取该类的单例
            </summary>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.PermissionService">
            <summary>
            权限管理服务类
            </summary>
        </member>
        <member name="M:Victornet.Common.PermissionService.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Victornet.Common.PermissionService.#ctor(Victornet.Repositories.IRepository{Victornet.Common.PermissionItem},Victornet.Common.Repositories.IPermissionItemInUserRoleRepository)">
            <summary>
            构造器
            </summary>
            <param name="permissionItemRepository">PermissionItem仓储</param>
            <param name="permissionItemInUserRoleRepository"><see cref="T:Victornet.Common.Repositories.IPermissionItemInUserRoleRepository"/></param>
        </member>
        <member name="M:Victornet.Common.PermissionService.GetPermissionItems(System.Nullable{System.Int32})">
            <summary>
            获取权限项集合
            </summary>
            <param name="applicationId">应用程序ID</param>
            <returns>权限项集合</returns>
        </member>
        <member name="M:Victornet.Common.PermissionService.GetPermissionItem(System.String)">
            <summary>
            获取PermissionItem
            </summary>
            <param name="itemKey">权限项标识</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.PermissionService.GetPermissionItemsInUserRole(System.String)">
            <summary>
            获取用户角色对应的权限设置
            </summary>
            <param name="roleName">角色名称</param>
            <returns>返回roleName对应的权限设置</returns>
        </member>
        <member name="M:Victornet.Common.PermissionService.UpdatePermissionItemInUserRole(System.Collections.Generic.IEnumerable{Victornet.Common.PermissionItemInUserRole})">
            <summary>
            更新权限规则
            </summary>
            <param name="permissionItemInUserRoles">待更新的权限项目规则集合</param>
        </member>
        <member name="M:Victornet.Common.PermissionService.ResolveUserPermission(System.Int64)">
            <summary>
            解析用户的权限规则用于权限验证
            </summary>
            <param name="userId">用户Id</param>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.ResolvedUserPermission">
            <summary>
            用户权限规则
            </summary>
        </member>
        <member name="M:Victornet.Common.ResolvedUserPermission.Merge(Victornet.Common.PermissionItem,Victornet.Common.PermissionType,Victornet.Common.PermissionScope,System.Single)">
            <summary>
            合并权限规则
            </summary>
            <param name="permissionItem">权限项目</param>
            <param name="permissionType">权限许可类型</param>
            <param name="permissionScope">权限许可范围</param>
            <param name="permissionQuota">权限许可额度</param>
        </member>
        <member name="M:Victornet.Common.ResolvedUserPermission.Validate(System.String)">
            <summary>
            权限验证
            </summary>
            <param name="itemKey">权限项目标识</param>
            <returns>通过验证返回true，否则返回false</returns>        
        </member>
        <member name="M:Victornet.Common.ResolvedUserPermission.Validate(System.String,Victornet.Common.PermissionScope)">
            <summary>
            权限验证
            </summary>
            <param name="itemKey">权限项目标识</param>
            <param name="permissionScope">权限许可范围</param>
            <returns>通过验证返回true，否则返回false</returns>  
        </member>
        <member name="M:Victornet.Common.ResolvedUserPermission.Validate(System.String,Victornet.Common.PermissionScope,System.Single)">
            <summary>
            权限验证
            </summary>
            <param name="itemKey">权限项目标识</param>
            <param name="permissionScope">权限许可范围</param>
            <param name="permissionQuota">权限许可额度</param>
            <returns>通过验证返回true，否则返回false</returns>
        </member>
        <member name="T:Victornet.Common.ResolvedUserPermission.PermissionSetting">
            <summary>
            权限设置
            </summary>
        </member>
        <member name="M:Victornet.Common.ResolvedUserPermission.PermissionSetting.#ctor(Victornet.Common.PermissionType,Victornet.Common.PermissionScope,System.Single)">
            <summary>
            构造函数
            </summary>
            <param name="permissionType"></param>
            <param name="permissionScope"></param>
            <param name="permissionQuota"></param>
        </member>
        <member name="P:Victornet.Common.ResolvedUserPermission.PermissionSetting.PermissionType">
            <summary>
            权限许可类型
            </summary>
        </member>
        <member name="P:Victornet.Common.ResolvedUserPermission.PermissionSetting.PermissionScope">
            <summary>
            权限许可范围
            </summary>
        </member>
        <member name="P:Victornet.Common.ResolvedUserPermission.PermissionSetting.PermissionQuota">
            <summary>
            权限许可额度
            </summary>
        </member>
        <member name="T:Victornet.Common.ContentPrivacyService">
            <summary>
            内容隐私业务逻辑类
            </summary>
        </member>
        <member name="M:Victornet.Common.ContentPrivacyService.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Victornet.Common.ContentPrivacyService.#ctor(Victornet.Common.Repositories.IContentPrivacySpecifyObjectsRepository)">
            <summary>
            构造器
            </summary>
            <param name="contentPrivacySpecifyObjectsRepository">内容隐私仓储</param>
        </member>
        <member name="M:Victornet.Common.ContentPrivacyService.UpdatePrivacySettings(Victornet.Common.IPrivacyable,System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.IEnumerable{Victornet.Common.ContentPrivacySpecifyObject}})">
            <summary>
            更新内容隐私设置
            </summary>
            <param name="privacyable">可隐私接口</param>
            <param name="specifyObjects"><remarks>key=specifyObjectTypeId,value=内容指定对象集合</remarks></param>
        </member>
        <member name="M:Victornet.Common.ContentPrivacyService.GetPrivacySpecifyObjects(System.String,System.Int64)">
            <summary>
            获取内容隐私设置指定对象
            </summary>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="contentId">内容Id</param>
            <returns><remarks>key=specifyObjectTypeId,value=内容指定对象集合</remarks></returns>
        </member>
        <member name="M:Victornet.Common.ContentPrivacyService.Validate(Victornet.Common.IPrivacyable,System.Int64)">
            <summary>
            内容隐私验证
            </summary>        
            <param name="privacyable">可隐私接口</param>
            <param name="toUserId">被验证用户Id</param>
            <returns>true-验证通过，false-验证失败</returns>
        </member>
        <member name="T:Victornet.Common.ContentPrivacySpecifyObject">
            <summary>
            内容隐私设置指定对象
            </summary>
        </member>
        <member name="M:Victornet.Common.ContentPrivacySpecifyObject.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Victornet.Common.ContentPrivacySpecifyObject.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Victornet.Common.ContentPrivacySpecifyObject.TenantTypeId">
             <summary>
            内容项租户类型Id
             </summary>
        </member>
        <member name="P:Victornet.Common.ContentPrivacySpecifyObject.ContentId">
             <summary>
            内容项Id
             </summary>
        </member>
        <member name="P:Victornet.Common.ContentPrivacySpecifyObject.SpecifyObjectTypeId">
             <summary>
            被指定对象类型
             </summary>
        </member>
        <member name="P:Victornet.Common.ContentPrivacySpecifyObject.SpecifyObjectId">
             <summary>
            被指定对象Id
             </summary>
        </member>
        <member name="P:Victornet.Common.ContentPrivacySpecifyObject.SpecifyObjectName">
             <summary>
            被指定对象名称
             </summary>
        </member>
        <member name="P:Victornet.Common.ContentPrivacySpecifyObject.DateCreated">
             <summary>
            创建时间
             </summary>
        </member>
        <member name="T:Victornet.Common.IPrivacyable">
            <summary>
            可隐私接口
            </summary>
        </member>
        <member name="P:Victornet.Common.IPrivacyable.ContentId">
            <summary>
            内容项Id
            </summary>
            <remarks>
            具体实现类显性实现
            </remarks>
        </member>
        <member name="P:Victornet.Common.IPrivacyable.UserId">
            <summary>
            内容项作者Id
            </summary>
            <remarks>
            具体实现类显性实现
            </remarks>
        </member>
        <member name="P:Victornet.Common.IPrivacyable.PrivacyStatus">
            <summary>
            隐私状态
            </summary>
            <remarks>一定不要显性实现</remarks>
        </member>
        <member name="P:Victornet.Common.IPrivacyable.TenantTypeId">
            <summary>
            租户类型Id
            </summary>
            <remarks>
            具体实现类显性实现
            </remarks>
        </member>
        <member name="T:Victornet.Common.IPrivacySpecifyObjectValidator">
            <summary>
            隐私指定对象验证器
            </summary>
        </member>
        <member name="M:Victornet.Common.IPrivacySpecifyObjectValidator.Validate(System.Int64,System.Int64,System.Int64)">
            <summary>
            验证指定对象针对toUserId是否具有隐私权限
            </summary>
            <param name="userId">用户Id</param>
            <param name="toUserId">被验证用户</param>
            <param name="specifyObjectId">指定对象Id</param>
            <returns>true-成功，false-失败</returns>
        </member>
        <member name="T:Victornet.Common.PrivacyItem">
            <summary>
            隐私项目
            </summary>
        </member>
        <member name="M:Victornet.Common.PrivacyItem.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Victornet.Common.PrivacyItem.ItemKey">
             <summary>
            隐私项目标识
             </summary>
        </member>
        <member name="P:Victornet.Common.PrivacyItem.ItemGroupId">
             <summary>
            隐私项目分组Id
             </summary>
        </member>
        <member name="P:Victornet.Common.PrivacyItem.ApplicationId">
             <summary>
            应用程序Id
             </summary>
        </member>
        <member name="P:Victornet.Common.PrivacyItem.ItemName">
             <summary>
            隐私项目名称
             </summary>
        </member>
        <member name="P:Victornet.Common.PrivacyItem.Description">
             <summary>
            隐私项目描述
             </summary>
        </member>
        <member name="P:Victornet.Common.PrivacyItem.DisplayOrder">
             <summary>
            排序序号
             </summary>
        </member>
        <member name="P:Victornet.Common.PrivacyItem.PrivacyStatus">
             <summary>
            隐私状态
             </summary>
        </member>
        <member name="T:Victornet.Common.PrivacyItemGroup">
            <summary>
            隐私项目分组实体类
            </summary>
        </member>
        <member name="M:Victornet.Common.PrivacyItemGroup.#cctor">
            <summary>
            静态构造器
            </summary>
        </member>
        <member name="M:Victornet.Common.PrivacyItemGroup.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Victornet.Common.PrivacyItemGroup.GetAll">
            <summary>
            获取所有隐私项目类型
            </summary>
            <returns>通知类型</returns>
        </member>
        <member name="M:Victornet.Common.PrivacyItemGroup.Get(System.Int32)">
            <summary>
            获取隐私项目类型
            </summary>
            <param name="typeId">类型Id</param>
            <returns>隐私项目类型</returns>
        </member>
        <member name="M:Victornet.Common.PrivacyItemGroup.Add(Victornet.Common.PrivacyItemGroup)">
            <summary>
            添加隐私项目类型
            </summary>
            <param name="PrivacyItemGroup">隐私项目类型</param>
        </member>
        <member name="P:Victornet.Common.PrivacyItemGroup.TypeId">
            <summary>
            类型Id
            </summary>
        </member>
        <member name="P:Victornet.Common.PrivacyItemGroup.TypeName">
            <summary>
            类型名称
            </summary>
        </member>
        <member name="P:Victornet.Common.PrivacyItemGroup.Description">
            <summary>
            类型描述
            </summary>
        </member>
        <member name="T:Victornet.Common.PrivacyItemGroupIds">
            <summary>
            隐私项目分组Id管理类
            </summary>
        </member>
        <member name="M:Victornet.Common.PrivacyItemGroupIds.Instance">
            <summary>
            获取单例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.PrivacyItemGroupIds.Profile">
            <summary>
            个人资料
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.PrivacyItemGroupIds.VisitSpace">
            <summary>
            空间访问
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.PrivacyItemGroupIds.Interactive">
            <summary>
            沟通互动
            </summary>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.PrivacyItemKeys">
            <summary>
            隐私项目Key管理类
            </summary>
        </member>
        <member name="M:Victornet.Common.PrivacyItemKeys.Instance">
            <summary>
            获取单例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.PrivacyItemKeys.Birthday">
            <summary>
            生日
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.PrivacyItemKeys.Mobile">
            <summary>
            手机号码
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.PrivacyItemKeys.Email">
            <summary>
            联系邮箱
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.PrivacyItemKeys.QQ">
            <summary>
            QQ
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.PrivacyItemKeys.Msn">
            <summary>
            Msn
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.PrivacyItemKeys.EducationExperience">
            <summary>
            教育信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.PrivacyItemKeys.WorkExperience">
            <summary>
            职业信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.PrivacyItemKeys.VisitUserSpace">
            <summary>
            空间访问
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.PrivacyItemKeys.InviteFollow">
            <summary>
            求关注
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.PrivacyItemKeys.Follow">
            <summary>
            加关注
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.PrivacyItemKeys.Invitation">
            <summary>
            发请求
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.PrivacyItemKeys.Message">
            <summary>
            发私信
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.PrivacyItemKeys.Comment">
            <summary>
            评论
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.PrivacyItemKeys.AtUser">
            <summary>
            @提到我
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.PrivacyItemKeys.TrueName">
            <summary>
            真实姓名
            </summary>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.PrivacyService">
            <summary>
            隐私业务逻辑类
            </summary>
        </member>
        <member name="M:Victornet.Common.PrivacyService.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Victornet.Common.PrivacyService.#ctor(Victornet.Common.Repositories.IPrivacyItemRepository,Victornet.Common.Repositories.IStopedUserRepository,Victornet.Common.Repositories.IUserPrivacySettingRepository,Victornet.Common.Repositories.IUserPrivacySpecifyObjectRepository)">
            <summary>
            构造器
            </summary>
            <param name="privacyItemRepository">PrivacyItemRepository仓储</param>
            <param name="stopedUserRepository">StopedUserRepository仓储</param>
            <param name="userPrivacySettingRepository">UserPrivacySettingRepository仓储</param>
            <param name="userPrivacySpecifyObjectRepository">UserPrivacySpecifyObjectRepository仓储</param>
        </member>
        <member name="M:Victornet.Common.PrivacyService.GetPrivacyItem(System.String)">
            <summary>
            获取PrivacyItem
            </summary>
            <param name="itemKey">隐私项标识</param>
            <returns>PrivacyItem</returns>
        </member>
        <member name="M:Victornet.Common.PrivacyService.GetPrivacyItems(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            获取隐私项集合
            </summary>
            <param name="itemGroupId">隐私项目类型Id</param>
            <param name="applicationId">应用Id</param>
            <returns>隐私项集合</returns>
        </member>
        <member name="M:Victornet.Common.PrivacyService.UpdatePrivacyItems(System.Collections.Generic.IEnumerable{Victornet.Common.PrivacyItem})">
            <summary>
            更新隐私规则
            </summary>
            <param name="privacyItems">待更新的隐私项目规则集合</param>
        </member>
        <member name="M:Victornet.Common.PrivacyService.CreateStopedUser(Victornet.Common.StopedUser)">
            <summary>
            把用户加入黑名单
            </summary>
            <param name="stopedUser">黑名单</param>
        </member>
        <member name="M:Victornet.Common.PrivacyService.DeleteStopedUser(System.Int64,System.Int64)">
            <summary>
            把用户从黑名单中删除
            </summary>
            <param name="userId">userId</param>
            <param name="toUserId">被加入黑名单的UserId</param>
        </member>
        <member name="M:Victornet.Common.PrivacyService.GetStopedUsers(System.Int64)">
            <summary>
            获取用户的黑名单
            </summary>
            <returns><remarks>key=ToUserId,value=StopedUser</remarks></returns>
        </member>
        <member name="M:Victornet.Common.PrivacyService.UpdateUserPrivacySettings(System.Int64,System.Collections.Generic.Dictionary{System.String,Victornet.Common.PrivacyStatus},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.IEnumerable{Victornet.Common.UserPrivacySpecifyObject}})">
            <summary>
            更新用户的隐私设置
            </summary>
            <param name="userId">用户Id</param>
            <param name="userSettings"><remarks>key=itemKey,value=PrivacyStatus</remarks></param>
            <param name="specifyObjects"><remarks>key=itemKey,value=用户指定对象集合</remarks></param>
        </member>
        <member name="M:Victornet.Common.PrivacyService.ClearUserPrivacySettings(System.Int64)">
            <summary>
            清空用户隐私设置（用于恢复到默认设置）
            </summary>
            <param name="userId"></param>
        </member>
        <member name="M:Victornet.Common.PrivacyService.GetUserPrivacySettings(System.Int64)">
            <summary>
            获取用户的隐私设置
            </summary>
            <param name="userId">用户Id</param>
            <returns><para>如果用户无设置返回空集合</para><remarks>key=itemKey,value=PrivacyStatus</remarks></returns>
        </member>
        <member name="M:Victornet.Common.PrivacyService.GetUserPrivacySpecifyObjects(System.Int64,System.String)">
            <summary>
            获取用户隐私设置指定对象集合
            </summary>
            <param name="userId">用户Id</param>
            <param name="itemKey">隐私项目Key</param>
            <returns><remarks>key=specifyObjectTypeId,value=用户指定对象集合</remarks></returns>
        </member>
        <member name="M:Victornet.Common.PrivacyService.IsStopedUser(System.Int64,System.Int64)">
            <summary>
            toUserId是不是userId阻止的用户
            </summary>
            <param name="userId">用户Id</param>
            <param name="toUserId">被判定用户Id</param>
            <returns>true-是黑名单用户，false-不是</returns>
        </member>
        <member name="M:Victornet.Common.PrivacyService.Validate(System.Int64,System.Int64,System.String)">
            <overloads>隐私验证</overloads>
             <summary>
             隐私验证
             </summary>        
             <param name="userId">用户Id</param>
             <param name="toUserId">被验证用户Id</param>
             <param name="itemKey">隐私项目Key</param>
             <returns>true-验证通过，false-验证失败</returns>
        </member>
        <member name="M:Victornet.Common.PrivacyService.ValidateUserPrivacySpecifyObject(System.Int64,System.Int64,System.String)">
            <summary>
            用户隐私验证指定对象
            </summary>        
            <param name="userId">用户Id</param>
            <param name="toUserId">被验证用户Id</param>
            <param name="itemKey">隐私项目Key</param>
            <returns>true-验证通过，false-验证失败</returns>
        </member>
        <member name="T:Victornet.Common.PrivacyStatus">
            <summary>
            隐私状态
            </summary>
        </member>
        <member name="F:Victornet.Common.PrivacyStatus.Private">
            <summary>
            仅自己可见
            </summary>        
        </member>
        <member name="F:Victornet.Common.PrivacyStatus.Part">
            <summary>
            仅部分人可见
            </summary>
        </member>
        <member name="F:Victornet.Common.PrivacyStatus.Public">
            <summary>
            所有人可见
            </summary>
        </member>
        <member name="T:Victornet.Common.SpecifyObjectType">
            <summary>
            隐私设置指定对象类型
            </summary>
        </member>
        <member name="M:Victornet.Common.SpecifyObjectType.#cctor">
            <summary>
            静态构造器
            </summary>
        </member>
        <member name="M:Victornet.Common.SpecifyObjectType.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Victornet.Common.SpecifyObjectType.GetAll">
            <summary>
            获取所有隐私设置指定对象类型
            </summary>
            <returns>隐私类型</returns>
        </member>
        <member name="M:Victornet.Common.SpecifyObjectType.Get(System.Int32)">
            <summary>
            获取隐私设置指定对象类型
            </summary>
            <param name="typeId">类型Id</param>
            <returns>隐私设置指定对象类型</returns>
        </member>
        <member name="M:Victornet.Common.SpecifyObjectType.Add(Victornet.Common.SpecifyObjectType)">
            <summary>
            添加隐私设置指定对象类型
            </summary>
            <param name="PrivacyItemType">隐私设置指定对象类型</param>
        </member>
        <member name="P:Victornet.Common.SpecifyObjectType.TypeId">
            <summary>
            类型Id
            </summary>
        </member>
        <member name="P:Victornet.Common.SpecifyObjectType.TypeName">
            <summary>
            类型名称
            </summary>
        </member>
        <member name="P:Victornet.Common.SpecifyObjectType.Description">
            <summary>
            类型描述
            </summary>
        </member>
        <member name="T:Victornet.Common.SpecifyObjectTypeIds">
            <summary>
            隐私设置指定对象类型Id管理类
            </summary>
        </member>
        <member name="M:Victornet.Common.SpecifyObjectTypeIds.Instance">
            <summary>
            获取单例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.SpecifyObjectTypeIds.User">
            <summary>
            指定人
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.SpecifyObjectTypeIds.UserGroup">
            <summary>
            指定关注分组
            </summary>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.StopedUser">
            <summary>
            用户黑名单
            </summary>
        </member>
        <member name="M:Victornet.Common.StopedUser.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Victornet.Common.StopedUser.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Victornet.Common.StopedUser.UserId">
             <summary>
            用户Id
             </summary>
        </member>
        <member name="P:Victornet.Common.StopedUser.ToUserId">
             <summary>
            被阻止用户Id
             </summary>
        </member>
        <member name="P:Victornet.Common.StopedUser.ToUserDisplayName">
             <summary>
            被阻止用户名称
             </summary>
        </member>
        <member name="T:Victornet.Common.UserGroupPrivacySpecifyObjectValidator">
            <summary>
            隐私指定关注分组验证器
            </summary>
        </member>
        <member name="M:Victornet.Common.UserGroupPrivacySpecifyObjectValidator.Victornet#Common#IPrivacySpecifyObjectValidator#Validate(System.Int64,System.Int64,System.Int64)">
            <summary>
            验证指定对象针对toUserId是否具有隐私权限
            </summary>
            <param name="userId">用户Id</param>
            <param name="toUserId">被验证用户</param>
            <param name="specifyObjectId">指定对象Id</param>
            <returns>true-成功，false-失败</returns>
        </member>
        <member name="T:Victornet.Common.UserPrivacySetting">
            <summary>
            用户隐私设置
            </summary>
        </member>
        <member name="M:Victornet.Common.UserPrivacySetting.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Victornet.Common.UserPrivacySetting.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Victornet.Common.UserPrivacySetting.UserId">
             <summary>
            用户Id
             </summary>
        </member>
        <member name="P:Victornet.Common.UserPrivacySetting.ItemKey">
             <summary>
            类型Id
             </summary>
        </member>
        <member name="P:Victornet.Common.UserPrivacySetting.PrivacyStatus">
             <summary>
            隐私状态
             </summary>
        </member>
        <member name="T:Victornet.Common.UserPrivacySpecifyObject">
            <summary>
            用户隐私设置指定对象
            </summary>
        </member>
        <member name="M:Victornet.Common.UserPrivacySpecifyObject.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Victornet.Common.UserPrivacySpecifyObject.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Victornet.Common.UserPrivacySpecifyObject.UserPrivacySettingId">
             <summary>
            用户隐私设置Id
             </summary>
        </member>
        <member name="P:Victornet.Common.UserPrivacySpecifyObject.SpecifyObjectTypeId">
             <summary>
            被指定对象类型
             </summary>
        </member>
        <member name="P:Victornet.Common.UserPrivacySpecifyObject.SpecifyObjectId">
             <summary>
            被指定对象Id
             </summary>
        </member>
        <member name="P:Victornet.Common.UserPrivacySpecifyObject.SpecifyObjectName">
             <summary>
            被指定对象名称
             </summary>
        </member>
        <member name="P:Victornet.Common.UserPrivacySpecifyObject.DateCreated">
             <summary>
            创建时间
             </summary>
        </member>
        <member name="T:Victornet.Common.UserPrivacySpecifyObjectValidator">
            <summary>
            隐私指定人验证器
            </summary>
        </member>
        <member name="M:Victornet.Common.UserPrivacySpecifyObjectValidator.Victornet#Common#IPrivacySpecifyObjectValidator#Validate(System.Int64,System.Int64,System.Int64)">
            <summary>
            验证指定对象针对toUserId是否具有隐私权限
            </summary>
            <param name="userId">用户Id</param>
            <param name="toUserId">被验证用户</param>
            <param name="specifyObjectId">指定对象Id</param>
            <returns>true-成功，false-失败</returns>
        </member>
        <member name="T:Victornet.Common.BlockedObjectTypes">
            <summary>
            被屏蔽对象类型
            </summary>
        </member>
        <member name="M:Victornet.Common.BlockedObjectTypes.Instance">
            <summary>
            获取单例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.BlockedObjectTypes.User">
            <summary>
            用户
            </summary>
            <returns>返回用户对应的被屏蔽对象类型</returns>
        </member>
        <member name="M:Victornet.Common.BlockedObjectTypes.Group">
            <summary>
            群组
            </summary>
            <returns>返回群组对应的被屏蔽对象类型</returns>
        </member>
        <member name="T:Victornet.Common.UserBlockedObject">
            <summary>
            用户屏蔽的对象
            </summary>
        </member>
        <member name="P:Victornet.Common.UserBlockedObject.Id">
            <summary>
            id
            </summary>
        </member>
        <member name="P:Victornet.Common.UserBlockedObject.UserId">
            <summary>
            用户id
            </summary>
        </member>
        <member name="P:Victornet.Common.UserBlockedObject.ObjectType">
            <summary>
            被屏蔽的类型
            </summary>
        </member>
        <member name="P:Victornet.Common.UserBlockedObject.ObjectId">
            <summary>
            被屏蔽对象id
            </summary>
        </member>
        <member name="P:Victornet.Common.UserBlockedObject.ObjectName">
            <summary>
            被屏蔽对象名
            </summary>
        </member>
        <member name="P:Victornet.Common.UserBlockedObject.DateCreated">
            <summary>
            屏蔽创建名
            </summary>
        </member>
        <member name="T:Victornet.Common.UserBlockService">
            <summary>
            用户屏蔽业务逻辑类
            </summary>
        </member>
        <member name="M:Victornet.Common.UserBlockService.#ctor">
            <summary>
            屏蔽用户屏蔽群组
            </summary>
        </member>
        <member name="M:Victornet.Common.UserBlockService.#ctor(Victornet.Common.Repositories.IUserBlockRepository)">
            <summary>
            带参数的构造方法
            </summary>
            <param name="userBlockRepository"></param>
        </member>
        <member name="M:Victornet.Common.UserBlockService.BlockUser(System.Int64,System.Int64,System.String)">
            <summary>
            屏蔽用户
            </summary>
            <param name="userId">屏蔽人UserId</param>
            <param name="blockedUserId">被屏蔽UserId</param>
            <param name="blockedDisplayName">被屏蔽用户DisplayName</param>
        </member>
        <member name="M:Victornet.Common.UserBlockService.BlockGroup(System.Int64,System.Int64,System.String)">
            <summary>
            屏蔽群组
            </summary>
            <param name="userId">屏蔽人UserId</param>
            <param name="blockedGroupId">被屏蔽群组Id</param>
            <param name="blockedGroupName">被屏蔽群组名称</param>
        </member>
        <member name="M:Victornet.Common.UserBlockService.Create(System.Int64,System.Int32,System.Int64,System.String)">
            <summary>
            添加屏蔽对象
            </summary>
            <param name="userId">屏蔽人UserId</param>
            <param name="objectType">被屏蔽对象类型</param>
            <param name="objectId">被屏蔽对象Id</param>
            <param name="objectName">被屏蔽对象名称</param>
        </member>
        <member name="M:Victornet.Common.UserBlockService.Delete(System.Int64)">
            <summary>
            删除被屏蔽对象
            </summary>
            <param name="id">Id</param>
        </member>
        <member name="M:Victornet.Common.UserBlockService.IsBlockedUser(System.Int64,System.Int64)">
            <summary>
            用户是否被屏蔽
            </summary>
            <param name="userId">UserId</param>
            <param name="checkingUserId">被检查的UserId</param>
            <returns>如果checkingUserId被userId屏蔽，则返回true</returns>
        </member>
        <member name="M:Victornet.Common.UserBlockService.IsBlockedGroup(System.Int64,System.Int64)">
            <summary>
            群组是否被屏蔽
            </summary>
            <param name="userId">UserId</param>
            <param name="checkingGroupId">被检查的群组Id</param>
            <returns>如果checkingGroupId被userId屏蔽，则返回true</returns>
        </member>
        <member name="M:Victornet.Common.UserBlockService.IsBlocked(System.Int64,System.Int32,System.Int64)">
            <summary>
            是否被屏蔽
            </summary>
            <param name="userId">UserId</param>
            <param name="objectType">被屏蔽对象类型</param>
            <param name="objectId">被屏蔽对象Id</param>
            <returns>如果objectId被userId屏蔽，则返回true</returns>
        </member>
        <member name="M:Victornet.Common.UserBlockService.GetBlockedUsers(System.Int64)">
            <summary>
            获取用户的屏蔽用户列表
            </summary>
            <param name="userId">UserId</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.UserBlockService.GetBlockedGroups(System.Int64)">
            <summary>
            获取用户的屏蔽群组列表
            </summary>
            <param name="userId">UserId</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.UserBlockService.GetBlockedObjects(System.Int64,System.Int32)">
            <summary>
            获取y用户的屏蔽对象列表
            </summary>
            <param name="userId">UserId</param>
            <param name="objectType">被屏蔽对象类型</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.UserBlockService.CleanByUser(System.Int64)">
            <summary>
            清除数据根据用户id（删除用户的时候使用）
            </summary>
            <param name="userId">用户id</param>
            <returns>是否成功清除数据</returns>
        </member>
        <member name="T:Victornet.Common.BatchFollowEventArgs">
            <summary>
            收藏自定义事件
            </summary>
        </member>
        <member name="M:Victornet.Common.BatchFollowEventArgs.#ctor(System.String,System.Int64)">
            <summary>
            构造器
            </summary>
            <param name="eventOperationType">事件操作类型</param>
            <param name="tenantTypeId">租户类型Id</param>
            <param name="ownerId">收藏用户Id</param>
        </member>
        <member name="P:Victornet.Common.BatchFollowEventArgs.UserId">
             <summary>
            用户Id 
             </summary>
        </member>
        <member name="T:Victornet.Common.FollowEntity">
            <summary>
            关注用户实体类
            </summary>
        </member>
        <member name="M:Victornet.Common.FollowEntity.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Victornet.Common.FollowEntity.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Victornet.Common.FollowEntity.UserId">
             <summary>
            关注用户Id
             </summary>
        </member>
        <member name="P:Victornet.Common.FollowEntity.FollowedUserId">
             <summary>
            被关注用户Id
             </summary>
        </member>
        <member name="P:Victornet.Common.FollowEntity.NoteName">
             <summary>
            备注名称
             </summary>
        </member>
        <member name="P:Victornet.Common.FollowEntity.IsQuietly">
             <summary>
            是否为悄悄关注
             </summary>
        </member>
        <member name="P:Victornet.Common.FollowEntity.IsMutual">
             <summary>
            是否为互相关注
             </summary>
        </member>
        <member name="P:Victornet.Common.FollowEntity.IsNewFollower">
             <summary>
            是否为新增粉丝
             </summary>
        </member>
        <member name="P:Victornet.Common.FollowEntity.DateCreated">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:Victornet.Common.FollowEntity.LastContactDate">
            <summary>
            最后联系时间
            </summary>
        </member>
        <member name="T:Victornet.Common.Follow_SortBy">
            <summary>
            关注用户查询条件
            </summary>
        </member>
        <member name="F:Victornet.Common.Follow_SortBy.DateCreated_Desc">
            <summary>
            关注时间
            </summary>
        </member>
        <member name="F:Victornet.Common.Follow_SortBy.LastContent_Desc">
            <summary>
            内容最后更新时间
            </summary>
        </member>
        <member name="F:Victornet.Common.Follow_SortBy.FollowerCount_Desc">
            <summary>
            粉丝数
            </summary>
        </member>
        <member name="F:Victornet.Common.Follow_SortBy.LastContact_Desc">
            <summary>
            最后联系时间
            </summary>
        </member>
        <member name="T:Victornet.Common.FollowSpecifyGroupIds">
            <summary>
            关注特殊分组Id
            </summary>
        </member>
        <member name="F:Victornet.Common.FollowSpecifyGroupIds.UnGrouped">
            <summary>
            未分组
            </summary>
        </member>
        <member name="F:Victornet.Common.FollowSpecifyGroupIds.All">
            <summary>
            所有分组
            </summary>
        </member>
        <member name="F:Victornet.Common.FollowSpecifyGroupIds.Mutual">
            <summary>
            相互关注
            </summary>        
        </member>
        <member name="F:Victornet.Common.FollowSpecifyGroupIds.Quietly">
            <summary>
            悄悄关注
            </summary>
        </member>
        <member name="T:Victornet.Common.FollowService">
            <summary>
            关注用户业务逻辑类
            </summary>
        </member>
        <member name="M:Victornet.Common.FollowService.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Victornet.Common.FollowService.#ctor(Victornet.Common.Repositories.IFollowRepository)">
            <summary>
            构造器
            </summary>
            <param name="followRepository">follow仓储</param>
        </member>
        <member name="M:Victornet.Common.FollowService.Follow(System.Int64,System.Int64,System.Boolean)">
            <summary>
            关注用户
            </summary>
            <param name="userId">用户Id</param>
            <param name="followUserId">被关注用户Id</param>
            <param name="isQuietly">是否悄悄关注</param>
        </member>
        <member name="M:Victornet.Common.FollowService.BatchFollow(System.Int64,System.Collections.Generic.IList{System.Int64},System.Boolean)">
            <summary>
            关注用户
            </summary>
            <param name="userId">用户Id</param>
            <param name="followedUserIds">被关注用户Id集合</param>
            <param name="isQuietly">是否悄悄关注</param>
        </member>
        <member name="M:Victornet.Common.FollowService.Update(Victornet.Common.FollowEntity)">
            <summary>
            更新关注实体
            </summary>
            <param name="follow">关注用户实体</param>
        </member>
        <member name="M:Victornet.Common.FollowService.IsFollowed(System.Int64,System.Int64)">
            <summary>
            判断是否关注了被判定用户
            </summary>
            <param name="userId">用户Id</param>
            <param name="toUserId">被判定用户Id</param>
            <returns>true-关注,false-没关注</returns>
        </member>
        <member name="M:Victornet.Common.FollowService.IsFollowed(System.Int64,System.Int64,System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            判断是否关注了被判定用户
            </summary>
            <param name="userId">用户Id</param>
            <param name="toUserId">被判定用户Id</param>
            <param name="groupNames">被关注用户所属分组</param>
            <returns>true-关注,false-没关注</returns>
        </member>
        <member name="M:Victornet.Common.FollowService.IsFollowed(System.Int64,System.Int64,System.Boolean@)">
            <summary>
            判断是否关注了被判定用户
            </summary>
            <param name="userId">用户Id</param>
            <param name="toUserId">被判定用户Id</param>
            <param name="isQuietly">是否去为悄悄关注</param>
            <returns>true-关注,false-没关注</returns>
        </member>
        <member name="M:Victornet.Common.FollowService.IsMutualFollowed(System.Int64,System.Int64)">
            <summary>
            是否为双向关注
            </summary>
            <param name="userId">用户Id</param>
            <param name="toUserId">被判定用户Id</param>
            <returns>true-关注,false-没关注</returns>
        </member>
        <member name="M:Victornet.Common.FollowService.CancelFollow(System.Int64,System.Int64)">
            <summary>
            取消关注
            </summary>
            <param name="userId">用户Id</param>
            <param name="followedUserId">被关注用户Id</param>
        </member>
        <member name="M:Victornet.Common.FollowService.GetNewFollowerCount(System.Int64)">
            <summary>
            获取用户的最新粉丝数
            </summary>
            <remarks>用于新增粉丝提醒</remarks>
            <param name="userId">用户Id</param>
        </member>
        <member name="M:Victornet.Common.FollowService.ClearNewFollowerCount(System.Int64)">
             <summary>
             清除最新用户统计
             </summary>
             <remarks>用于清空提醒信息</remarks>
            <param name="userId">用户Id</param>
             <returns></returns>
        </member>
        <member name="M:Victornet.Common.FollowService.RemoveFollower(System.Int64,System.Int64)">
            <summary>
            移除用户的粉丝
            </summary>
            <param name="userId">用户Id</param>
            <param name="followerUserId">粉丝的用户Id</param>
        </member>
        <member name="M:Victornet.Common.FollowService.Get(System.Int64,System.Int64)">
            <summary>
            获取关注信息实体
            </summary>
            <param name="userId">用户Id</param>
            <param name="followedUserId">被关注用户Id</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.FollowService.GetNoteName(System.Int64,System.Int64)">
            <summary>
            获取用户的备注名称
            </summary>
            <param name="userId">用户Id</param>
            <param name="followedUserId">被关注用户Id</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.FollowService.GetTopFollowedUserIds(System.Int64,System.Int32,System.Nullable{System.Int64},System.Nullable{Victornet.Common.Follow_SortBy})">
            <summary>
            获取关注用户Id列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="topNumber">需要获取的记录数</param>
            <param name="groupId">群组Id</param>
            <param name="sortBy">排序规则</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.FollowService.GetPortionFollowedUserIds(System.Int64,System.Nullable{System.Int64},System.Nullable{Victornet.Common.Follow_SortBy})">
            <summary>
            获取部分关注用户Id列表（前1000条）
            </summary>
            <param name="userId">用户Id</param>
            <param name="groupId">群组Id</param>
            <param name="sortBy">排序规则</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.FollowService.GetFollowedUserIds(System.Int64,System.Nullable{System.Int64},System.Nullable{Victornet.Common.Follow_SortBy},System.Int32)">
             <summary>
             获取关注用户Id列表
             </summary>
             <param name="userId">用户Id</param>
             <param name="groupId"><para>用户分组Id</para><remarks>groupId为0时获取未分组的用户，为null时获取所有用户</remarks></param>
             <param name="sortBy">排序条件</param>
             <param name="pageIndex">页码</param>
            <remarks>
            groupId为null 则排序sortBy才生效
             </remarks>
        </member>
        <member name="M:Victornet.Common.FollowService.GetTopFollows(System.Int64,System.Int32,System.Nullable{System.Int64},System.Nullable{Victornet.Common.Follow_SortBy})">
            <summary>
            获取前N个关注实体集合
            </summary>
            <param name="userId">用户Id</param>
            <param name="topNumber">需要获取的记录数</param>
            <param name="groupId">群组Id</param>
            <param name="sortBy">排序规则</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.FollowService.GetFollows(System.Int64,System.Nullable{System.Int64},System.Nullable{Victornet.Common.Follow_SortBy})">
            <summary>
            获取关注实体集合
            </summary>
            <param name="userId">用户Id</param>
            <param name="groupId">群组Id</param>
            <param name="sortBy">排序规则</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.FollowService.GetFollowIdsForAt(System.String,System.Int64,System.Nullable{Victornet.Common.Follow_SortBy})">
            <summary>
            查询关注的用户Id（用于@用户）
            </summary>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.FollowService.GetFollows(System.Int64,System.Nullable{System.Int64},System.Nullable{Victornet.Common.Follow_SortBy},System.Int32)">
            <summary>
            获取关注实体分页集合
            </summary>
            <param name="userId">用户Id</param>
            <param name="groupId">群组Id</param>
            <param name="sortBy">排序规则</param>
            <param name="pageIndex">页码</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.FollowService.GetFollowerUserIds(System.Int64,Victornet.Common.Follow_SortBy,System.Int32)">
            <summary>
            获取粉丝Id列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="sortBy">查询条件</param>
            <param name="pageIndex">页码</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.FollowService.GetRecentFollowerUserIds(System.DateTime)">
            <summary>
            获取某个时间之后新增的粉丝Id列表，用于全文检索的定时任务
            </summary>
            <param name="lastStart">上次任务的开始时间</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.FollowService.GetFollowedUsers(System.Collections.Generic.IEnumerable{System.Int64})">
             <summary>
             批量获取关注用户Id列表，用于全文检索
             </summary>
             <param name="userIds">用户Id列表</param>
            <remarks>默认isQuietly为0，即不查询悄悄关注的</remarks>
        </member>
        <member name="M:Victornet.Common.FollowService.GetTopFollowerUserIds(System.Int64,Victornet.Common.Follow_SortBy,System.Int32)">
            <summary>
            获取粉丝Id列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="sortBy">查询条件</param>
            <param name="topNumber">要获取的数据记录数</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.FollowService.GetTopFollowedUserIdsFromUser(System.Int64,System.Int64,System.Int32)">
            <summary>
            根据被浏览用户获取我的关注用户中关注他的用户Id列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="toUserId">被浏览用户Id</param>
            <param name="topNumber">要获取的数据记录数</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.FollowService.GetTopFollowedUserIdsFromUser(System.Int64,System.Int64,System.Int32,System.Int32)">
            <summary>
            根据被浏览用户获取我的关注用户中关注他的用户Id列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="toUserId">被浏览用户Id</param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.FollowService.GetTopFollowedUserIdsOfFollowers(System.Int64,System.Int64,System.Int32)">
            <summary>
            获取用户粉丝的关注
            </summary>
            <param name="userId">空间主人用户Id</param>
            <param name="visitorId">访问者用户Id（用来排除当前访问者与访问者的关注用户）</param>
            <param name="topNumber">要获取的数据记录数</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.FollowService.GetTopFollowedUserIdsOfFollowers(System.Int64,System.Int64,System.Int32,System.Int32)">
            <summary>
             获取用户粉丝的关注
            </summary>
            <param name="userId"></param>
            <param name="visitorId"></param>
            <param name="topNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.FollowService.GetTogetherFollowedUserIds(System.Int64,System.Int64,System.Int32)">
            <summary>
            获取用户与被浏览用户的共同关注用户Id列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="toUserId">被判定用户Id</param>
            <param name="topNumber">获取数据的条数</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.FollowService.GetTogetherFollowedUserIds(System.Int64,System.Int64,System.Int32,System.Int32)">
            <summary>
            获取用户与被浏览用户的共同关注用户Id列表
            </summary>
            <param name="userId">用户Id</param>
            <param name="toUserId">被判定用户Id</param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.FollowService.CleanByUser(System.Int64)">
            <summary>
            清除用户关注
            </summary>
            <param name="userId">用户Id</param>
        </member>
        <member name="T:Victornet.Common.UserExtensionByFollow">
            <summary>
            为IUser扩展与关注用户相关的功能
            </summary>
        </member>
        <member name="M:Victornet.Common.UserExtensionByFollow.IsFollowed(Victornet.Common.IUser,System.Int64)">
            <summary>
            判断用户是否关注了某个用户
            </summary>
            <param name="user"><see cref="T:Victornet.Common.IUser"/></param>
            <param name="toUserId">待检测用户Id</param>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.ChangePointsEventArgs">
            <summary>
            用户更改积分的参数
            </summary>
        </member>
        <member name="M:Victornet.Common.ChangePointsEventArgs.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            更新积分
            </summary>
            <param name="experiencePoints">经验积分</param>
            <param name="reputationPoints">威望积分</param>
            <param name="tradePoints">交易积分</param>
            <param name="tradePoints2">交易积分2</param>
            <param name="tradePoints3">交易积分3</param>
            <param name="tradePoints4">交易积分4</param>
        </member>
        <member name="M:Victornet.Common.ChangePointsEventArgs.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            更新积分
            </summary>
            <param name="experiencePoints">经验积分</param>
            <param name="reputationPoints">威望积分</param>
            <param name="tradePoints">交易积分</param>
            <param name="tradePoints2">交易积分2</param>
            <param name="tradePoints3">交易积分3</param>
            <param name="tradePoints4">交易积分4</param>
            <param name="eventOperationType">事件类型</param>
        </member>
        <member name="F:Victornet.Common.ChangePointsEventArgs.experiencePoints">
            <summary>
            经验值
            </summary>
        </member>
        <member name="P:Victornet.Common.ChangePointsEventArgs.ExperiencePoints">
            <summary>
            经验值
            </summary>
        </member>
        <member name="F:Victornet.Common.ChangePointsEventArgs.reputationPoints">
            <summary>
            威望积分
            </summary>
        </member>
        <member name="P:Victornet.Common.ChangePointsEventArgs.ReputationPoints">
            <summary>
            威望积分
            </summary>
        </member>
        <member name="F:Victornet.Common.ChangePointsEventArgs.tradePoints">
            <summary>
            交易积分
            </summary>
        </member>
        <member name="P:Victornet.Common.ChangePointsEventArgs.TradePoints">
            <summary>
            交易积分
            </summary>
        </member>
        <member name="F:Victornet.Common.ChangePointsEventArgs.tradePoints2">
            <summary>
            交易积分2
            </summary>
        </member>
        <member name="P:Victornet.Common.ChangePointsEventArgs.TradePoints2">
            <summary>
            交易积分2
            </summary>
        </member>
        <member name="F:Victornet.Common.ChangePointsEventArgs.tradePoints3">
            <summary>
            交易积分3
            </summary>
        </member>
        <member name="P:Victornet.Common.ChangePointsEventArgs.TradePoints3">
            <summary>
            交易积分3
            </summary>
        </member>
        <member name="F:Victornet.Common.ChangePointsEventArgs.tradePoints4">
            <summary>
            交易积分4
            </summary>
        </member>
        <member name="P:Victornet.Common.ChangePointsEventArgs.TradePoints4">
            <summary>
            交易积分4
            </summary>
        </member>
        <member name="T:Victornet.Common.CreateUserEventArgs">
            <summary>
            创建用户事件参数
            </summary>
        </member>
        <member name="M:Victornet.Common.CreateUserEventArgs.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="password">用户密码</param>
        </member>
        <member name="P:Victornet.Common.CreateUserEventArgs.Password">
            <summary>
            用户密码
            </summary>
        </member>
        <member name="T:Victornet.Common.DeleteUserEventArgs">
            <summary>
            删除用户事件参数
            </summary>
        </member>
        <member name="M:Victornet.Common.DeleteUserEventArgs.#ctor(System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="takeOverUserName">用于接管删除用户时不能删除的内容(例如：用户创建的群组)</param>
            <param name="takeOverAll">是否接管被删除用户的所有内容</param>
        </member>
        <member name="P:Victornet.Common.DeleteUserEventArgs.TakeOverUserName">
            <summary>
            用于接管删除用户时不能删除的内容(例如：用户创建的群组)
            </summary>
        </member>
        <member name="P:Victornet.Common.DeleteUserEventArgs.TakeOverAll">
            <summary>
            是否接管被删除用户的所有内容
            </summary>
        </member>
        <member name="T:Victornet.Common.IMembershipService">
            <summary>
            用户账户业务逻辑接口（使用单点登录时需替换具体实现）
            </summary>
        </member>
        <member name="M:Victornet.Common.IMembershipService.CreateUser(Victornet.Common.IUser,System.String,Victornet.Common.UserCreateStatus@)">
            <summary>
            创建用户
            </summary>
            <param name="user">待创建的用户</param>
            <param name="password">密码</param>
            <param name="userCreateStatus">用户账号创建状态</param>
            <returns>创建成功返回IUser，创建失败返回null</returns>
        </member>
        <member name="M:Victornet.Common.IMembershipService.CreateUser(Victornet.Common.IUser,System.String,System.String,System.String,System.Boolean,Victornet.Common.UserCreateStatus@)">
            <summary>
            创建用户
            </summary>
            <param name="user">待创建的用户</param>
            <param name="password">密码</param>
            <param name="passwordQuestion">密码问题</param>
            <param name="passwordAnswer">密码答案</param>
            <param name="ignoreDisallowedUsername">是否忽略禁用的用户名称</param>
            <param name="userCreateStatus">用户账号创建状态</param>
            <returns>创建成功返回IUser，创建失败返回null</returns>
        </member>
        <member name="M:Victornet.Common.IMembershipService.DeleteUser(System.Int64,System.String,System.Boolean)">
            <summary>
            删除用户
            </summary>
            <param name="userId">用户Id</param>
            <param name="takeOverUserName">用于接管删除用户时不能删除的内容(例如：用户创建的群组)</param>
            <param name="isTakeOver">是否接管被删除用户可被接管的内容</param>
            <returns><see cref="T:Victornet.Common.UserDeleteStatus"/></returns>
        </member>
        <member name="M:Victornet.Common.IMembershipService.UpdateUser(Victornet.Common.IUser)">
            <summary>
            更新用户
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:Victornet.Common.IMembershipService.ActivateUsers(System.Collections.Generic.IEnumerable{System.Int64},System.Boolean)">
            <summary>
            批量激活用户
            </summary>
            <param name="userIds">用户Id集合</param>
            <param name="isActivated">激活状态</param>
        </member>
        <member name="M:Victornet.Common.IMembershipService.ChangePassword(System.String,System.String,System.String)">
            <summary>
            更新密码（需要验证当前密码）
            </summary>
            <param name="username">用户名</param>
            <param name="password">当前密码</param>
            <param name="newPassword">新密码</param>
            <returns>更新成功返回true，否则返回false</returns>
        </member>
        <member name="M:Victornet.Common.IMembershipService.ResetPassword(System.String,System.String)">
            <summary>
            重设密码（无需验证当前密码，供管理员或忘记密码时使用）
            </summary>
            <param name="username">用户名</param>
            <param name="newPassword">新密码</param>
            <returns>更新成功返回true，否则返回false</returns>
        </member>
        <member name="M:Victornet.Common.IMembershipService.ValidateUser(System.String,System.String)">
            <summary>
            验证提供的用户名和密码是否匹配
            </summary>
            <param name="username">用户名</param>
            <param name="password">密码</param>
            <returns>返回<see cref="T:Victornet.Common.UserLoginStatus"/></returns>
        </member>
        <member name="M:Victornet.Common.IMembershipService.SendRecoverPasswordEmail(System.String,System.String)">
            <summary>
            发送获取密码Email
            </summary>
            <remarks>
            由具体实现类来决定是否发送之前是否验证accountEmail与username的匹配性
            </remarks>
            <param name="accountEmail">账号密码</param>
            <param name="username">用户名</param>
            <returns>发送成功返回true，否则返回false</returns>
        </member>
        <member name="T:Victornet.Common.RewardAndPunishmentUserEventArgs">
            <summary>
            用户更改积分的参数
            </summary>
        </member>
        <member name="M:Victornet.Common.RewardAndPunishmentUserEventArgs.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            更新积分
            </summary>
            <param name="experiencePoints">经验积分</param>
            <param name="reputationPoints">威望积分</param>
            <param name="tradePoints">交易积分</param>
            <param name="tradePoints2">交易积分2</param>
            <param name="tradePoints3">交易积分3</param>
            <param name="tradePoints4">交易积分4</param>
        </member>
        <member name="M:Victornet.Common.RewardAndPunishmentUserEventArgs.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            更新积分
            </summary>
            <param name="experiencePoints">经验积分</param>
            <param name="reputationPoints">威望积分</param>
            <param name="tradePoints">交易积分</param>
            <param name="tradePoints2">交易积分2</param>
            <param name="tradePoints3">交易积分3</param>
            <param name="tradePoints4">交易积分4</param>
            <param name="eventOperationType">事件类型</param>
        </member>
        <member name="F:Victornet.Common.RewardAndPunishmentUserEventArgs.experiencePoints">
            <summary>
            经验值
            </summary>
        </member>
        <member name="P:Victornet.Common.RewardAndPunishmentUserEventArgs.ExperiencePoints">
            <summary>
            经验值
            </summary>
        </member>
        <member name="F:Victornet.Common.RewardAndPunishmentUserEventArgs.reputationPoints">
            <summary>
            威望积分
            </summary>
        </member>
        <member name="P:Victornet.Common.RewardAndPunishmentUserEventArgs.ReputationPoints">
            <summary>
            威望积分
            </summary>
        </member>
        <member name="F:Victornet.Common.RewardAndPunishmentUserEventArgs.tradePoints">
            <summary>
            交易积分
            </summary>
        </member>
        <member name="P:Victornet.Common.RewardAndPunishmentUserEventArgs.TradePoints">
            <summary>
            交易积分
            </summary>
        </member>
        <member name="F:Victornet.Common.RewardAndPunishmentUserEventArgs.tradePoints2">
            <summary>
            交易积分2
            </summary>
        </member>
        <member name="P:Victornet.Common.RewardAndPunishmentUserEventArgs.TradePoints2">
            <summary>
            交易积分2
            </summary>
        </member>
        <member name="F:Victornet.Common.RewardAndPunishmentUserEventArgs.tradePoints3">
            <summary>
            交易积分3
            </summary>
        </member>
        <member name="P:Victornet.Common.RewardAndPunishmentUserEventArgs.TradePoints3">
            <summary>
            交易积分3
            </summary>
        </member>
        <member name="F:Victornet.Common.RewardAndPunishmentUserEventArgs.tradePoints4">
            <summary>
            交易积分4
            </summary>
        </member>
        <member name="P:Victornet.Common.RewardAndPunishmentUserEventArgs.TradePoints4">
            <summary>
            交易积分4
            </summary>
        </member>
        <member name="T:Victornet.Common.UpdateRankEventArgs">
            <summary>
            更新用户等级
            </summary>
        </member>
        <member name="M:Victornet.Common.UpdateRankEventArgs.#ctor(System.Int32)">
            <summary>
            更新用户等级
            </summary>
            <param name="rank"></param>
        </member>
        <member name="M:Victornet.Common.UpdateRankEventArgs.#ctor(System.Int32,System.String)">
            <summary>
            更新用户等级
            </summary>
            <param name="rank"></param>
        </member>
        <member name="P:Victornet.Common.UpdateRankEventArgs.Rank">
            <summary>
            用户等级
            </summary>
        </member>
        <member name="T:Victornet.Common.PointCategory">
            <summary>
            积分类型实体类
            </summary>
        </member>
        <member name="M:Victornet.Common.PointCategory.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Victornet.Common.PointCategory.CategoryKey">
             <summary>
            积分类型标识
             </summary>
        </member>
        <member name="P:Victornet.Common.PointCategory.CategoryName">
             <summary>
            类型名称
             </summary>
        </member>
        <member name="P:Victornet.Common.PointCategory.Unit">
             <summary>
            单位名称
             </summary>
        </member>
        <member name="P:Victornet.Common.PointCategory.QuotaPerDay">
             <summary>
            每人每日该类限额（0表示无限制）
             </summary>
        </member>
        <member name="P:Victornet.Common.PointCategory.Description">
             <summary>
            描述
             </summary>
        </member>
        <member name="P:Victornet.Common.PointCategory.DisplayOrder">
             <summary>
            排序序号
             </summary>
        </member>
        <member name="T:Victornet.Common.PointCategoryKeys">
            <summary>
            积分类型配置类（便于使用PointCategoryKey）
            </summary>
        </member>
        <member name="M:Victornet.Common.PointCategoryKeys.Instance">
            <summary>
            获取该类的单例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.PointCategoryKeys.ExperiencePoints">
            <summary>
            经验
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.PointCategoryKeys.ReputationPoints">
            <summary>
            威望
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.PointCategoryKeys.TradePoints">
            <summary>
            金币
            </summary>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.PointItem">
            <summary>
            积分项目实体类
            </summary>
        </member>
        <member name="M:Victornet.Common.PointItem.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Victornet.Common.PointItem.ItemKey">
             <summary>
            积分项目标识
             </summary>
        </member>
        <member name="P:Victornet.Common.PointItem.ApplicationId">
             <summary>
            应用程序Id
             </summary>
        </member>
        <member name="P:Victornet.Common.PointItem.ItemName">
             <summary>
            项目名称
             </summary>
        </member>
        <member name="P:Victornet.Common.PointItem.DisplayOrder">
             <summary>
            排序序号
             </summary>
        </member>
        <member name="P:Victornet.Common.PointItem.ExperiencePoints">
             <summary>
            经验积分值
             </summary>
        </member>
        <member name="P:Victornet.Common.PointItem.ReputationPoints">
             <summary>
            威望积分值
             </summary>
        </member>
        <member name="P:Victornet.Common.PointItem.TradePoints">
             <summary>
            交易积分值
             </summary>
        </member>
        <member name="P:Victornet.Common.PointItem.TradePoints2">
             <summary>
            交易积分值2
             </summary>
        </member>
        <member name="P:Victornet.Common.PointItem.TradePoints3">
             <summary>
            交易积分值3
             </summary>
        </member>
        <member name="P:Victornet.Common.PointItem.TradePoints4">
             <summary>
            交易积分值4
             </summary>
        </member>
        <member name="P:Victornet.Common.PointItem.Description">
             <summary>
            描述
             </summary>
        </member>
        <member name="P:Victornet.Common.PointItem.NeedPointMessage">
            <summary>
            需要提示
            </summary>
        </member>
        <member name="T:Victornet.Common.PointItemKeys">
            <summary>
            积分类型配置类（便于使用PointItemKey）
            </summary>
            <remarks>
            各Application应该对该配置类的方法进行扩展
            </remarks>
        </member>
        <member name="M:Victornet.Common.PointItemKeys.Instance">
            <summary>
            获取该类的单例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.PointItemKeys.Register">
            <summary>
            注册
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.PointItemKeys.FirstUploadAvatar">
            <summary>
            首次上传头像
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.PointItemKeys.InviteUserRegister">
            <summary>
            邀请用户注册
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.PointItemKeys.FreeModeratedUser">
            <summary>
            被邀请用户解管制
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.PointItemKeys.DeleteInvitedUser">
            <summary>
            被邀请用户删除
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.PointItemKeys.FollowUser">
            <summary>
            关注用户
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.PointItemKeys.CancelFollowUser">
            <summary>
            取消关注用户
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.PointItemKeys.RecommendUser">
            <summary>
            用户被推荐
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.PointItemKeys.RecommendContent">
            <summary>
            内容被推荐
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.PointItemKeys.EssentialContent">
            <summary>
            内容被加精
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.PointItemKeys.StickyContent">
            <summary>
            内容被置顶
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.PointItemKeys.CreateComment">
            <summary>
            发表评论
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.PointItemKeys.DeleteComment">
            <summary>
            删除评论
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.PointItemKeys.CreateEvaluation">
            <summary>
            发表评价
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.PointItemKeys.CancelEvaluation">
            <summary>
            取消评价
            </summary>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.PointRecord">
            <summary>
            积分纪录实体类
            </summary>
        </member>
        <member name="M:Victornet.Common.PointRecord.#ctor">
            <summary>
            无参构造器
            </summary>
        </member>
        <member name="M:Victornet.Common.PointRecord.#ctor(System.Int64,Victornet.Common.PointItem,System.String)">
            <summary>
            带参构造器
            </summary>
            <param name="userId"></param>
            <param name="pointItem"></param>
            <param name="description"></param>
        </member>
        <member name="M:Victornet.Common.PointRecord.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Victornet.Common.PointRecord.RecordId">
             <summary>
            RecordId
             </summary>
        </member>
        <member name="P:Victornet.Common.PointRecord.UserId">
             <summary>
            用户Id
             </summary>
        </member>
        <member name="P:Victornet.Common.PointRecord.PointItemName">
             <summary>
            积分项目名称
             </summary>
        </member>
        <member name="P:Victornet.Common.PointRecord.Description">
             <summary>
            积分描述
             </summary>
        </member>
        <member name="P:Victornet.Common.PointRecord.ExperiencePoints">
             <summary>
            经验积分值
             </summary>
        </member>
        <member name="P:Victornet.Common.PointRecord.ReputationPoints">
             <summary>
            威望积分值
             </summary>
        </member>
        <member name="P:Victornet.Common.PointRecord.TradePoints">
             <summary>
            交易积分值
             </summary>
        </member>
        <member name="P:Victornet.Common.PointRecord.TradePoints2">
             <summary>
            交易积分值2
             </summary>
        </member>
        <member name="P:Victornet.Common.PointRecord.TradePoints3">
             <summary>
            交易积分值3
             </summary>
        </member>
        <member name="P:Victornet.Common.PointRecord.TradePoints4">
             <summary>
            交易积分值4
             </summary>
        </member>
        <member name="P:Victornet.Common.PointRecord.IsIncome">
             <summary>
            是否是收入
             </summary>
        </member>
        <member name="P:Victornet.Common.PointRecord.DateCreated">
             <summary>
            创建时间
             </summary>
        </member>
        <member name="T:Victornet.Common.PointService">
            <summary>
            积分业务逻辑类
            </summary>
        </member>
        <member name="M:Victornet.Common.PointService.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Victornet.Common.PointService.#ctor(Victornet.Repositories.IRepository{Victornet.Common.PointCategory},Victornet.Common.Repositories.IPointItemRepository,Victornet.Common.Repositories.IPointRecordRepository,Victornet.Common.Repositories.IPointStatisticRepository)">
            <summary>
            构造器
            </summary>
            <param name="pointCategoryRepository">积分分类仓储</param>
            <param name="pointItemRepository"></param>
            <param name="pointRecordRepository"></param>
            <param name="pointStatisticRepository"></param>
        </member>
        <member name="M:Victornet.Common.PointService.GenerateByRole(System.Int64,System.String,System.String,System.Boolean)">
            <summary>
            依据规则增减积分
            </summary>
            <param name="userId">增减积分的UserId</param>
            <param name="pointItemKey">积分项目标识</param>
            <param name="description">积分记录描述</param>
            <param name="needPointMessage">是否需要积分提醒</param>
        </member>
        <member name="M:Victornet.Common.PointService.Trade(System.Int64,System.Int64,System.Int32,System.String,System.Boolean)">
            <summary>
            积分交易
            </summary>
            <param name="payerUserId">支付积分人UserId</param>
            <param name="payeeUserId">接收积分人UserId</param>
            <param name="points">交易积分额</param>
            <param name="description">交易描述</param>
            <param name="isImmediate">是否即时交易</param>
            <param name="needPointMessage">是否需要积分提醒</param>
        </member>
        <member name="M:Victornet.Common.PointService.TradeToSystem(System.Int64,System.Int32,System.String,System.Boolean)">
            <summary>
            用户和系统进行积分交易（例如：用户购买邀请码，礼品兑换）
            </summary>
            <param name="payerUserId">支付积分人UserId</param>
            <param name="points">交易积分额</param>
            <param name="description">交易描述</param>
            <param name="isImmediate">是否即时交易</param>
        </member>
        <member name="M:Victornet.Common.PointService.Reward(System.Int64,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            奖惩用户
            </summary>
            <param name="userId">被奖惩用户</param>
            <param name="experiencePoints">经验</param>
            <param name="reputationPoints">威望</param>
            <param name="tradePoints">金币</param>
            <param name="description">奖惩理由</param>
        </member>
        <member name="M:Victornet.Common.PointService.CreateRecord(System.Int64,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            创建积分记录
            </summary>
            <param name="record"></param>
        </member>
        <member name="M:Victornet.Common.PointService.CleanPointRecords(System.Int32,System.Boolean)">
            <summary>
             清理积分记录
            </summary>
            <param name="beforeDays">清理beforeDays天以前的积分记录</param>
            <param name="cleanSystemPointRecords">是否也删除系统积分记录</param>
        </member>
        <member name="M:Victornet.Common.PointService.GetPointRecords(System.Nullable{System.Int64},System.Nullable{System.Boolean},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Int32)">
            <summary>
            查询用户积分记录
            </summary>
            <param name="userId">用户Id<remarks>系统积分的UserId=0</remarks></param>
            <param name="isIncome">是不是收入的积分</param>
            <param name="pointItemName">积分项目名称</param>
            <param name="startDate">开始时间</param>
            <param name="endDate">截止时间</param>
            <param name="pageSize">页码尺寸</param>
            <param name="pageIndex">当前页码</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.PointService.CleanPointStatistics(System.Int32)">
            <summary>
            删除beforeDays天以前的积分统计
            </summary>
            <param name="beforeDays">天数</param>
            <returns>清除的记录数</returns>
        </member>
        <member name="M:Victornet.Common.PointService.GetUserLastestRecord(System.Int64)">
            <summary>
            获取需要提醒的积分记录
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.PointService.TrackPointRecord(System.Int64,Victornet.Common.PointRecord)">
            <summary>
            跟踪用户的最新的积分记录
            </summary>
            <param name="userId"></param>
            <param name="pointRecord"></param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.PointService.UpdatePointItem(Victornet.Common.PointItem)">
            <summary>
            更新积分项目
            </summary>
            <param name="pointItem">待更新的积分项目</param>
        </member>
        <member name="M:Victornet.Common.PointService.GetPointItem(System.String)">
            <summary>
            获取积分项目
            </summary>
            <param name="itemKey">积分项目标识</param>
            <returns>返回itemKey对应的PointItem，如果没有找到返回null</returns>
        </member>
        <member name="M:Victornet.Common.PointService.GetPointItems(System.Nullable{System.Int32})">
            <summary>
            获取积分项目集合
            </summary>
            <param name="applicationId">应用Id</param>
            <returns>如果无满足条件的积分项目返回空集合</returns>
        </member>
        <member name="M:Victornet.Common.PointService.GetPointItemsOfIncome">
            <summary>
            获取增加积分的积分项目集合
            </summary>
            <returns>如果无满足条件的积分项目返回空集合</returns>
        </member>
        <member name="M:Victornet.Common.PointService.UpdatePointCategory(Victornet.Common.PointCategory)">
            <summary>
            更新积分类型
            </summary>
            <param name="pointCategory">待更新的积分类型</param>
        </member>
        <member name="M:Victornet.Common.PointService.GetPointCategory(System.String)">
            <summary>
            获取积分类型
            </summary>
            <param name="categoryKey">积分类型标识</param>
            <returns>返回itemKey对应的PointCategory，如果没有找到返回null</returns>
        </member>
        <member name="M:Victornet.Common.PointService.GetPointCategories">
            <summary>
            获取积分类型集合
            </summary>
            <returns>如果无数据则返回空集合</returns>
        </member>
        <member name="M:Victornet.Common.PointService.ChangeSystemTradePoints(System.Int64)">
            <summary>
            变更系统积分总额
            </summary>
            <param name="number">变更的积分值<remarks>减积分用负数</remarks></param>
        </member>
        <member name="M:Victornet.Common.PointService.GetPointCategory2PointsDictionary(Victornet.Common.PointItem)">
            <summary>
            根据指定积分分类获取积分项目中的积分
            </summary>
            <param name="pointItem">积分项目</param>
            <returns><remarks>key=PointCategory,value=Points</remarks>积分分类-积分字典</returns>
        </member>
        <member name="M:Victornet.Common.PointService.TrackPointRecordCacheKey(System.Int64)">
            <summary>
            积分提醒的Cachekey
            </summary>
            <param name="userId"></param>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.PointStatistic">
            <summary>
            积分统计实体类
            </summary>
        </member>
        <member name="M:Victornet.Common.PointStatistic.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Victornet.Common.PointStatistic.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Victornet.Common.PointStatistic.UserId">
             <summary>
            用户Id
             </summary>
        </member>
        <member name="P:Victornet.Common.PointStatistic.PointCategoryKey">
             <summary>
            积分类型标识
             </summary>
        </member>
        <member name="P:Victornet.Common.PointStatistic.Points">
             <summary>
            积分值
             </summary>
        </member>
        <member name="P:Victornet.Common.PointStatistic.StatisticalYear">
             <summary>
            统计年份
             </summary>
        </member>
        <member name="P:Victornet.Common.PointStatistic.StatisticalMonth">
             <summary>
            统计月份
             </summary>
        </member>
        <member name="P:Victornet.Common.PointStatistic.StatisticalDay">
             <summary>
            统计月份的第几天
             </summary>
        </member>
        <member name="T:Victornet.Common.Role">
            <summary>
            用户角色
            </summary>
        </member>
        <member name="P:Victornet.Common.Role.RoleName">
            <summary>
            角色名称
            </summary>
        </member>
        <member name="P:Victornet.Common.Role.FriendlyRoleName">
            <summary>
            角色友好名称（用于对外显示）
            </summary>
        </member>
        <member name="P:Victornet.Common.Role.IsBuiltIn">
            <summary>
            是否是系统内置的
            </summary>
        </member>
        <member name="P:Victornet.Common.Role.ConnectToUser">
            <summary>
            是否直接关联到用户（例如：版主、注册用户 无需直接赋给用户）
            </summary>
        </member>
        <member name="P:Victornet.Common.Role.ApplicationId">
            <summary>
            哪个应用模块
            </summary>
        </member>
        <member name="P:Victornet.Common.Role.IsPublic">
            <summary>
            是否对外显示
            </summary>
        </member>
        <member name="P:Victornet.Common.Role.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:Victornet.Common.Role.RoleImage">
            <summary>
            角色标识图片名称
            </summary>
        </member>
        <member name="P:Victornet.Common.Role.IsEnabled">
            <summary>
            是否启用
            </summary>
        </member>
        <member name="T:Victornet.Common.RoleNames">
            <summary>
            RoleName配置类（用于强类型获取RoleName）
            </summary>
        </member>
        <member name="M:Victornet.Common.RoleNames.Instance">
            <summary>
            获取单例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.RoleNames.SuperAdministrator">
            <summary>
            超级管理员
            </summary>
        </member>
        <member name="M:Victornet.Common.RoleNames.ContentAdministrator">
            <summary>
            内容管理员
            </summary>
        </member>
        <member name="M:Victornet.Common.RoleNames.RegisteredUsers">
            <summary>
            注册用户
            </summary>
        </member>
        <member name="M:Victornet.Common.RoleNames.ModeratedUser">
            <summary>
            管制用户
            </summary>
        </member>
        <member name="M:Victornet.Common.RoleNames.Anonymous">
            <summary>
            匿名用户
            </summary>
        </member>
        <member name="M:Victornet.Common.RoleNames.Owner">
            <summary>
            拥有者
            </summary>
        </member>
        <member name="M:Victornet.Common.RoleNames.Moderator">
            <summary>
            版主
            </summary>
        </member>
        <member name="M:Victornet.Common.RoleNames.OrganizationMember">
            <summary>
            组织成员
            </summary>
        </member>
        <member name="M:Victornet.Common.RoleNames.OrganizationManager">
            <summary>
            组织管理人
            </summary>
        </member>
        <member name="T:Victornet.Common.RoleService">
            <summary>
            用户角色业务逻辑类
            </summary>
        </member>
        <member name="M:Victornet.Common.RoleService.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Victornet.Common.RoleService.#ctor(Victornet.Repositories.IRepository{Victornet.Common.Role},Victornet.Common.Repositories.IUserInRoleRepository)">
            <summary>
            构造器
            </summary>
            <param name="roleRepository">Role仓储</param>
            <param name="userInRoleRepository"><see cref="T:Victornet.Common.Repositories.IUserInRoleRepository"/></param>
        </member>
        <member name="M:Victornet.Common.RoleService.Create(Victornet.Common.Role,System.IO.Stream)">
            <summary>
            添加角色
            </summary>
            <param name="role"><see cref="T:Victornet.Common.Role"/>要添加的角色</param>
            <param name="stream">输入流</param>
        </member>
        <member name="M:Victornet.Common.RoleService.Update(Victornet.Common.Role,System.IO.Stream)">
            <summary>
            更新角色
            </summary>
            <param name="role"><see cref="T:Victornet.Common.Role"/>要更新的角色</param>
            <param name="stream">输入流</param>
        </member>
        <member name="M:Victornet.Common.RoleService.Delete(System.String)">
            <summary>
            删除角色
            </summary>
            <param name="roleName">角色名称</param>
        </member>
        <member name="M:Victornet.Common.RoleService.Get(System.String)">
            <summary>
            获取Role
            </summary>
            <param name="roleName">角色名称</param>
            <returns><see cref="T:Victornet.Common.Role"/></returns>
        </member>
        <member name="M:Victornet.Common.RoleService.GetRoles">
            <summary>
            获取所有角色
            </summary>
            <remarks>
            按是否内置及角色名称排序
            </remarks>
            <returns>符合查询条件的Role集合</returns>
        </member>
        <member name="M:Victornet.Common.RoleService.GetRoles(System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            根据条件获取Role
            </summary>
            <param name="connectToUser">是否可关联到用户</param>
            <param name="applicationId">应用Id</param>
            <param name="isEnabled">是否启用</param>
            <returns>符合查询条件的Role集合</returns>
        </member>
        <member name="M:Victornet.Common.RoleService.GetRoles(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            根据角色名组装角色实体
            </summary>
            <param name="roleNames"></param>
            <returns>Role集合</returns>
        </member>
        <member name="M:Victornet.Common.RoleService.AddUserToRoles(System.Int64,System.Collections.Generic.List{System.String})">
            <summary>
            把用户加入到一组角色中
            </summary>  
        </member>
        <member name="M:Victornet.Common.RoleService.AddUserToRole(System.Int64,System.String)">
            <summary>
            给用户添加角色
            </summary>
            <param name="userId">用户Id</param>
            <param name="roleName">角色名称</param>
        </member>
        <member name="M:Victornet.Common.RoleService.RemoveUserFromRole(System.Int64,System.String)">
            <summary>
            移除用户的一个角色
            </summary>
            <param name="userId">用户Id</param>
            <param name="roleName">角色名称</param>
        </member>
        <member name="M:Victornet.Common.RoleService.RemoveUserRoles(System.Int64)">
            <summary>
            移除用户的所有角色
            </summary>
            <remarks>
            删除用户时使用
            </remarks>
        </member>
        <member name="M:Victornet.Common.RoleService.GetRoleNamesOfUser(System.Int64,System.Boolean)">
            <summary>
            获取用户的角色
            </summary>
            <param name="userId">用户Id</param>
            <param name="onlyPublic">是否仅获取对外公开的角色</param>
            <returns>返回用户的所有角色，如果该用户没有用户角色返回空集合</returns>
        </member>
        <member name="M:Victornet.Common.RoleService.IsUserInRoles(System.Int64,System.String[])">
            <summary>
            判断UserId是否至少拥有roleNames的一个用户角色
            </summary>
            <param name="userId">用户Id</param>
            <param name="roleNames">用户角色集合</param>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.UserExtensionByRole">
            <summary>
            为IUser扩展与角色相关的功能
            </summary>
        </member>
        <member name="M:Victornet.Common.UserExtensionByRole.IsSuperAdministrator(Victornet.Common.IUser)">
            <summary>
            判断用户是否为超级管理员
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.UserExtensionByRole.IsContentAdministrator(Victornet.Common.IUser)">
            <summary>
            判断用户是否为超级管理员
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.UserExtensionByRole.UserRoleNames(Victornet.Common.IUser,System.Boolean)">
            <summary>
            判断用户是否为超级管理员
            </summary>
            <param name="user"></param>
            <param name="onlyPublic">是否仅获取对外公开的角色</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.UserExtensionByRole.IsInRoles(Victornet.Common.IUser,System.String[])">
            <summary>
            判断用户是否至少含有requiredRoleNames的一个用户角色
            </summary>
            <param name="user"><see cref="T:Victornet.Common.IUser"/></param>
            <param name="requiredRoleNames">待检测用户角色集合</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.UserExtensionByRole.IsAllowEntryControlPannel(Victornet.Common.IUser)">
            <summary>
            判断用户是否可以进入后台
            </summary>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.UserInRole">
            <summary>
            用户和角色的关联关系
            </summary>
        </member>
        <member name="P:Victornet.Common.UserInRole.Id">
            <summary>
            Id
            </summary>
        </member>
        <member name="P:Victornet.Common.UserInRole.UserId">
            <summary>
            用户ID
            </summary>
        </member>
        <member name="P:Victornet.Common.UserInRole.RoleName">
            <summary>
            角色名称
            </summary>
        </member>
        <member name="T:Victornet.Common.IAuthenticationService">
            <summary>
            用于身份认证的接口
            </summary>
            <remarks>实例的生命周期为每HttpRequest</remarks>
        </member>
        <member name="M:Victornet.Common.IAuthenticationService.SignIn(Victornet.Common.IUser,System.Boolean)">
            <summary>
            登录
            </summary>
            <param name="user">登录的用户</param>
            <param name="rememberPassword">是否记住密码</param>
        </member>
        <member name="M:Victornet.Common.IAuthenticationService.SignOut">
            <summary>
            注销
            </summary>
        </member>
        <member name="M:Victornet.Common.IAuthenticationService.GetAuthenticatedUser">
            <summary>
            获取当前登录的用户
            </summary>
            <returns>
            当前用户未通过认证则返回null
            </returns>
        </member>
        <member name="T:Victornet.Common.IUser">
            <summary>
            用户实体接口
            </summary>
        </member>
        <member name="P:Victornet.Common.IUser.UserId">
            <summary>
            用户Id
            </summary>
        </member>
        <member name="P:Victornet.Common.IUser.UserName">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:Victornet.Common.IUser.UserType">
            <summary>
            用户类型
            </summary>
        </member>
        <member name="P:Victornet.Common.IUser.AccountEmail">
            <summary>
            账号邮箱
            </summary>
        </member>
        <member name="P:Victornet.Common.IUser.IsEmailVerified">
            <summary>
            账号邮箱是否通过验证
            </summary>
        </member>
        <member name="P:Victornet.Common.IUser.AccountMobile">
            <summary>
            账号手机号码
            </summary>
        </member>
        <member name="P:Victornet.Common.IUser.IsMobileVerified">
            <summary>
            手机号码是否通过验证
            </summary>
        </member>
        <member name="P:Victornet.Common.IUser.TrueName">
            <summary>
            真实姓名(或名称)
            </summary>
        </member>
        <member name="P:Victornet.Common.IUser.NickName">
            <summary>
            昵称
            </summary>
        </member>
        <member name="P:Victornet.Common.IUser.ForceLogin">
            <summary>
            是否强制用户登录
            </summary>
        </member>
        <member name="P:Victornet.Common.IUser.IsActivated">
            <summary>
            账号是否激活
            </summary>
        </member>
        <member name="P:Victornet.Common.IUser.DateCreated">
            <summary>
            创建日期
            </summary>
        </member>
        <member name="P:Victornet.Common.IUser.LastActivityTime">
            <summary>
            上传活动时间
            </summary>
        </member>
        <member name="P:Victornet.Common.IUser.LastAction">
            <summary>
            上次操作
            </summary>
        </member>
        <member name="P:Victornet.Common.IUser.IpCreated">
            <summary>
            注册用户时IP地址
            </summary>
        </member>
        <member name="P:Victornet.Common.IUser.IpLastActivity">
            <summary>
            上次操作时IP地址 
            </summary>
        </member>
        <member name="P:Victornet.Common.IUser.IsBanned">
            <summary>
            是否被封禁
            </summary>
        </member>
        <member name="P:Victornet.Common.IUser.IsModerated">
            <summary>
            是否被管制
            </summary>
        </member>
        <member name="P:Victornet.Common.IUser.DisplayName">
            <summary>
            对外显示名称
            </summary>
        </member>
        <member name="P:Victornet.Common.IUser.Avatar">
            <summary>
            头像(存储相对路径)
            </summary>
        </member>
        <member name="P:Victornet.Common.IUser.HasAvatar">
            <summary>
            是否有头像
            </summary>
        </member>
        <member name="P:Victornet.Common.IUser.ExperiencePoints">
            <summary>
            经验积分值
            </summary>
        </member>
        <member name="P:Victornet.Common.IUser.ReputationPoints">
            <summary>
            威望积分值
            </summary>
        </member>
        <member name="P:Victornet.Common.IUser.TradePoints">
            <summary>
            交易积分值
            </summary>
        </member>
        <member name="P:Victornet.Common.IUser.TradePoints2">
            <summary>
            交易积分值2
            </summary>
        </member>
        <member name="P:Victornet.Common.IUser.TradePoints3">
            <summary>
            交易积分值3
            </summary>
        </member>
        <member name="P:Victornet.Common.IUser.TradePoints4">
            <summary>
            交易积分值4
            </summary>
        </member>
        <member name="P:Victornet.Common.IUser.Rank">
            <summary>
            用户等级
            </summary>
        </member>
        <member name="P:Victornet.Common.IUser.FrozenTradePoints">
            <summary>
            冻结的交易积分
            </summary>
        </member>
        <member name="T:Victornet.Common.IUserService">
            <summary>
            用户业务逻辑接口
            </summary>
        </member>
        <member name="M:Victornet.Common.IUserService.BanUser(System.Int64,System.DateTime,System.String)">
            <summary>
            封禁用户
            </summary>
            <param name="userId">用户Id</param>
            <param name="banDeadline">封禁截止日期</param>
            <param name="banReason">封禁原因</param>
        </member>
        <member name="M:Victornet.Common.IUserService.UnbanUser(System.Int64)">
            <summary>
            解禁用户
            </summary>
            <param name="userId">用户Id</param>
        </member>
        <member name="M:Victornet.Common.IUserService.SetModeratedStatus(System.Collections.Generic.IEnumerable{System.Int64},System.Boolean)">
            <summary>
            设置用户管制状态
            </summary>
            <param name="userIds">用户Id集合</param>
            <param name="isModerated">是否被管制</param>
        </member>
        <member name="M:Victornet.Common.IUserService.ChangePoints(System.Int64,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            变更用户积分
            </summary>
            <param name="userId">用户Id</param>
            <param name="experiencePoints">经验积分值</param>
            <param name="reputationPoints">威望积分值</param>
            <param name="tradePoints">交易积分值</param>
            <param name="tradePoints2">交易积分值2</param>
            <param name="tradePoints3">交易积分值3</param>
            <param name="tradePoints4">交易积分值4</param>
        </member>
        <member name="M:Victornet.Common.IUserService.FreezeTradePoints(System.Int64,System.Int32)">
            <summary>
            冻结交易积分
            </summary>
            <param name="userId">用户Id</param>
            <param name="tradePoints">交易积分值</param>
        </member>
        <member name="M:Victornet.Common.IUserService.UnfreezeTradePoints(System.Int64,System.Int32)">
            <summary>
            解除冻结交易积分
            </summary>
            <param name="userId">用户Id</param>
            <param name="tradePoints">交易积分值</param>
        </member>
        <member name="M:Victornet.Common.IUserService.ReduceFrozenTradePoints(System.Int64,System.Int32)">
            <summary>
            减少冻结的交易积分（完成交易时使用）
            </summary>
            <param name="userId">用户Id</param>
            <param name="frozenTradePoints">需减少的冻结交易积分值</param>
        </member>
        <member name="M:Victornet.Common.IUserService.UpdateRank(System.Int64,System.Int32)">
            <summary>
            更新用户等级
            </summary>
            <param name="userId">用户Id</param>
            <param name="rank">更新后的等级</param>
        </member>
        <member name="M:Victornet.Common.IUserService.GetUserByNickName(System.String)">
            <summary>
            根据用户昵称获取用户
            </summary>
            <param name="nickName"></param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.IUserService.GetUser(System.Int64)">
            <summary>
            获取用户
            </summary>
            <param name="userId">用户ID</param>
        </member>
        <member name="M:Victornet.Common.IUserService.GetUser(System.String)">
            <summary>
            获取用户
            </summary>
            <param name="userName">用户名</param>
        </member>
        <member name="M:Victornet.Common.IUserService.FindUserByEmail(System.String)">
            <summary>
            根据账号邮箱获取用户
            </summary>
            <param name="accountEmail">账号邮箱</param>
        </member>
        <member name="M:Victornet.Common.IUserService.FindUserByMobile(System.String)">
            <summary>
            根据手机号获取用户
            </summary>
            <param name="accountMobile">手机号</param>
        </member>
        <member name="M:Victornet.Common.IUserService.GetUsers(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            依据UserId集合组装IUser集合
            </summary>
            <param name="userIds">用户Id集合</param>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.RegistrationMode">
            <summary>
            注册方式
            </summary>
        </member>
        <member name="F:Victornet.Common.RegistrationMode.All">
            <summary>
            允许所有途径的注册
            </summary>
        </member>
        <member name="F:Victornet.Common.RegistrationMode.Invitation">
            <summary>
            仅允许通过邀请注册
            </summary>
        </member>
        <member name="F:Victornet.Common.RegistrationMode.Disabled">
            <summary>
            禁止注册
            </summary>
        </member>
        <member name="T:Victornet.Common.AccountActivation">
            <summary>
            帐号激活方式
            </summary>
        </member>
        <member name="F:Victornet.Common.AccountActivation.Automatic">
            <summary>
            用户注册时自动激活
            </summary>
        </member>
        <member name="F:Victornet.Common.AccountActivation.Email">
            <summary>
            通过验证Email激活
            </summary>
        </member>
        <member name="F:Victornet.Common.AccountActivation.SMS">
            <summary>
            通过手机短信激活
            </summary>
        </member>
        <member name="F:Victornet.Common.AccountActivation.Administrator">
            <summary>
            管理员激活
            </summary>
        </member>
        <member name="T:Victornet.Common.UserPasswordFormat">
            <summary>
            用户密码存储格式
            </summary>
        </member>
        <member name="F:Victornet.Common.UserPasswordFormat.Clear">
            <summary>
            密码未加密
            </summary>
        </member>
        <member name="F:Victornet.Common.UserPasswordFormat.MD5">
            <summary>
            标准MD5加密
            </summary>
        </member>
        <member name="T:Victornet.Common.DisplayNameType">
            <summary>
            用什么名称作为用户的DisplayName对外显示
            </summary>
        </member>
        <member name="F:Victornet.Common.DisplayNameType.NicknameFirst">
            <summary>
            首先采用昵称作为DisplayName，如果昵称不存在则用真实姓名作为DisplayName，如果真实姓名也不存在则用UserName作为DisplayName
            </summary>
        </member>
        <member name="F:Victornet.Common.DisplayNameType.TrueNameFirst">
            <summary>
            首先采用真实姓名作为DisplayName，如果真实姓名不存在则用昵称作为DisplayName，如果昵称也不存在则用UserName作为DisplayName
            </summary>
        </member>
        <member name="T:Victornet.Common.UserCreateStatus">
            <summary>    
            用于创建用户账号时的返回值
            </summary>
        </member>
        <member name="F:Victornet.Common.UserCreateStatus.UnknownFailure">
            <summary>
            未知错误
            </summary>
        </member>
        <member name="F:Victornet.Common.UserCreateStatus.Created">
            <summary>
            创建成功
            </summary>
        </member>
        <member name="F:Victornet.Common.UserCreateStatus.DuplicateUsername">
            <summary>
            用户名重复
            </summary>
        </member>
        <member name="F:Victornet.Common.UserCreateStatus.DuplicateEmailAddress">
            <summary>
            Email重复
            </summary>
        </member>
        <member name="F:Victornet.Common.UserCreateStatus.DuplicateMobile">
            <summary>
            手机号重复
            </summary>
        </member>
        <member name="F:Victornet.Common.UserCreateStatus.DisallowedUsername">
            <summary>
            不允许的用户名
            </summary>
        </member>
        <member name="F:Victornet.Common.UserCreateStatus.InvalidQuestionAnswer">
            <summary>
            不合法的密码提示问题/答案
            </summary>
        </member>
        <member name="F:Victornet.Common.UserCreateStatus.InvalidPassword">
            <summary>
            不合法的密码
            </summary>
        </member>
        <member name="T:Victornet.Common.UserDeleteStatus">
            <summary>
            删除用户时的返回状态
            </summary>
        </member>
        <member name="F:Victornet.Common.UserDeleteStatus.Deleted">
            <summary>
            删除成功
            </summary>
        </member>
        <member name="F:Victornet.Common.UserDeleteStatus.InvalidTakeOverUsername">
            <summary>
            接管被删除用户内容的用户名不存在
            </summary>
        </member>
        <member name="F:Victornet.Common.UserDeleteStatus.DeletingUserNotFound">
            <summary>
            待删除的用户不存在
            </summary>
        </member>
        <member name="F:Victornet.Common.UserDeleteStatus.UnknownFailure">
            <summary>
            未知错误
            </summary>
        </member>
        <member name="T:Victornet.Common.UserLoginStatus">
            <summary>
            用户登录状态
            </summary>
        </member>
        <member name="F:Victornet.Common.UserLoginStatus.Success">
            <summary>
            通过身份验证，登录成功
            </summary>
        </member>
        <member name="F:Victornet.Common.UserLoginStatus.InvalidCredentials">
            <summary>
            用户名、密码不匹配
            </summary>
        </member>
        <member name="F:Victornet.Common.UserLoginStatus.NotActivated">
            <summary>
            帐户未激活
            </summary>
        </member>
        <member name="F:Victornet.Common.UserLoginStatus.Banned">
            <summary>
            帐户被封禁
            </summary>
        </member>
        <member name="F:Victornet.Common.UserLoginStatus.UnknownError">
            <summary>
            未知错误
            </summary>
        </member>
        <member name="T:Victornet.Common.OnlineUser">
            <summary>
            在线用户实体类
            </summary>
        </member>
        <member name="M:Victornet.Common.OnlineUser.New(Victornet.Common.IUser)">
            <summary>
            依据登录用户创建OnlineUser
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:Victornet.Common.OnlineUser.NewAnonymous(System.String)">
            <summary>
            依据匿名登录用户创建OnlineUser
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.OnlineUser.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Victornet.Common.OnlineUser.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Victornet.Common.OnlineUser.UserId">
             <summary>
            用户Id
             </summary>
        </member>
        <member name="P:Victornet.Common.OnlineUser.UserName">
             <summary>
            用户名
             </summary>
        </member>
        <member name="P:Victornet.Common.OnlineUser.DisplayName">
             <summary>
            对外显示的名称
             </summary>
        </member>
        <member name="P:Victornet.Common.OnlineUser.LastActivityTime">
             <summary>
            上次活动时间
             </summary>
        </member>
        <member name="P:Victornet.Common.OnlineUser.LastAction">
             <summary>
            上次操作
             </summary>
        </member>
        <member name="P:Victornet.Common.OnlineUser.Ip">
             <summary>
            IP
             </summary>
        </member>
        <member name="P:Victornet.Common.OnlineUser.DateCreated">
             <summary>
            创建时间
             </summary>
        </member>
        <member name="T:Victornet.Common.OnlineUserService">
            <summary>
            在线用户业务逻辑类
            </summary>
        </member>
        <member name="M:Victornet.Common.OnlineUserService.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Victornet.Common.OnlineUserService.#ctor(Victornet.Common.Repositories.IOnlineUserRepository,Victornet.Common.Repositories.IOnlineUserStatisticRepository)">
            <summary>
            构造器
            </summary>
            <param name="onlineUserRepository"></param>
            <param name="onlineUserStatisticRepository"></param>
        </member>
        <member name="M:Victornet.Common.OnlineUserService.TrackUser(Victornet.Common.IUser)">
            <summary>
            跟踪登录用户
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:Victornet.Common.OnlineUserService.TrackAnonymous(System.String)">
            <summary>
            跟踪匿名用户
            </summary>
            <param name="userName"></param>
        </member>
        <member name="M:Victornet.Common.OnlineUserService.Offline(System.String)">
            <summary>
            用户离线（注销时调用）
            </summary>
            <param name="userName"></param>
        </member>
        <member name="M:Victornet.Common.OnlineUserService.GetLoggedUsers">
            <summary>
            获取在线登录用户列表
            </summary>
            <remarks>key=UserName,value=OnlineUser</remarks>
        </member>
        <member name="M:Victornet.Common.OnlineUserService.IsOnline(System.String)">
            <summary>
            判断用户是否在线
            </summary>
            <param name="userName"></param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.OnlineUserService.GetAnonymousUsers">
            <summary>
            获取匿名登录用户列表
            </summary>
            <remarks>key=UserName,value=OnlineUser</remarks>
        </member>
        <member name="M:Victornet.Common.OnlineUserService.GetLoggedUserCount">
            <summary>
            获取在线用户用户数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.OnlineUserService.GetAnonymousCount">
            <summary>
            获取在线匿名用户数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.OnlineUserService.Refresh">
            <summary>
            刷新数据库
            </summary>
            <remarks>
            通过Task调用
            </remarks>
        </member>
        <member name="M:Victornet.Common.OnlineUserService.GetHighest">
            <summary>
            获取历史最高在线记录
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Common.OnlineUserService.GetOnlineUserStatistics(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            获取在线用户统计记录
            </summary>
            <param name="startDate">开始时间</param>
            <param name="endDate">截止时间</param>
            <returns></returns>
        </member>
        <member name="T:Victornet.Common.OnlineUserStatistic">
            <summary>
            在线用户实体类
            </summary>
        </member>
        <member name="M:Victornet.Common.OnlineUserStatistic.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Victornet.Common.OnlineUserStatistic.Id">
             <summary>
            Id
             </summary>
        </member>
        <member name="P:Victornet.Common.OnlineUserStatistic.LoggedUserCount">
             <summary>
            在线登录用户数
             </summary>
        </member>
        <member name="P:Victornet.Common.OnlineUserStatistic.AnonymousCount">
             <summary>
            在线匿名用户数
             </summary>
        </member>
        <member name="P:Victornet.Common.OnlineUserStatistic.UserCount">
             <summary>
            在线用户数
             </summary>
        </member>
        <member name="P:Victornet.Common.OnlineUserStatistic.DateCreated">
             <summary>
            创建时间
             </summary>
        </member>
        <member name="T:Victornet.Common.Tasks.OnlineUserTask">
            <summary>
            在线用户定期执行任务
            </summary>
            <remarks>
            分布式部署时，要求每个web服务器都要部署，不允许集中部署
            建议每5分钟执行一次
            </remarks>
        </member>
        <member name="M:Victornet.Common.Tasks.OnlineUserTask.Execute(Victornet.Tasks.TaskDetail)">
            <summary>
            任务执行的内容
            </summary>
            <param name="taskDetail">任务配置状态信息</param>
        </member>
        <member name="T:Victornet.Common.PresentArea">
            <summary>
            呈现区域实体
            </summary>
        </member>
        <member name="P:Victornet.Common.PresentArea.PresentAreaKey">
            <summary>
            呈现区域标识（与目录名称相同）
            </summary>
        </member>
        <member name="P:Victornet.Common.PresentArea.AllowMultipleInstances">
            <summary>
            是否可有多个实例
            </summary>
        </member>
        <member name="P:Victornet.Common.PresentArea.EnableThemes">
            <summary>
            是否启用皮肤
            </summary>
        </member>
        <member name="P:Victornet.Common.PresentArea.DefaultAppearanceID">
            <summary>
            默认皮肤（格式：PresentAreaKey,ThemeKey,AppearanceKey，与AppearanceID相同）
            </summary>
        </member>
        <member name="P:Victornet.Common.PresentArea.ThemeLocation">
            <summary>
            皮肤文件所在位置（以”~/目录”表示）
            </summary>
        </member>
        <member name="P:Victornet.Common.PresentArea.DefaultThemeKey">
            <summary>
            默认ThemeKey
            </summary>
        </member>
        <member name="P:Victornet.Common.PresentArea.DefaultAppearanceKey">
            <summary>
            默认AppearanceKey
            </summary>
        </member>
        <member name="M:Victornet.Common.PresentArea.SplitThemeKeyAndAppearanceKey">
            <summary>
            从DefaultAppearanceId分隔ThemeKey和AppearanceKey
            </summary>
        </member>
        <member name="T:Victornet.Common.PresentAreaKeysOfBuiltIn">
            <summary>
            内置的呈现区域标识
            </summary>
        </member>
        <member name="F:Victornet.Common.PresentAreaKeysOfBuiltIn.UserSpace">
            <summary>
            用户空间
            </summary>        
        </member>
        <member name="F:Victornet.Common.PresentAreaKeysOfBuiltIn.GroupSpace">
            <summary>
            群组
            </summary>
        </member>
        <member name="F:Victornet.Common.PresentAreaKeysOfBuiltIn.Channel">
            <summary>
            频道
            </summary>
        </member>
        <member name="F:Victornet.Common.PresentAreaKeysOfBuiltIn.ControlPanel">
            <summary>
            控制台（后台）
            </summary>
        </member>
        <member name="T:Victornet.Common.PresentAreaService">
            <summary>
            呈现区域业务逻辑
            </summary>
        </member>
        <member name="M:Victornet.Common.PresentAreaService.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Victornet.Common.PresentAreaService.#ctor(Victornet.Repositories.IRepository{Victornet.Common.PresentArea})">
            <summary>
            可设置repository的构造函数（主要用于测试用例）
            </summary>
            <param name="repository">PresentArea仓储</param>
        </member>
        <member name="M:Victornet.Common.PresentAreaService.Get(System.String)">
            <summary>
            根据PresentAreaKey获取呈现区域
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <returns>返回presentAreaKey对应的PresentArea，如果不存在返回null</returns>
        </member>
        <member name="M:Victornet.Common.PresentAreaService.GetAll">
            <summary>
            获取所有呈现区域
            </summary>
            <returns>返回所有呈现区域</returns>
        </member>
        <member name="M:Victornet.Common.PresentAreaService.Update(Victornet.Common.PresentArea)">
            <summary>
            更新呈现区域
            </summary>
            <param name="presentArea">PresentArea</param>        
        </member>
        <member name="T:Victornet.Common.ISettingsManager`1">
            <summary>
            设置管理器接口
            </summary>
            <typeparam name="TSettingsEntity"></typeparam>
        </member>
        <member name="M:Victornet.Common.ISettingsManager`1.Get">
            <summary>
            获取设置
            </summary>
            <returns>settings</returns>
        </member>
        <member name="M:Victornet.Common.ISettingsManager`1.Save(`0)">
            <summary>
            保存设置
            </summary>
            <param name="settings">settings</param>
        </member>
        <member name="T:Victornet.Common.SettingManager`1">
            <summary>
            设置管理器
            </summary>
            <typeparam name="TSettingsEntity"></typeparam>
        </member>
        <member name="T:Victornet.Common.SiteSettings">
            <summary>
            站点设置
            </summary>
            <remarks>安装站点时，必须设置MainSiteRootUrl</remarks>
        </member>
        <member name="P:Victornet.Common.SiteSettings.BeiAnScript">
            <summary>
            备案信息
            </summary>
        </member>
        <member name="P:Victornet.Common.SiteSettings.StatScript">
            <summary>
            页脚统计脚本
            </summary>
        </member>
        <member name="P:Victornet.Common.SiteSettings.Links">
            <summary>
            页脚链接
            </summary>
        </member>
        <member name="P:Victornet.Common.SiteSettings.SiteKey">
            <summary>
            站点唯一标识
            </summary>
        </member>
        <member name="P:Victornet.Common.SiteSettings.SiteName">
            <summary>
            站点名称
            </summary>
        </member>
        <member name="P:Victornet.Common.SiteSettings.SiteDescription">
            <summary>
            站点描述
            </summary>
        </member>
        <member name="P:Victornet.Common.SiteSettings.SearchMetaDescription">
            <summary>
            页面头信息的description
            </summary>
        </member>
        <member name="P:Victornet.Common.SiteSettings.SearchMetaKeyWords">
            <summary>
            页面头信息的KeyWord
            </summary>
        </member>
        <member name="P:Victornet.Common.SiteSettings.EnableMultilingual">
            <summary>
            是否启用国际化
            </summary>
        </member>
        <member name="P:Victornet.Common.SiteSettings.DefaultLanguage">
            <summary>
            系统默认语言
            </summary>
        </member>
        <member name="P:Victornet.Common.SiteSettings.MainSiteRootUrl">
            <summary>
            主站URL
            </summary>
            <remarks>
            安装程序（或者首次启动时）需要自动保存该地址
            </remarks>
        </member>
        <member name="P:Victornet.Common.SiteSettings.SiteTheme">
            <summary>
            站点主题
            </summary>
        </member>
        <member name="P:Victornet.Common.SiteSettings.SiteThemeAppearance">
            <summary>
            站点皮肤外观
            </summary>
        </member>
        <member name="P:Victornet.Common.SiteSettings.EnableAnonymousPosting">
            <summary>
            是否允许匿名发帖
            </summary>
            <remarks>
            包括所有的：评论、留言、回帖等
            </remarks>
        </member>
        <member name="P:Victornet.Common.SiteSettings.EnableAnonymousBrowse">
            <summary>
            是否允许匿名用户访问站点
            </summary>
        </member>
        <member name="P:Victornet.Common.SiteSettings.EnableSimpleHome">
            <summary>
            匿名用户默认访问
            </summary>
        </member>
        <member name="P:Victornet.Common.SiteSettings.ShareToThirdIsEnabled">
            <summary>
            分享到站外是否启用
            </summary>
        </member>
        <member name="P:Victornet.Common.SiteSettings.ShareToThirdDisplayType">
            <summary>
            分享到站外展示类型
            </summary>
        </member>
        <member name="P:Victornet.Common.SiteSettings.ShareDisplayIconSize">
            <summary>
            分享到站外图标形式展示大小
            </summary>
        </member>
        <member name="P:Victornet.Common.SiteSettings.ShareToThirdBusiness">
            <summary>
            分享到站外展示商家
            </summary>
        </member>
        <member name="T:Victornet.Common.ShareDisplayType">
            <summary>
            分享到站外展示形式
            </summary>
        </member>
        <member name="F:Victornet.Common.ShareDisplayType.Word">
            <summary>
            文字
            </summary>
        </member>
        <member name="F:Victornet.Common.ShareDisplayType.Icon">
            <summary>
            图标
            </summary>
        </member>
        <member name="F:Victornet.Common.ShareDisplayType.Sidebar">
            <summary>
            侧栏
            </summary>
        </member>
        <member name="T:Victornet.Common.ShareDisplayIconSize">
            <summary>
            分享到站外图标形式展示大小
            </summary>
        </member>
        <member name="F:Victornet.Common.ShareDisplayIconSize.Big">
            <summary>
            大图标
            </summary>
        </member>
        <member name="F:Victornet.Common.ShareDisplayIconSize.middle">
            <summary>
            中图标
            </summary>
        </member>
        <member name="F:Victornet.Common.ShareDisplayIconSize.small">
            <summary>
            小图标
            </summary>
        </member>
        <member name="T:Victornet.Search.CountTypesExtension">
            <summary>
            计数类型扩展
            </summary>
        </member>
        <member name="M:Victornet.Search.CountTypesExtension.SearchCount(Victornet.Common.CountTypes)">
            <summary>
            搜索次数
            </summary>
        </member>
        <member name="T:Victornet.Search.Repositories.ISearchedTermRepository">
            <summary>
            搜索热词仓储接口
            </summary>
        </member>
        <member name="M:Victornet.Search.Repositories.ISearchedTermRepository.InsertOrUpdate(System.String,System.String,System.Boolean)">
            <summary>
            添加或更新搜索热词
            </summary>
            <param name="searchTypeCode">搜索类型编码</param>
            <param name="term">搜索词</param>
        </member>
        <member name="M:Victornet.Search.Repositories.ISearchedTermRepository.GetManuals(System.String)">
            <summary>
            获取人工干预的搜索词
            </summary>
            <param name="searchTypeCode">搜索类型编码</param>
            <returns>符合条件的搜索词集合</returns>
        </member>
        <member name="M:Victornet.Search.Repositories.ISearchedTermRepository.GetManuals(System.String,System.String)">
            <summary>
            获取匹配的人工干预的搜索词
            </summary>
            <param name="keyword">要匹配的关键字</param>
            <param name="searchTypeCode">搜索类型编码</param>
            <returns>符合条件的搜索词集合</returns>
        </member>
        <member name="M:Victornet.Search.Repositories.ISearchedTermRepository.GetTops(System.Int32,System.String)">
            <summary>
            获取前N条最热的搜索词（仅非人工干预）
            </summary>
            <param name="topNumber">获取的数据条数</param>
            <param name="searchTypeCode">搜索类型编码</param>
            <returns>用户最多搜索的前topNumber的搜索词</returns>
        </member>
        <member name="M:Victornet.Search.Repositories.ISearchedTermRepository.GetTops(System.String,System.Int32,System.String)">
            <summary>
            获取匹配的前N条最热的搜索词（仅非人工干预）
            </summary>
            <param name="keyword">要匹配的关键字</param>
            <param name="topNumber">获取的数据条数</param>
            <param name="searchTypeCode">搜索类型编码</param>
            <returns>用户最多搜索的前topNumber的搜索词</returns>
        </member>
        <member name="M:Victornet.Search.Repositories.ISearchedTermRepository.Gets(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Int32,System.Int32)">
            <summary>
            分页获取搜索词（仅非人工干预）
            </summary>
            <param name="searchTypeCode">搜索类型编码</param>
            <param name="term">搜索词</param>
            <param name="startDate">开始日期</param>
            <param name="endDate">结束日期</param>
            <param name="isRealtime">是否实时缓存</param>
            <param name="pageIndex">当前页码</param>
            <param name="pageSize">每页条数</param>
            <returns>按条件检索的热词</returns>
        </member>
        <member name="M:Victornet.Search.Repositories.ISearchedTermRepository.JudgeDisplayOrder(System.Int64,System.Boolean@,System.Boolean@,System.Int64@,System.Int64@)">
            <summary>
            判定搜索词的DisplayOrder可以做哪些调整
            </summary>
            <param name="id">Id</param>
            <param name="isFirst">在人工干预同类型搜索词中是否处于首位</param>
            <param name="isLast">在人工干预同类型搜索词中是否处于末位</param>
            <param name="decreaseReferenceId">降低DisplayOrder时参照的Id</param>
            <param name="increaseReferenceId">增加DisplayOrder时参照的Id</param>
        </member>
        <member name="M:Victornet.Search.Repositories.ISearchedTermRepository.ChangeDisplayOrder(System.Int64,System.Int64)">
            <summary>
            变更搜索词的排列顺序
            </summary>
            <param name="id">待调整的Id</param>
            <param name="referenceId">参照Id</param>        
        </member>
        <member name="M:Victornet.Search.Repositories.ISearchedTermRepository.DeleteByEntityId(System.Object)">
            <summary>
            从数据库删除实体
            </summary>
            <param name="entityId">主键</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:Victornet.Search.Repositories.ISearchedTermRepository.Update(System.Int64,System.String,System.String)">
            <summary>
            更新管理员添加的搜索词
            </summary>
            <param name="id">搜索词Id</param>
            <param name="term">搜索词</param>
            <param name="searchTypeCode">搜索类型编码</param>
        </member>
        <member name="T:Victornet.Search.Repositories.ISearchHistoryRepository">
            <summary>
            搜索历史仓储接口
            </summary>
        </member>
        <member name="M:Victornet.Search.Repositories.ISearchHistoryRepository.Insert(System.Int64,System.String,System.String)">
            <summary>
            添加搜索历史
            </summary>
            <param name="userId">UserId</param>
            <param name="searchTypeCode">搜索类型编码</param>
            <param name="term">搜索词</param>
        </member>
        <member name="M:Victornet.Search.Repositories.ISearchHistoryRepository.Clear(System.Int64,System.String)">
            <summary>
            清除用户的搜索历史
            </summary>
            <param name="userId">UserId</param>
            <param name="searchTypeCode">搜索类型编码</param>        
        </member>
        <member name="M:Victornet.Search.Repositories.ISearchHistoryRepository.Gets(System.Int64,System.String)">
            <summary>
            获取用户的搜索历史
            </summary>
            <param name="userId">UserId</param>
            <param name="searchTypeCode">搜索类型编码</param>
            <returns>按使用时间倒序排列的搜索词</returns>
        </member>
        <member name="T:Victornet.Search.Repositories.SearchedTermRepository">
            <summary>
            搜索热词仓储
            </summary>
        </member>
        <member name="M:Victornet.Search.Repositories.SearchedTermRepository.InsertOrUpdate(System.String,System.String,System.Boolean)">
            <summary>
            添加或更新搜索热词
            </summary>
            <param name="searchTypeCode">搜索类型编码</param>
            <param name="term">搜索词</param>
            <param name="isAddedByAdministrator">是否由管理员添加</param>
        </member>
        <member name="M:Victornet.Search.Repositories.SearchedTermRepository.Update(System.Int64,System.String,System.String)">
            <summary>
            更新管理员添加的搜索词
            </summary>
            <param name="id">搜索词Id</param>
            <param name="term">搜索词</param>
            <param name="searchTypeCode">搜索类型编码</param>
        </member>
        <member name="M:Victornet.Search.Repositories.SearchedTermRepository.DeleteByEntityId(System.Object)">
            <summary>
            删除
            </summary>
            <param name="entityId">主键</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:Victornet.Search.Repositories.SearchedTermRepository.Delete(Victornet.Search.SearchedTerm)">
            <summary>
            删除
            </summary>
            <param name="entity">实体</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:Victornet.Search.Repositories.SearchedTermRepository.GetManuals(System.String)">
            <summary>
            获取人工干预的搜索词
            </summary>
            <param name="searchTypeCode">搜索类型编码</param>
            <returns>符合条件的搜索词集合</returns>
        </member>
        <member name="M:Victornet.Search.Repositories.SearchedTermRepository.GetManuals(System.String,System.String)">
            <summary>
            获取匹配的人工干预的搜索词
            </summary>
            <param name="keyword">要匹配的关键字</param>
            <param name="searchTypeCode">搜索类型编码</param>
            <returns>符合条件的搜索词集合</returns>
        </member>
        <member name="M:Victornet.Search.Repositories.SearchedTermRepository.GetTops(System.Int32,System.String)">
            <summary>
            获取前N条最热的搜索词（仅非人工干预）
            </summary>
            <param name="topNumber">获取的数据条数</param>
            <param name="searchTypeCode">搜索类型编码</param>
            <returns>用户最多搜索的前topNumber的搜索词</returns>
        </member>
        <member name="M:Victornet.Search.Repositories.SearchedTermRepository.GetTops(System.String,System.Int32,System.String)">
            <summary>
            获取匹配的前N条最热的搜索词（仅非人工干预）
            </summary>
            <param name="keyword">要匹配的关键字</param>
            <param name="topNumber">获取的数据条数</param>
            <param name="searchTypeCode">搜索类型编码</param>
            <returns>用户最多搜索的前topNumber的搜索词</returns>
        </member>
        <member name="M:Victornet.Search.Repositories.SearchedTermRepository.Gets(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Int32,System.Int32)">
            <summary>
            分页获取搜索词（仅非人工干预）
            </summary>
            <param name="searchTypeCode">搜索类型编码</param>
            <param name="term">搜索词</param>
            <param name="startDate">开始日期</param>
            <param name="endDate">结束日期</param>
            <param name="isRealtime">是否实时缓存</param>
            <param name="pageIndex">当前页码</param>
            <param name="pageSize">每页条数</param>
            <returns>按条件检索的热词</returns>
        </member>
        <member name="M:Victornet.Search.Repositories.SearchedTermRepository.JudgeDisplayOrder(System.Int64,System.Boolean@,System.Boolean@,System.Int64@,System.Int64@)">
            <summary>
            判定搜索词的DisplayOrder可以做哪些调整
            </summary>
            <param name="id">Id</param>
            <param name="isFirst">在人工干预同类型搜索词中是否处于首位</param>
            <param name="isLast">在人工干预同类型搜索词中是否处于末位</param>
            <param name="decreaseReferenceId">降低DisplayOrder时参照的Id</param>
            <param name="increaseReferenceId">增加DisplayOrder时参照的Id</param>
        </member>
        <member name="M:Victornet.Search.Repositories.SearchedTermRepository.ChangeDisplayOrder(System.Int64,System.Int64)">
            <summary>
            变更搜索词的排列顺序
            </summary>
            <param name="id">待调整的Id</param>
            <param name="referenceId">参照Id</param>        
        </member>
        <member name="T:Victornet.Search.Repositories.SearchHistoryRepository">
            <summary>
            搜索历史仓储
            </summary>
        </member>
        <member name="M:Victornet.Search.Repositories.SearchHistoryRepository.#ctor(System.Web.HttpContextBase)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Victornet.Search.Repositories.SearchHistoryRepository.#ctor(System.Web.HttpContext)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Victornet.Search.Repositories.SearchHistoryRepository.Insert(System.Int64,System.String,System.String)">
            <summary>
            添加搜索历史
            </summary>
            <param name="userId">UserId</param>
            <param name="searchTypeCode">搜索类型编码</param>
            <param name="term">搜索词</param>
        </member>
        <member name="M:Victornet.Search.Repositories.SearchHistoryRepository.Clear(System.Int64,System.String)">
            <summary>
            清除用户的搜索历史
            </summary>
            <param name="userId">UserId</param>
            <param name="searchTypeCode">搜索类型编码</param>   
        </member>
        <member name="M:Victornet.Search.Repositories.SearchHistoryRepository.Gets(System.Int64,System.String)">
            <summary>
            获取用户的搜索历史
            </summary>
            <param name="userId">UserId</param>
            <param name="searchTypeCode">搜索类型编码</param>
            <returns>按使用时间倒序排列的搜索词</returns>
        </member>
        <member name="M:Victornet.Search.Repositories.SearchHistoryRepository.GetCookie(System.Int64,System.String)">
            <summary>
            获取HttpCookie
            </summary>
            <param name="userId"></param>
            <param name="searchTypeCode"></param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Search.Repositories.SearchHistoryRepository.WriteCookie(System.Web.HttpCookie)">
            <summary>
            写入cookie
            </summary>
            <remarks>cookie过期时间为1年</remarks>
        </member>
        <member name="T:Victornet.Search.SearchedTerm">
            <summary>
            搜索词
            </summary>
        </member>
        <member name="M:Victornet.Search.SearchedTerm.New">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="P:Victornet.Search.SearchedTerm.Id">
             <summary>
            Id（使用Id生成器自动生成）
             </summary>
        </member>
        <member name="P:Victornet.Search.SearchedTerm.Term">
             <summary>
            搜索词
             </summary>
        </member>
        <member name="P:Victornet.Search.SearchedTerm.SearchTypeCode">
             <summary>
            搜索类型编码
             </summary>
        </member>
        <member name="P:Victornet.Search.SearchedTerm.IsAddedByAdministrator">
             <summary>
            是否由管理员添加（人工干预）
             </summary>
        </member>
        <member name="P:Victornet.Search.SearchedTerm.DisplayOrder">
             <summary>
            排序字段（默认与Id相同）
             </summary>
        </member>
        <member name="P:Victornet.Search.SearchedTerm.DateCreated">
             <summary>
            创建时间
             </summary>
        </member>
        <member name="P:Victornet.Search.SearchedTerm.LastModified">
             <summary>
            最后使用日期
             </summary>
        </member>
        <member name="T:Victornet.Search.SearchedTermService">
            <summary>
            搜索热词业务逻辑类
            </summary>
        </member>
        <member name="M:Victornet.Search.SearchedTermService.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Victornet.Search.SearchedTermService.#ctor(Victornet.Search.Repositories.ISearchedTermRepository)">
            <summary>
            构造器
            </summary>
            <param name="searchedTermRepository">SearchedTermRepository仓储</param>
        </member>
        <member name="M:Victornet.Search.SearchedTermService.SearchTerm(System.String,System.String)">
            <summary>
            搜索词记录及计数
            </summary>
            <param name="searchTypeCode">搜索类型编码</param>
            <param name="term">搜索词</param>
        </member>
        <member name="M:Victornet.Search.SearchedTermService.CreateByAdministrator(System.String,System.String)">
            <summary>
            管理员添加搜索词
            </summary>
            <param name="searchTypeCode"></param>
            <param name="term"></param>
        </member>
        <member name="M:Victornet.Search.SearchedTermService.Update(System.Int64,System.String,System.String)">
            <summary>
            更新管理员添加的搜索词
            </summary>
            <param name="id">搜索词Id</param>
            <param name="term">搜索词</param>
            <param name="searchTypeCode">搜索类型编码</param>
        </member>
        <member name="M:Victornet.Search.SearchedTermService.ChangeDisplayOrder(System.Int64,System.Int64)">
            <summary>
            变更搜索词的排列顺序
            </summary>
            <param name="id">待调整的Id</param>
            <param name="referenceId">参照Id</param>        
        </member>
        <member name="M:Victornet.Search.SearchedTermService.Delete(System.Int64)">
            <summary>
            删除搜索词
            </summary>
            <param name="id">搜索词Id</param>
        </member>
        <member name="M:Victornet.Search.SearchedTermService.JudgeDisplayOrder(System.Int64,System.Boolean@,System.Boolean@,System.Int64@,System.Int64@)">
            <summary>
            判定搜索词的DisplayOrder可以做哪些调整
            </summary>
            <param name="id">Id</param>
            <param name="isFirst">在人工干预同类型搜索词中是否处于首位</param>
            <param name="isLast">在人工干预同类型搜索词中是否处于末位</param>
            <param name="decreaseReferenceId">降低DisplayOrder时参照的Id</param>
            <param name="increaseReferenceId">增加DisplayOrder时参照的Id</param>
        </member>
        <member name="M:Victornet.Search.SearchedTermService.GetManuals(System.String)">
            <summary>
            获取人工干预的搜索词
            </summary>
            <remarks>按DisplayOrder正序排列</remarks>
            <returns></returns>
        </member>
        <member name="M:Victornet.Search.SearchedTermService.GetManuals(System.String,System.String)">
            <summary>
            获取匹配的人工干预的搜索词
            </summary>
            <remarks>按DisplayOrder正序排列</remarks>
            <returns></returns>
        </member>
        <member name="M:Victornet.Search.SearchedTermService.GetTops(System.Int32,System.String)">
            <summary>
            获取前N条最热的搜索词（仅非人工干预）
            </summary>
            <remarks>按DisplayOrder正序排列</remarks>
            <param name="topNumber">获取的数据条数</param>
            <param name="searchTypeCode">搜索类型编码</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Search.SearchedTermService.GetTops(System.String,System.Int32,System.String)">
            <summary>
            获取匹配的前N条最热的搜索词（仅非人工干预）
            </summary>
            <param name="keyword">要匹配的关键字</param>
            <param name="topNumber">获取的数据条数</param>
            <param name="searchTypeCode">搜索类型编码</param>
            <returns>用户最多搜索的前topNumber的搜索词</returns>
        </member>
        <member name="M:Victornet.Search.SearchedTermService.Gets(System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Int32,System.Int32)">
            <summary>
            分页获取搜索词（仅非人工干预）
            </summary>
            <param name="searchTypeCode">搜索类型编码</param>
            <param name="term">搜索词关键字（支持右半模糊搜索）</param>
            <param name="startDate">开始时间</param>
            <param name="endDate">截止时间</param>
            <param name="isRealtime">是否需要即时缓存</param>
            <param name="pageSize">每页条数</param>
            <param name="pageIndex">页码</param>
            <returns></returns>
        </member>
        <member name="T:Victornet.Search.SearchHistoryService">
            <summary>
            搜索历史业务逻辑类
            </summary>
        </member>
        <member name="M:Victornet.Search.SearchHistoryService.#ctor">
            <summary>
            构造器
            </summary>
        </member>
        <member name="M:Victornet.Search.SearchHistoryService.#ctor(Victornet.Search.Repositories.ISearchHistoryRepository)">
            <summary>
            构造器
            </summary>
            <param name="searchHistoryRepository">SearchHistory仓储</param>        
        </member>
        <member name="M:Victornet.Search.SearchHistoryService.SearchTerm(System.Int64,System.String,System.String)">
            <summary>
            记录到搜索记录
            </summary>
            <param name="userId">UserId</param>
            <param name="searchTypeCode">搜索类型编码</param>
            <param name="term">搜索词</param>
        </member>
        <member name="M:Victornet.Search.SearchHistoryService.Clear(System.Int64,System.String)">
            <summary>
            清除用户的搜索历史
            </summary>
            <param name="userId">UserId</param>
            <param name="searchTypeCode">搜索类型编码</param>
        </member>
        <member name="M:Victornet.Search.SearchHistoryService.Gets(System.Int64,System.String)">
            <summary>
            获取用户最近搜索历史
            </summary>
            <param name="userId">UserId</param>        
            <param name="searchTypeCode">搜索类型编码</param>
            <returns>按使用时间倒序排列的搜索词</returns>
        </member>
        <member name="M:Victornet.Email.EmailBuilder.Resolve(System.String,System.Object,System.Collections.Generic.IEnumerable{System.String},System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            反编译解决乱码ing
            </summary>
            <param name="templateName"></param>
            <param name="model"></param>
            <param name="to"></param>
            <param name="from"></param>
            <param name="cc"></param>
            <param name="bcc"></param>
            <returns></returns>
        </member>
        <member name="T:Victornet.DIContainer">
            <summary>
            依赖注入容器
            </summary>
            <remarks>
            对Autofac进行封装
            </remarks>
        </member>
        <member name="M:Victornet.DIContainer.RegisterContainer(Autofac.IContainer)">
            <summary>
            注册DIContainer
            </summary>
            <param name="container">Autofac.IContainer</param>
        </member>
        <member name="M:Victornet.DIContainer.Resolve``1">
            <summary>
            按参数获取组件
            </summary>
            <typeparam name="TService">组件类型</typeparam>
            <returns>返回获取的组件</returns>
        </member>
        <member name="M:Victornet.DIContainer.Resolve``1(Autofac.Core.Parameter[])">
            <summary>
            
            </summary>
            <typeparam name="TService">组件类型</typeparam>
            <param name="parameters">Autofac.Core.Parameter</param>
            <returns>返回获取的组件</returns>
        </member>
        <member name="M:Victornet.DIContainer.ResolveKeyed``1(System.Object)">
            <summary>
            按key获取组件
            </summary>
            <typeparam name="TService">组件类型</typeparam>
            <param name="serviceKey">枚举类型的Key</param>
            <returns>返回获取的组件</returns>
        </member>
        <member name="M:Victornet.DIContainer.ResolveNamed``1(System.String)">
            <summary>
            按名称获取组件
            </summary>
            <typeparam name="TService">组件类型</typeparam>
            <param name="serviceName">组件名称</param>
            <returns>返回获取的组件</returns>
        </member>
        <member name="M:Victornet.DIContainer.ResolvePerHttpRequest``1">
            <summary>
            获取InstancePerHttpRequest的组件
            </summary>
            <typeparam name="TService">组件类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:Victornet.Caching.CacheSettingAttribute.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="enableCache">是否使用缓存</param>
        </member>
        <member name="P:Victornet.Caching.CacheSettingAttribute.EnableCache">
            <summary>
            是否使用缓存
            </summary>
        </member>
        <member name="P:Victornet.Caching.CacheSettingAttribute.ExpirationPolicy">
            <summary>
            缓存过期策略
            </summary>
        </member>
        <member name="P:Victornet.Caching.CacheSettingAttribute.PropertyNameOfBody">
            <summary>
            实体正文缓存对应的属性名称（如果不需单独存储实体正文缓存，则不要设置该属性）
            </summary>
        </member>
        <member name="P:Victornet.Caching.CacheSettingAttribute.PropertyNamesOfArea">
            <summary>
            缓存分区的属性名称（可以设置多个，用逗号分隔）
            </summary>
            <remarks>
            必须是实体包含的属性，自动维护维护这些分区属性的版本号
            </remarks>
        </member>
        <member name="F:Victornet.Caching.CacheVersionType.None">
            <summary>
            不使用缓存版本
            </summary>
        </member>
        <member name="F:Victornet.Caching.CacheVersionType.GlobalVersion">
            <summary>
            使用全局缓存版本
            </summary>
        </member>
        <member name="F:Victornet.Caching.CacheVersionType.AreaVersion">
            <summary>
            使用分区缓存版本
            </summary>
        </member>
        <member name="F:Victornet.Caching.CachingExpirationType.Invariable">
            <summary>
            永久不变的
            </summary>
        </member>
        <member name="F:Victornet.Caching.CachingExpirationType.Stable">
            <summary>
            稳定数据
            </summary>
            <remarks>
            例如： Resources.xml/Area/School
            </remarks>
        </member>
        <member name="F:Victornet.Caching.CachingExpirationType.RelativelyStable">
            <summary>
            相对稳定
            </summary>
            <remarks>
            例如：权限配置、审核配置
            </remarks>
        </member>
        <member name="F:Victornet.Caching.CachingExpirationType.UsualSingleObject">
            <summary>
            常用的单个对象
            </summary>
            <remarks>
            例如： 用户、圈子
            </remarks>
        </member>
        <member name="F:Victornet.Caching.CachingExpirationType.UsualObjectCollection">
            <summary>
            常用的对象集合
            </summary>
            <remarks>
            例如： 用户的朋友
            </remarks>
        </member>
        <member name="F:Victornet.Caching.CachingExpirationType.SingleObject">
            <summary>
            单个对象
            </summary>
            <remarks>
            例如： 博文、帖子
            </remarks>
        </member>
        <member name="F:Victornet.Caching.CachingExpirationType.ObjectCollection">
            <summary>
            对象集合
            </summary>
            <remarks>
            例如： 用于分页的私信数据
            </remarks>
        </member>
        <member name="M:Victornet.Caching.DefaultCacheService.#ctor(Victornet.Caching.ICache,System.Single)">
            <summary>
            构造函数(仅本机缓存)
            </summary>
            <param name="cache">本机缓存</param>
            <param name="cacheExpirationFactor">缓存过期时间因子</param>
        </member>
        <member name="M:Victornet.Caching.DefaultCacheService.#ctor(Victornet.Caching.ICache,Victornet.Caching.ICache,System.Single,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="cache">缓存</param>
            <param name="localCache">本机缓存</param>
            <param name="cacheExpirationFactor">缓存过期时间因子</param>
            <param name="enableDistributedCache">是否启用分布式缓存</param>
        </member>
        <member name="M:Victornet.Caching.DefaultCacheService.Add(System.String,System.Object,System.TimeSpan)">
            <summary>
            添加到缓存
            </summary>
            <param name="cacheKey">缓存项标识</param>
            <param name="value">缓存项</param>
            <param name="timeSpan">缓存失效时间间隔</param>
        </member>
        <member name="M:Victornet.Caching.DefaultCacheService.Add(System.String,System.Object,Victornet.Caching.CachingExpirationType)">
            <summary>
            添加到缓存
            </summary>
            <param name="cacheKey">缓存项标识</param>
            <param name="value">缓存项</param>
            <param name="cachingExpirationType">缓存期限类型</param>
        </member>
        <member name="M:Victornet.Caching.DefaultCacheService.Clear">
            <summary>
            清空缓存
            </summary>
        </member>
        <member name="M:Victornet.Caching.DefaultCacheService.Get(System.String)">
            <summary>
            从缓存获取
            </summary>
            <param name="cacheKey">缓存项标识</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Caching.DefaultCacheService.Get``1(System.String)">
            <summary>
            从缓存获取
            </summary>
            <typeparam name="T"></typeparam>
            <param name="cacheKey">缓存项标识</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Caching.DefaultCacheService.GetFromFirstLevel(System.String)">
            <summary>
            从一层缓存获取缓存项
            </summary>
            <param name="cacheKey">缓存项标识</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Caching.DefaultCacheService.GetFromFirstLevel``1(System.String)">
            <summary>
            从一层缓存获取缓存项
            </summary>
            <typeparam name="T">缓存项类型</typeparam>
            <param name="cacheKey">缓存项标识</param>
            <returns>返回cacheKey对应的缓存项，如果不存在则返回null</returns>
            <remarks>
            在启用分布式缓存的情况下，指穿透二级缓存从一层缓存（分布式缓存）读取
            </remarks>
        </member>
        <member name="M:Victornet.Caching.DefaultCacheService.MarkDeletion(System.String,Victornet.IEntity,Victornet.Caching.CachingExpirationType)">
            <summary>
            标识为删除
            </summary>
            <param name="cacheKey">缓存项标识</param>
            <param name="entity">缓存的实体</param>
            <param name="cachingExpirationType">缓存期限类型</param>
        </member>
        <member name="M:Victornet.Caching.DefaultCacheService.Remove(System.String)">
            <summary>
            移除缓存
            </summary>
            <param name="cacheKey">缓存项标识</param>
        </member>
        <member name="M:Victornet.Caching.DefaultCacheService.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            添加或更新缓存
            </summary>
            <param name="cacheKey">缓存项标识</param>
            <param name="value">缓存项</param>
            <param name="timeSpan">缓存失效时间间隔</param>
        </member>
        <member name="M:Victornet.Caching.DefaultCacheService.Set(System.String,System.Object,Victornet.Caching.CachingExpirationType)">
            <summary>
            添加或更新缓存
            </summary>
            <param name="cacheKey">缓存项标识</param>
            <param name="value">缓存项</param>
            <param name="cachingExpirationType">缓存期限类型</param>
        </member>
        <member name="P:Victornet.Caching.DefaultCacheService.EnableDistributedCache">
            <summary>
            是否启用分布式缓存
            </summary>
        </member>
        <member name="F:Victornet.Caching.EntityCacheExpirationPolicies.Stable">
            <summary>
            稳定数据
            </summary>
            <remarks>
            例如： Area/School
            </remarks>
        </member>
        <member name="F:Victornet.Caching.EntityCacheExpirationPolicies.Usual">
            <summary>
            常用的单个实体
            </summary>
            <remarks>
            例如： 用户、圈子
            </remarks>
        </member>
        <member name="F:Victornet.Caching.EntityCacheExpirationPolicies.Normal">
            <summary>
            单个实体
            </summary>
            <remarks>
            例如： 博文、帖子
            </remarks>
        </member>
        <member name="T:Victornet.Caching.ICache">
            <summary>
            缓存接口
            </summary>
        </member>
        <member name="M:Victornet.Caching.ICache.Add(System.String,System.Object,System.TimeSpan)">
            <summary>
            加入缓存项
            </summary>
            <param name="key">缓存项标识</param>
            <param name="value">缓存项</param>
            <param name="timeSpan">缓存失效时间</param>
        </member>
        <member name="M:Victornet.Caching.ICache.AddWithFileDependency(System.String,System.Object,System.String)">
            <summary>
            加入依赖物理文件的缓存项
            </summary>
            <param name="key">缓存项标识</param>
            <param name="value">缓存项</param>
            <param name="fullFileNameOfFileDependency">主要应用于配置文件或配置项</param>
        </member>
        <member name="M:Victornet.Caching.ICache.Clear">
            <summary>
            清空缓存
            </summary>
        </member>
        <member name="M:Victornet.Caching.ICache.Get(System.String)">
            <summary>
            获取缓存项
            </summary>
            <param name="cacheKey">缓存项标识</param>
            <returns>返回cacheKey对应的缓存项，如果不存在则返回null</returns>
        </member>
        <member name="M:Victornet.Caching.ICache.MarkDeletion(System.String,System.Object,System.TimeSpan)">
            <summary>
            标识删除
            </summary>
            <param name="key">缓存项标识</param>
            <param name="value">缓存项</param>
            <param name="timeSpan">缓存失效时间间隔</param>
            <remarks>
            由于DB读写分离导致只读DB会有延迟，为保证缓存中的数据时时更新，需要在缓存中设置ID缓存为已删除状态
            </remarks>
        </member>
        <member name="M:Victornet.Caching.ICache.Remove(System.String)">
            <summary>
            移除缓存项
            </summary>
            <param name="cacheKey">缓存项标识</param>
        </member>
        <member name="M:Victornet.Caching.ICache.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            如果不存在缓存项则添加，否则更新
            </summary>
            <param name="key">缓存项标识</param>
            <param name="value">缓存项</param>
            <param name="timeSpan">缓存失效时间</param>
        </member>
        <member name="M:Victornet.Caching.ICacheService.Add(System.String,System.Object,Victornet.Caching.CachingExpirationType)">
            <summary>
            添加到缓存
            </summary>
            <param name="cacheKey">缓存项标识</param>
            <param name="value">缓存项</param>
            <param name="cachingExpirationType">缓存期限类型</param>
        </member>
        <member name="M:Victornet.Caching.ICacheService.Add(System.String,System.Object,System.TimeSpan)">
            <summary>
            添加到缓存
            </summary>
            <param name="cacheKey">缓存项标识</param>
            <param name="value">缓存项</param>
            <param name="timeSpan">缓存失效时间</param>
        </member>
        <member name="M:Victornet.Caching.ICacheService.Clear">
            <summary>
            清空缓存
            </summary>
        </member>
        <member name="M:Victornet.Caching.ICacheService.Get(System.String)">
            <summary>
            从缓存获取
            </summary>
            <param name="cacheKey">缓存项标识</param>
            <returns>返回cacheKey对应的缓存项，如果不存在则返回null</returns>
        </member>
        <member name="M:Victornet.Caching.ICacheService.Get``1(System.String)">
            <summary>
            从缓存获取
            </summary>
            <typeparam name="T">缓存项类型</typeparam>
            <param name="cacheKey">缓存项标识</param>
            <returns>返回cacheKey对应的缓存项，如果不存在则返回null</returns>
        </member>
        <member name="M:Victornet.Caching.ICacheService.GetFromFirstLevel(System.String)">
            <summary>
            从一层缓存获取
            </summary>
            <param name="cacheKey"></param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Caching.ICacheService.GetFromFirstLevel``1(System.String)">
            <summary>
            从一层缓存获取(缓存项必须是引用类型)
            </summary>
            <typeparam name="T">缓存项类型</typeparam>
            <param name="cacheKey">缓存项标识</param>
            <returns>返回cacheKey对应的缓存项，如果不存在则返回null</returns>
        </member>
        <member name="M:Victornet.Caching.ICacheService.MarkDeletion(System.String,Victornet.IEntity,Victornet.Caching.CachingExpirationType)">
            <summary>
            标识为删除
            </summary>
            <param name="cacheKey">缓存项标识</param>
            <param name="entity">缓存的实体</param>
            <param name="cachingExpirationType">缓存期限类型</param>
        </member>
        <member name="M:Victornet.Caching.ICacheService.Remove(System.String)">
            <summary>
            移除缓存
            </summary>
            <param name="cacheKey">缓存项标识</param>
        </member>
        <member name="M:Victornet.Caching.ICacheService.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            添加或更新缓存
            </summary>
            <param name="cacheKey">缓存项标识</param>
            <param name="value">缓存项</param>
            <param name="timeSpan">缓存失效时间间隔</param>
        </member>
        <member name="M:Victornet.Caching.ICacheService.Set(System.String,System.Object,Victornet.Caching.CachingExpirationType)">
            <summary>
            添加或更新缓存
            </summary>
            <param name="cacheKey">缓存项标识</param>
            <param name="value">缓存项</param>
            <param name="cachingExpirationType">缓存期限类型</param>
        </member>
        <member name="P:Victornet.Caching.ICacheService.EnableDistributedCache">
            <summary>
            是否启用分布式缓存
            </summary>
        </member>
        <member name="T:Victornet.Caching.IListCacheSetting">
            <summary>
            用于列表缓存设置接口
            </summary>
        </member>
        <member name="P:Victornet.Caching.IListCacheSetting.AreaCachePropertyName">
            <summary>
            用于列表缓存设置接口
            </summary>
            <remarks>
            用于在查询对象中设置缓存策略
            </remarks>
        </member>
        <member name="P:Victornet.Caching.IListCacheSetting.AreaCachePropertyValue">
            <summary>
            缓存分区字段值
            </summary>
        </member>
        <member name="P:Victornet.Caching.IListCacheSetting.CacheVersionType">
            <summary>
            列表缓存版本设置
            </summary>
        </member>
        <member name="T:Victornet.Caching.MemcachedCache">
            <summary>
            用于连接Memcached的分布式缓存
            </summary>
        </member>
        <member name="M:Victornet.Caching.MemcachedCache.Add(System.String,System.Object,System.TimeSpan)">
            <summary>
            加入缓存项
            </summary>
            <param name="key">缓存项标识</param>
            <param name="value">缓存项</param>
            <param name="timeSpan">缓存失效时间</param>
        </member>
        <member name="M:Victornet.Caching.MemcachedCache.AddWithFileDependency(System.String,System.Object,System.String)">
            <summary>
            加入依赖物理文件的缓存项
            </summary>
            <param name="key">缓存项标识</param>
            <param name="value">缓存项</param>
            <param name="fullFileNameOfFileDependency">主要应用于配置文件或配置项</param>
        </member>
        <member name="M:Victornet.Caching.MemcachedCache.Clear">
            <summary>
            清空缓存
            </summary>
        </member>
        <member name="M:Victornet.Caching.MemcachedCache.Get(System.String)">
            <summary>
            获取缓存项
            </summary>
            <param name="cacheKey">缓存项标识</param>
            <returns>返回cacheKey对应的缓存项，如果不存在则返回null</returns>
        </member>
        <member name="M:Victornet.Caching.MemcachedCache.GetStatistics">
            <summary>
            获取缓存服务器统计信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Caching.MemcachedCache.MarkDeletion(System.String,System.Object,System.TimeSpan)">
            <summary>
            标识删除
            </summary>
            <param name="key">缓存项标识</param>
            <param name="value">缓存项</param>
            <param name="timeSpan">缓存失效时间间隔</param>
            <remarks>
            由于DB读写分离导致只读DB会有延迟，为保证缓存中的数据时时更新，需要在缓存中设置ID缓存为已删除状态
            </remarks>
        </member>
        <member name="M:Victornet.Caching.MemcachedCache.Remove(System.String)">
            <summary>
            移除缓存项
            </summary>
            <param name="cacheKey">缓存项标识</param>
        </member>
        <member name="M:Victornet.Caching.MemcachedCache.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            如果不存在缓存项则添加，否则更新
            </summary>
            <param name="key">缓存项标识</param>
            <param name="value">缓存项</param>
            <param name="timeSpan">缓存失效时间</param>
        </member>
        <member name="T:Victornet.Caching.RealTimeCacheHelper">
            <summary>
            实时性缓存助手
            </summary>
        </member>
        <member name="M:Victornet.Caching.RealTimeCacheHelper.#ctor(System.Boolean,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="enableCache"> 是否启用缓存</param>
            <param name="typeHashID">类型名称哈希值</param>
        </member>
        <member name="M:Victornet.Caching.RealTimeCacheHelper.GetAreaVersion(System.String,System.Object)">
            <summary>
            获取列表缓存区域version
            </summary>
            <param name="propertyName">分区属性名称</param>
            <param name="propertyValue">分区属性值</param>
            <returns>分区属性的缓存版本（从0开始）</returns>
        </member>
        <member name="M:Victornet.Caching.RealTimeCacheHelper.GetCacheKeyOfEntity(System.Object)">
            <summary>
            获取实体缓存的cacheKey
            </summary>
            <param name="primaryKey">主键</param>
            <returns>实体的CacheKey</returns>
        </member>
        <member name="M:Victornet.Caching.RealTimeCacheHelper.GetCacheKeyOfEntityBody(System.Object)">
            <summary>
            获取实体正文缓存的cacheKey
            </summary>
            <param name="primaryKey">主键</param>
            <returns>实体正文缓存的cacheKey</returns>
        </member>
        <member name="M:Victornet.Caching.RealTimeCacheHelper.GetCacheKeyOfTimelinessHelper(System.String)">
            <summary>
            
            </summary>
            <param name="typeHashID"></param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Caching.RealTimeCacheHelper.GetEntityVersion(System.Object)">
            <summary>
            获取Entity的缓存版本
            </summary>
            <param name="primaryKey">主键</param>
            <returns>实体的缓存版本（从0开始）</returns>
        </member>
        <member name="M:Victornet.Caching.RealTimeCacheHelper.GetGlobalVersion">
            <summary>
            列表缓存全局version
            </summary>
            <returns></returns>
        </member>
        <member name="M:Victornet.Caching.RealTimeCacheHelper.GetListCacheKeyPrefix(Victornet.Caching.CacheVersionType)">
            <summary>
            获取列表缓存CacheKey的前缀（例如：abe3ds2sa90:8:）
            </summary>
            <param name="cacheVersionType"></param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Caching.RealTimeCacheHelper.GetListCacheKeyPrefix(Victornet.Caching.IListCacheSetting)">
            <summary>
            获取列表缓存CacheKey的前缀（例如：abe3ds2sa90:8:）
            </summary>
            <param name="cacheVersionSetting"></param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Caching.RealTimeCacheHelper.GetListCacheKeyPrefix(Victornet.Caching.CacheVersionType,System.String,System.Object)">
            <summary>
            获取列表缓存CacheKey的前缀（例如：abe3ds2sa90:8:）
            </summary>
            <param name="cacheVersionType"></param>
            <param name="areaCachePropertyName">缓存分区名称</param>
            <param name="areaCachePropertyValue">缓存分区值</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Caching.RealTimeCacheHelper.IncreaseAreaVersion(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            递增列表缓存区域version
            </summary>
            <param name="propertyName">分区属性名称</param>
            <param name="propertyValues">多个分区属性值</param>
        </member>
        <member name="M:Victornet.Caching.RealTimeCacheHelper.IncreaseAreaVersion(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="propertyName">分区属性名称</param>
            <param name="propertyValue"></param>
        </member>
        <member name="M:Victornet.Caching.RealTimeCacheHelper.IncreaseAreaVersion(System.String,System.Collections.Generic.IEnumerable{System.Object},System.Boolean)">
            <summary>
            
            </summary>
            <param name="propertyName">分区属性名称</param>
            <param name="propertyValues">多个分区属性值</param>
            <param name="raiseChangeEvent"></param>
        </member>
        <member name="M:Victornet.Caching.RealTimeCacheHelper.IncreaseEntityCacheVersion(System.Object)">
            <summary>
            递增实体缓存（仅更新实体时需要递增）
            </summary>
            <param name="entityId">实体Id</param>
        </member>
        <member name="M:Victornet.Caching.RealTimeCacheHelper.IncreaseGlobalVersion">
            <summary>
            递增列表缓存全局版本
            </summary>
        </member>
        <member name="M:Victornet.Caching.RealTimeCacheHelper.IncreaseListCacheVersion(Victornet.IEntity)">
            <summary>
            递增列表缓存version（增加、更改、删除实体时需要递增）
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Victornet.Caching.RealTimeCacheHelper.MarkDeletion(Victornet.IEntity)">
            <summary>
            标识为已删除
            </summary>
            <param name="entity"></param>
        </member>
        <member name="M:Victornet.Caching.RealTimeCacheHelper.OnChanged">
            <summary>
            
            </summary>
        </member>
        <member name="P:Victornet.Caching.RealTimeCacheHelper.CachingExpirationType">
            <summary>
            缓存过期类型
            </summary>
        </member>
        <member name="P:Victornet.Caching.RealTimeCacheHelper.EnableCache">
            <summary>
            是否使用缓存
            </summary>
        </member>
        <member name="P:Victornet.Caching.RealTimeCacheHelper.PropertiesOfArea">
            <summary>
            缓存分区的属性
            </summary>
        </member>
        <member name="P:Victornet.Caching.RealTimeCacheHelper.PropertyNameOfBody">
            <summary>
            实体正文缓存对应的属性名称（如果不需单独存储实体正文缓存，则不要设置该属性）
            </summary>
        </member>
        <member name="P:Victornet.Caching.RealTimeCacheHelper.TypeHashID">
            <summary>
            完整名称md5-16
            </summary>
        </member>
        <member name="T:Victornet.IEntity">
            <summary>
            Entity接口（所有实体都应该实现该接口）
            </summary>
        </member>
        <member name="P:Victornet.IEntity.EntityId">
            <summary>
            实体ID
            </summary>
        </member>
        <member name="P:Victornet.IEntity.IsDeletedInDatabase">
            <summary>
            该实体是否已经在数据库中删除(分布式部署时使用)
            </summary>
        </member>
        <member name="T:Victornet.Repositories.IRepository`1">
            <summary>
            用于处理Entity持久化操作
            </summary>
            <typeparam name="TEntity"> 实体类型</typeparam>
        </member>
        <member name="M:Victornet.Repositories.IRepository`1.Get(System.Object)">
            <summary>
            依据主键获取单个实体
            </summary>
            <param name="primaryKey"></param>
            <returns></returns>
            <remarks>
            自动对实体进行缓存（除非实体配置为不允许缓存）
            </remarks>
        </member>
        <member name="M:Victornet.Repositories.IRepository`1.GetAll">
            <summary>
            获取所有实体（仅用于数据量少的情况）
            </summary>
            <returns></returns>
            <remarks>自动对进行缓存（缓存策略与实体配置的缓存策略相同）</remarks>
        </member>
        <member name="M:Victornet.Repositories.IRepository`1.GetAll(System.String)">
            <summary>
            获取所有实体（仅用于数据量少的情况）
            </summary>
            <param name="orderBy">排序字段（多个字段用逗号分隔）</param>
            <returns></returns>
            <remarks>自动对进行缓存（缓存策略与实体配置的缓存策略相同）</remarks>
        </member>
        <member name="M:Victornet.Repositories.IRepository`1.PopulateEntitiesByEntityIds``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            依据EntityId集合组装成实体集合（自动缓存）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="entityIds">主键集合</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Repositories.IRepository`1.Update(`0)">
            <summary>
            把实体entiy更新到数据库
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Victornet.Repositories.IRepository`1.Insert(`0)">
            <summary>
            把实体entity添加到数据库
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Repositories.IRepository`1.Delete(`0)">
            <summary>
            从数据库删除实体
            </summary>
            <param name="entity">实体</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Repositories.IRepository`1.DeleteByEntityId(System.Object)">
            <summary>
            从数据库删除实体(by 主键)
            </summary>
            <param name="primaryKey">主键</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.Repositories.IRepository`1.Exists(System.Object)">
            <summary>
            依据主键检查实体是否存在于数据库
            </summary>
            <param name="primaryKey">主键</param>
            <returns></returns>
        </member>
        <member name="T:Victornet.Repositories.Repository`1">
            <summary>
            用于处理Entity持久化操作
            </summary>
            <typeparam name="TEntity"> 实体类型</typeparam>
        </member>
        <member name="T:Victornet.UI.IThemeResolver">
            <summary>
            皮肤解析程序，用于获取当前皮肤及加载皮肤的css
            </summary>
        </member>
        <member name="M:Victornet.UI.IThemeResolver.GetRequestTheme(System.Web.Routing.RequestContext)">
            <summary>
            获取请求页面使用的皮肤
            </summary>
            <param name="controllerContext"><see cref="T:System.Web.Routing.RequestContext"/></param>
        </member>
        <member name="M:Victornet.UI.IThemeResolver.IncludeStyle(System.Web.Routing.RequestContext)">
            <summary>
            加载皮肤的css
            </summary>
            <param name="controllerContext"><see cref="T:System.Web.Routing.RequestContext"/></param>
        </member>
        <member name="M:Victornet.UI.IThemeResolver.Validate(System.Int64)">
            <summary>
            验证当前用户是否修改皮肤的权限
            </summary>
            <param name="ownerId"></param>
            <returns></returns>
        </member>
        <member name="M:Victornet.UI.IThemeResolver.GetThemeAppearance(System.Int64)">
            <summary>
            获取拥有者当前选中的皮肤
            </summary>
            <param name="ownerId">拥有者Id（如：用户Id、群组Id）</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.UI.IThemeResolver.ChangeThemeAppearance(System.Int64,System.Boolean,System.String)">
            <summary>
            更新皮肤
            </summary>
            <param name="ownerId">拥有者Id（如：用户Id、群组Id）</param>
            <param name="isUseCustomStyle">是否使用自定义皮肤</param>
            <param name="themeAppearance">themeKey与appearanceKey用逗号关联</param>
        </member>
        <member name="T:Victornet.UI.Theme">
            <summary>
            主题实体
            </summary>
        </member>
        <member name="M:Victornet.UI.Theme.New(System.String,System.String)">
            <summary>
            新建实体时使用
            </summary>
        </member>
        <member name="M:Victornet.UI.Theme.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Victornet.UI.Theme.#ctor(System.Xml.Linq.XElement,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="xElement">XElement</param>
            <param name="themeKey">themeKey</param>
        </member>
        <member name="P:Victornet.UI.Theme.Id">
            <summary>
            Id(格式：PresentAreaKey,ThemeKey)
            </summary>
        </member>
        <member name="P:Victornet.UI.Theme.PresentAreaKey">
            <summary>
            PresentAreaKey
            </summary>
        </member>
        <member name="P:Victornet.UI.Theme.ThemeKey">
            <summary>
            ThemeKey
            </summary>
        </member>
        <member name="P:Victornet.UI.Theme.Parent">
            <summary>
            父主题ThemeKey
            </summary>
        </member>
        <member name="P:Victornet.UI.Theme.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="T:Victornet.UI.ThemeAppearance">
            <summary>
            外观实体
            </summary>
        </member>
        <member name="M:Victornet.UI.ThemeAppearance.New(System.String,System.String,System.String,System.String,System.String)">
            <summary>
            新建实体时使用
            </summary>
            <param name="presentAreaKey"></param>
            <param name="themeKey"></param>
            <param name="appearanceKey"></param>
            <param name="name"></param>
            <param name="previewImage"></param>
            <returns></returns>
        </member>
        <member name="M:Victornet.UI.ThemeAppearance.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Victornet.UI.ThemeAppearance.#ctor(System.Xml.Linq.XElement,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="xElement">XElement</param>
            <param name="appearanceKey">appearanceKey</param>
        </member>
        <member name="P:Victornet.UI.ThemeAppearance.Id">
            <summary>
            Id（格式：PresentAreaKey,ThemeKey,AppearanceKey）
            </summary>
        </member>
        <member name="P:Victornet.UI.ThemeAppearance.PresentAreaKey">
            <summary>
            PresentAreaKey
            </summary>
        </member>
        <member name="P:Victornet.UI.ThemeAppearance.ThemeKey">
            <summary>
            ThemeKey
            </summary>
        </member>
        <member name="P:Victornet.UI.ThemeAppearance.AppearanceKey">
            <summary>
            AppearanceKey
            </summary>
        </member>
        <member name="P:Victornet.UI.ThemeAppearance.Name">
            <summary>
            外观名称
            </summary>
        </member>
        <member name="P:Victornet.UI.ThemeAppearance.PreviewImage">
            <summary>
            皮肤预览图片
            </summary>
        </member>
        <member name="P:Victornet.UI.ThemeAppearance.PreviewLargeImage">
            <summary>
            皮肤大预览图片
            </summary>
        </member>
        <member name="P:Victornet.UI.ThemeAppearance.Description">
            <summary>
            皮肤描述
            </summary>
        </member>
        <member name="P:Victornet.UI.ThemeAppearance.Tags">
            <summary>
            标签（多个标签用逗号分隔）
            </summary>
        </member>
        <member name="P:Victornet.UI.ThemeAppearance.Author">
            <summary>
            皮肤作者
            </summary>
        </member>
        <member name="P:Victornet.UI.ThemeAppearance.Copyright">
            <summary>
            版权声明
            </summary>
        </member>
        <member name="P:Victornet.UI.ThemeAppearance.LastModified">
            <summary>
            皮肤最后更新日期
            </summary>
        </member>
        <member name="P:Victornet.UI.ThemeAppearance.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:Victornet.UI.ThemeAppearance.ForProductVersion">
            <summary>
            适用产品版本号
            </summary>
        </member>
        <member name="P:Victornet.UI.ThemeAppearance.DateCreated">
            <summary>
            皮肤安装日期
            </summary>
        </member>
        <member name="P:Victornet.UI.ThemeAppearance.IsEnabled">
            <summary>
            皮肤是否启用
            </summary>
        </member>
        <member name="P:Victornet.UI.ThemeAppearance.DisplayOrder">
            <summary>
            排列顺序
            </summary>
        </member>
        <member name="P:Victornet.UI.ThemeAppearance.UserCount">
            <summary>
            使用人数
            </summary>
        </member>
        <member name="P:Victornet.UI.ThemeAppearance.Roles">
            <summary>
            允许使用的角色名称 多个角色用’,’分隔 
            </summary>
        </member>
        <member name="P:Victornet.UI.ThemeAppearance.RequiredRank">
            <summary>
            允许的最小等级(用户等级或群组等级)
            </summary>
        </member>
        <member name="T:Victornet.UI.ThemedAttribute">
            <summary>
            用于controller的Theme相关属性标注
            </summary>
        </member>
        <member name="M:Victornet.UI.ThemedAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
        </member>
        <member name="P:Victornet.UI.ThemedAttribute.PresentAreaKey">
            <summary>
            呈现区域标识
            </summary>        
        </member>
        <member name="P:Victornet.UI.ThemedAttribute.IsApplication">
            <summary>
            是否属于应用模块
            </summary>
        </member>
        <member name="P:Victornet.UI.ThemedAttribute.PresentAreaService">
            <summary>
            PresentAreaService
            </summary>
        </member>
        <member name="M:Victornet.UI.ThemedAttribute.OnResultExecuting(System.Web.Mvc.ResultExecutingContext)">
            <summary>
            加载皮肤css文件及根据需要重设站点logo
            </summary>
            <param name="filterContext"><see cref="T:System.Web.Mvc.ResultExecutingContext"/></param>
        </member>
        <member name="T:Victornet.UI.ThemedRazorView">
            <summary>
            重写RazorView用于支持皮肤机制
            </summary>
        </member>
        <member name="M:Victornet.UI.ThemedRazorView.#ctor(System.Web.Mvc.ControllerContext,System.String,System.String,System.Boolean,System.String,System.Func{Victornet.UI.ThemeAppearance,System.String,System.String,System.String},Victornet.UI.ThemeAppearance,System.Web.Mvc.IViewPageActivator)">
            <summary>
            构造函数
            </summary>
            <param name="controllerContext"></param>
            <param name="viewPath"></param>
            <param name="layoutPath"></param>
            <param name="isPartialView"></param>
            <param name="applicationKey"></param>
            <param name="findLayoutPathOfThemeDelegate"></param>
            <param name="themeAppearance"></param>
            <param name="viewPageActivator"></param>
        </member>
        <member name="P:Victornet.UI.ThemedRazorView.OverridenLayoutPath">
            <summary>
            从Controller/Action设置的Layout（已经经过视图引擎定位）
            </summary>
        </member>
        <member name="F:Victornet.UI.ThemedRazorView.FindLayoutPathOfThemeDelegate">
            <summary>
            利用视图引擎定位layout的委托
            </summary>
        </member>
        <member name="P:Victornet.UI.ThemedRazorView.ThemeAppearance">
            <summary>
            当前页面的ThemeAppearance
            </summary>
        </member>
        <member name="P:Victornet.UI.ThemedRazorView.IsPartialView">
            <summary>
            是否局部视图
            </summary>
        </member>
        <member name="P:Victornet.UI.ThemedRazorView.ApplicationKey">
            <summary>
            应用模块标识
            </summary>
        </member>
        <member name="M:Victornet.UI.ThemedRazorView.RenderView(System.Web.Mvc.ViewContext,System.IO.TextWriter,System.Object)">
            <summary>
            呈现View
            </summary>
            <param name="viewContext"></param>
            <param name="writer"></param>
            <param name="instance"></param>
        </member>
        <member name="T:Victornet.UI.ThemedViewEngine">
            <summary>
            支持皮肤机制的视图引擎
            </summary>
        </member>
        <member name="M:Victornet.UI.ThemedViewEngine.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Victornet.UI.ThemedViewEngine.#ctor(System.Web.Mvc.IViewPageActivator)">
            <summary>
            构造函数
            </summary>
            <param name="viewPageActivator"><see cref="T:System.Web.Mvc.IViewPageActivator"/></param>
        </member>
        <member name="P:Victornet.UI.ThemedViewEngine.ThemeService">
            <summary>
            ThemeService
            </summary>
        </member>
        <member name="M:Victornet.UI.ThemedViewEngine.FindPartialView(System.Web.Mvc.ControllerContext,System.String,System.Boolean)">
            <summary>
            重写FindPartialView
            </summary>
            <param name="controllerContext"></param>
            <param name="partialViewName"></param>
            <param name="useCache"></param>
            <returns></returns>
        </member>
        <member name="M:Victornet.UI.ThemedViewEngine.FindView(System.Web.Mvc.ControllerContext,System.String,System.String,System.Boolean)">
            <summary>
            重写FindView
            </summary>
            <param name="controllerContext"></param>
            <param name="viewName"></param>
            <param name="masterName"></param>
            <param name="useCache"></param>
            <returns></returns>
        </member>
        <member name="M:Victornet.UI.ThemedViewEngine.CreatePartialView(System.Web.Mvc.ControllerContext,System.String)">
            <summary>
            重写CreatePartialView
            </summary>
            <param name="controllerContext"></param>
            <param name="partialPath"></param>
            <returns></returns>
        </member>
        <member name="M:Victornet.UI.ThemedViewEngine.CreateView(System.Web.Mvc.ControllerContext,System.String,System.String)">
            <summary>
            重写CreateView
            </summary>
            <param name="controllerContext"></param>
            <param name="viewPath"></param>
            <param name="masterPath"></param>
            <returns></returns>
        </member>
        <member name="M:Victornet.UI.ThemedViewEngine.GetPresentAreaKeyAndIsApplicationFromThemedAttribute(System.Web.Mvc.ControllerContext,System.String@,System.Boolean@)">
            <summary>
            从ThemedAttribute获取PresentAreaKey及IsApplication
            </summary>
            <param name="controllerContext"><see cref="T:System.Web.Mvc.ControllerContext"/></param>
        </member>
        <member name="M:Victornet.UI.ThemedViewEngine.GetViewPathOfApplication(System.String,System.String,System.String)">
            <summary>
            获取应用模块中的ViewPath
            </summary>
            <param name="viewName"></param>
            <param name="controllerName"></param>
            <param name="areaName">与ApplicationKey相同</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.UI.ThemedViewEngine.GetViewPathOfTheme(Victornet.UI.ThemeAppearance,System.String,System.String)">
            <summary>
            获取应用模块中的ViewPath
            </summary>
            <remarks>
            应用模块以外的功能View定位忽略Area
            </remarks>
            <param name="themeAppearance"></param>
            <param name="viewName"></param>
            <param name="controllerName"></param>
            <returns></returns>
        </member>
        <member name="M:Victornet.UI.ThemedViewEngine.GetLayoutPathOfTheme(Victornet.UI.ThemeAppearance,System.String,System.String)">
            <summary>
            获取Layout具体地址
            </summary>
            <param name="themeAppearance"></param>
            <param name="layoutName">布局文件名称不要带.cshtml</param>
            <param name="applicationKey">应用模块标识</param>
        </member>
        <member name="M:Victornet.UI.ThemedViewEngine.GetPathFromSpecificName(System.String)">
            <summary>
            检测绝对虚拟路径的ViewName是否存在
            </summary>
        </member>
        <member name="M:Victornet.UI.ThemedViewEngine.IsSpecificPath(System.String)">
            <summary>
            是否属于绝对虚拟路径（以'~'或'/'开头）
            </summary>
        </member>
        <member name="M:Victornet.UI.ThemedViewEngine.GetAreaName(System.Web.Routing.RouteData)">
            <summary>
            从路由数据获取AreaName
            </summary>
            <param name="routeData"></param>
            <returns></returns>
        </member>
        <member name="M:Victornet.UI.ThemedViewEngine.GetAreaName(System.Web.Routing.RouteBase)">
            <summary>
            从路由数据获取AreaName
            </summary>
            <param name="route"><see cref="T:System.Web.Routing.RouteBase"/></param>
            <returns>返回路由中的AreaName，如果无AreaName则返回null</returns>
        </member>
        <member name="T:Victornet.UI.ThemedWebViewPage">
            <summary>
            重写WebViewPage用于支持皮肤机制
            </summary>
        </member>
        <member name="P:Victornet.UI.ThemedWebViewPage.OverridenLayoutPath">
            <summary>
            从Controller/Action设置的Layout（已经经过视图引擎定位）
            </summary>
        </member>
        <member name="F:Victornet.UI.ThemedWebViewPage.FindLayoutPathOfThemeDelegate">
            <summary>
            利用视图引擎定位layout的委托
            </summary>
        </member>
        <member name="P:Victornet.UI.ThemedWebViewPage.ThemeAppearance">
            <summary>
            当前页面的ThemeAppearance
            </summary>
        </member>
        <member name="P:Victornet.UI.ThemedWebViewPage.IsPartialView">
            <summary>
            是否局部视图
            </summary>
        </member>
        <member name="P:Victornet.UI.ThemedWebViewPage.ApplicationKey">
            <summary>
            应用模块标识
            </summary>
        </member>
        <member name="M:Victornet.UI.ThemedWebViewPage.ExecutePageHierarchy">
            <summary>
            重写基类的方法用于实现View中设置layout也可以使用视图引擎定位
            </summary>
        </member>
        <member name="T:Victornet.UI.ThemedWebViewPage`1">
            <summary>
            重写WebViewPage用于支持皮肤机制
            </summary>
        </member>
        <member name="P:Victornet.UI.ThemedWebViewPage`1.Ajax">
            <summary>
            AjaxHelper
            </summary>
        </member>
        <member name="P:Victornet.UI.ThemedWebViewPage`1.Html">
            <summary>
            HtmlHelper
            </summary>
        </member>
        <member name="P:Victornet.UI.ThemedWebViewPage`1.Model">
            <summary>
            Model
            </summary>
        </member>
        <member name="P:Victornet.UI.ThemedWebViewPage`1.ViewData">
            <summary>
            ViewData
            </summary>
        </member>
        <member name="M:Victornet.UI.ThemedWebViewPage`1.InitHelpers">
            <summary>
            InitHelpers
            </summary>
        </member>
        <member name="M:Victornet.UI.ThemedWebViewPage`1.SetViewData(System.Web.Mvc.ViewDataDictionary)">
            <summary>
            SetViewData
            </summary>
            <param name="viewData"></param>
        </member>
        <member name="T:Victornet.UI.ThemeService">
            <summary>
            皮肤业务逻辑类
            </summary>
        </member>
        <member name="M:Victornet.UI.ThemeService.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Victornet.UI.ThemeService.#ctor(Victornet.Repositories.IRepository{Victornet.UI.Theme},Victornet.Repositories.IRepository{Victornet.UI.ThemeAppearance})">
            <summary>
            构造函数（主要用于测试用例）
            </summary>
        </member>
        <member name="M:Victornet.UI.ThemeService.GetTheme(System.String)">
            <summary>
            获取Theme
            </summary>
            <param name="id">presentAreaKey与themeKey用逗号关联</param>
        </member>
        <member name="M:Victornet.UI.ThemeService.GetTheme(System.String,System.String)">
            <summary>
            获取ThemeAppearance
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="themeKey">主题标识</param>        
        </member>
        <member name="M:Victornet.UI.ThemeService.ExtractThemeAppearance(System.String,System.String,System.IO.Stream)">
            <summary>
            提取皮肤
            </summary>
            <param name="presentAreaKey">呈现区域</param>
            <param name="fileName">皮肤文件名</param>
            <param name="fileStream">皮肤文件流</param>
        </member>
        <member name="M:Victornet.UI.ThemeService.SaveThemeAppearancePackage(System.String,System.IO.Stream)">
            <summary>
            保存皮肤
            </summary>
            <param name="fileFullName">皮肤文件名</param>
            <param name="fileStream">皮肤文件流</param>
        </member>
        <member name="M:Victornet.UI.ThemeService.DeleteThemeAppearance(System.String,System.String)">
            <summary>
            删除ThemeAppearance
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="themeAndAppearance">themeKey与appearanceKey用逗号关联</param>
        </member>
        <member name="M:Victornet.UI.ThemeService.SetIsEnabled(System.String,System.String,System.Boolean)">
            <summary>
            设置启用禁用状态
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="themeAndAppearance">themeKey与appearanceKey用逗号关联</param>
        </member>
        <member name="M:Victornet.UI.ThemeService.ChangeThemeAppearanceUserCount(System.String,System.String,System.String)">
            <summary>
            调整外观皮肤使用次数
            </summary>
            <param name="presentAreaKey">呈现区域</param>
            <param name="oldThemeAndAppearance">旧外观皮肤Key（若是新增用户或群组，则传空）</param>
            <param name="newThemeAndAppearance">新外观皮肤Key（若是删除用户或群组，则传空）</param>
        </member>
        <member name="M:Victornet.UI.ThemeService.ChangeDisplayOrder(System.String,System.String)">
            <summary>
            变更外观的排列顺序
            </summary>
            <param name="appearanceId">待调整的Id</param>
            <param name="referenceAppearanceId">参照Id</param>        
        </member>
        <member name="M:Victornet.UI.ThemeService.GetThemeAppearance(System.String,System.String)">
            <summary>
            获取ThemeAppearance
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="themeAndAppearance">themeKey与appearanceKey用逗号关联</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.UI.ThemeService.GetThemeAppearance(System.String,System.String,System.String)">
            <summary>
            获取ThemeAppearance
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="themeKey">主题标识</param>
            <param name="appearanceKey">外观标识</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.UI.ThemeService.GetThemeAppearances(System.String,System.Nullable{System.Boolean})">
            <summary>
            获取呈现区域下的ThemeAppearance
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="isEnabled">ThemeAppearance是否启用</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.UI.ThemeService.RegisterThemeResolver(System.String,Victornet.UI.IThemeResolver)">
            <summary>
            注册ThemeResolver
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="themeResolver"><see cref="T:Victornet.UI.IThemeResolver"/></param>
        </member>
        <member name="M:Victornet.UI.ThemeService.GetRequestTheme(System.String,System.Web.Routing.RequestContext)">
            <summary>
            获取请求页面需要的Theme
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="controllerContext"><see cref="T:System.Web.Routing.RequestContext"/></param>
            <returns></returns>
        </member>
        <member name="M:Victornet.UI.ThemeService.IncludeStyle(System.String,System.Web.Routing.RequestContext)">
            <summary>
            加载皮肤的css
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="controllerContext"><see cref="T:System.Web.Routing.RequestContext"/></param>
        </member>
        <member name="M:Victornet.UI.ThemeService.Validate(System.String,System.Int64)">
            <summary>
            验证当前用户是否修改皮肤的权限
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="ownerId">拥有者Id（如：用户Id、群组Id）</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.UI.ThemeService.GetThemeAppearance(System.String,System.Int64)">
            <summary>
            获取用户当前选中的皮肤
            </summary>
            <param name="presentAreaKey">呈现区域标识</param>
            <param name="ownerId">拥有者Id（如：用户Id、群组Id）</param>
            <returns></returns>
        </member>
        <member name="M:Victornet.UI.ThemeService.ChangeThemeAppearance(System.String,System.Int64,System.Boolean,System.String)">
            <summary>
            更新皮肤
            </summary>
            <param name="presentAreaKey">呈现区域Key</param>
            <param name="ownerId">拥有者Id（如：用户Id、群组Id）</param>
            <param name="isUseCustomStyle">是否使用自定义皮肤</param>
            <param name="themeAppearance">themeKey与appearanceKey用逗号关联</param>
        </member>
        <member name="T:PetaPoco.Database">
            <summary>
            对PetaPoco.Database进行封装，以便于使用
            </summary>
            <summary>
            The main PetaPoco Database class.  You can either use this class directly, or derive from it.
            </summary>
        </member>
        <member name="P:PetaPoco.Database.KeepConnectionAlive">
            <summary>
            When set to true the first opened connection is kept alive until this object is disposed
            </summary>
        </member>
        <member name="P:PetaPoco.Database.Connection">
            <summary>
            Provides access to the currently open shared connection (or null if none)
            </summary>
        </member>
        <member name="P:PetaPoco.Database.LastSQL">
            <summary>
            Retrieves the SQL of the last executed statement
            </summary>
        </member>
        <member name="P:PetaPoco.Database.LastArgs">
            <summary>
            Retrieves the arguments to the last execute statement
            </summary>
        </member>
        <member name="P:PetaPoco.Database.LastCommand">
            <summary>
            Returns a formatted string describing the last executed SQL statement and it's argument values
            </summary>
        </member>
        <member name="P:PetaPoco.Database.EnableAutoSelect">
            <summary>
            When set to true, PetaPoco will automatically create the "SELECT columns" part of any query that looks like it needs it
            </summary>
        </member>
        <member name="P:PetaPoco.Database.EnableNamedParams">
            <summary>
            When set to true, parameters can be named ?myparam and populated from properties of the passed in argument values.
            </summary>
        </member>
        <member name="P:PetaPoco.Database.CommandTimeout">
            <summary>
            Sets the timeout value for all SQL statements.
            </summary>
        </member>
        <member name="P:PetaPoco.Database.OneTimeCommandTimeout">
            <summary>
            Sets the timeout value for the next (and only next) SQL statement
            </summary>
        </member>
        <member name="M:PetaPoco.Database.CreateInstance(System.String)">
            <summary>
            获取PetaPoco.Database的实例
            </summary>
        </member>
        <member name="M:PetaPoco.Database.Execute(System.Collections.Generic.IEnumerable{PetaPoco.Sql})">
            <summary>
            批量执行sql
            </summary>
            <param name="sqls"></param>
            <returns></returns>
        </member>
        <member name="M:PetaPoco.Database.FetchFirstColumn(PetaPoco.Sql)">
            <summary>
            获取第一列组成的集合
            </summary>
            <param name="sql">PetaPoco.Sql</param>
        </member>
        <member name="M:PetaPoco.Database.FetchFirstColumn(System.String,System.Object[])">
            <summary>
            获取第一列组成的集合
            </summary>
        </member>
        <member name="M:PetaPoco.Database.FetchPagingPrimaryKeys``1(System.Int64,System.Int32,System.Int32,PetaPoco.Sql)">
            <summary>
            获取可分页的主键集合
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="maxRecords">最大返回记录数</param>
            <param name="pageSize">每页记录数</param>
            <param name="pageIndex">当前页码(从1开始)</param>
            <param name="sql">PetaPoco.Sql</param>
            <returns>可分页的实体Id集合</returns>
        </member>
        <member name="M:PetaPoco.Database.FetchPagingPrimaryKeys(System.Int64,System.Int32,System.Int32,System.String,PetaPoco.Sql)">
            <summary>
            获取可分页的主键集合
            </summary>
            <typeparam name="TEntity">实体</typeparam>
            <param name="maxRecords">最大返回记录数</param>
            <param name="pageSize">每页记录数</param>
            <param name="pageIndex">当前页码(从1开始)</param>
            <param name="primaryKey">主键</param>
            <param name="sql">PetaPoco.Sql <remarks>要求必须是完整的sql语句</remarks></param>
            <returns>可分页的实体Id集合</returns>
        </member>
        <member name="M:PetaPoco.Database.FetchTopPrimaryKeys``1(System.Int32,PetaPoco.Sql)">
            <summary>
            获取前topNumber条记录
            </summary>
            <param name="topNumber">前多少条数据</param>
            <param name="sql">PetaPoco.Sql</param>
        </member>
        <member name="M:PetaPoco.Database.FetchTop``1(System.Int32,PetaPoco.Sql)">
            <summary>
            获取前topNumber条记录
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="topNumber">前多少条数据</param>
            <param name="sql">PetaPoco.Sql<remarks>要求必须是完整的sql语句</remarks></param>
        </member>
        <member name="M:PetaPoco.Database.BuildPagingPrimaryKeyQueries``1(System.Int64,System.Int64,System.Int64,System.String,System.Object[]@,System.String@,System.String@)">
            <summary>
            创建分页的SQL语句
            </summary>
        </member>
        <member name="M:PetaPoco.Database.BuildPagingPrimaryKeyQueries(System.Int64,System.Int64,System.Int64,System.String,System.String,System.Object[]@,System.String@,System.String@)">
            <summary>
            创建分页的SQL语句
            </summary>
        </member>
        <member name="M:PetaPoco.Database.SplitSqlForPagingOptimized(System.Int64,System.String,System.String,System.String@,System.String@,System.String@)">
            <summary>
            切割sql数据
            </summary>
            <param name="maxRecords"></param>
            <param name="sql"></param>
            <param name="primaryKey"></param>
            <param name="sqlCount"></param>
            <param name="sqlSelectRemoved"></param>
            <param name="sqlOrderBy"></param>
            <returns></returns>
        </member>
        <member name="M:PetaPoco.Database.BuildTopSql``1(System.Int32,System.String)">
            <summary>
            构建获取前topNumber记录的SQL
            </summary>
        </member>
        <member name="M:PetaPoco.Database.BuildTopSql(System.Int32,System.String)">
            <summary>
            构建获取前topNumber记录的SQL
            </summary>
        </member>
        <member name="M:PetaPoco.Database.#ctor(System.Data.IDbConnection)">
            <summary>
            Construct a database using a supplied IDbConnection
            </summary>
            <param name="connection">The IDbConnection to use</param>
            <remarks>
            The supplied IDbConnection will not be closed/disposed by PetaPoco - that remains
            the responsibility of the caller.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.#ctor(System.String,System.String)">
            <summary>
            Construct a database using a supplied connections string and optionally a provider name
            </summary>
            <param name="connectionString">The DB connection string</param>
            <param name="providerName">The name of the DB provider to use</param>
            <remarks>
            PetaPoco will automatically close and dispose any connections it creates.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.#ctor(System.String,System.Data.Common.DbProviderFactory)">
            <summary>
            Construct a Database using a supplied connection string and a DbProviderFactory
            </summary>
            <param name="connectionString">The connection string to use</param>
            <param name="provider">The DbProviderFactory to use for instantiating IDbConnection's</param>
        </member>
        <member name="M:PetaPoco.Database.#ctor(System.String)">
            <summary>
            Construct a Database using a supplied connectionString Name.  The actual connection string and provider will be 
            read from app/web.config.
            </summary>
            <param name="connectionStringName">The name of the connection</param>
        </member>
        <member name="M:PetaPoco.Database.CommonConstruct">
            <summary>
            Provides common initialization for the various constructors
            </summary>
        </member>
        <member name="M:PetaPoco.Database.Dispose">
            <summary>
            Automatically close one open shared connection 
            </summary>
        </member>
        <member name="M:PetaPoco.Database.OpenSharedConnection">
            <summary>
            Open a connection that will be used for all subsequent queries.
            </summary>
            <remarks>
            Calls to Open/CloseSharedConnection are reference counted and should be balanced
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.CloseSharedConnection">
            <summary>
            Releases the shared connection
            </summary>
        </member>
        <member name="M:PetaPoco.Database.GetTransaction">
             <summary>
             Starts or continues a transaction.
             </summary>
             <returns>An ITransaction reference that must be Completed or disposed</returns>
             <remarks>
             This method makes management of calls to Begin/End/CompleteTransaction easier.  
            
             The usage pattern for this should be:
            
             using (var tx = db.GetTransaction())
             {
             	// Do stuff
             	db.Update(...);
            
                 // Mark the transaction as complete
                 tx.Complete();
             }
            
             Transactions can be nested but they must all be completed otherwise the entire
             transaction is aborted.
             </remarks>
        </member>
        <member name="M:PetaPoco.Database.OnBeginTransaction">
            <summary>
            Called when a transaction starts.  Overridden by the T4 template generated database
            classes to ensure the same DB instance is used throughout the transaction.
            </summary>
        </member>
        <member name="M:PetaPoco.Database.OnEndTransaction">
            <summary>
            Called when a transaction ends.
            </summary>
        </member>
        <member name="M:PetaPoco.Database.BeginTransaction">
            <summary>
            Starts a transaction scope, see GetTransaction() for recommended usage
            </summary>
        </member>
        <member name="M:PetaPoco.Database.CleanupTransaction">
            <summary>
            Internal helper to cleanup transaction
            </summary>
        </member>
        <member name="M:PetaPoco.Database.AbortTransaction">
            <summary>
            Aborts the entire outer most transaction scope 
            </summary>
            <remarks>
            Called automatically by Transaction.Dispose()
            if the transaction wasn't completed.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.CompleteTransaction">
            <summary>
            Marks the current transaction scope as complete.
            </summary>
        </member>
        <member name="M:PetaPoco.Database.AddParam(System.Data.IDbCommand,System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Add a parameter to a DB command
            </summary>
            <param name="cmd">A reference to the IDbCommand to which the parameter is to be added</param>
            <param name="value">The value to assign to the parameter</param>
            <param name="pi">Optional, a reference to the property info of the POCO property from which the value is coming.</param>
        </member>
        <member name="M:PetaPoco.Database.OnException(System.Exception)">
            <summary>
            Called if an exception occurs during processing of a DB operation.  Override to provide custom logging/handling.
            </summary>
            <param name="x">The exception instance</param>
            <returns>True to re-throw the exception, false to suppress it</returns>
        </member>
        <member name="M:PetaPoco.Database.OnConnectionOpened(System.Data.IDbConnection)">
            <summary>
            Called when DB connection opened
            </summary>
            <param name="conn">The newly opened IDbConnection</param>
            <returns>The same or a replacement IDbConnection</returns>
            <remarks>
            Override this method to provide custom logging of opening connection, or
            to provide a proxy IDbConnection.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.OnConnectionClosing(System.Data.IDbConnection)">
            <summary>
            Called when DB connection closed
            </summary>
            <param name="conn">The soon to be closed IDBConnection</param>
        </member>
        <member name="M:PetaPoco.Database.OnExecutingCommand(System.Data.IDbCommand)">
            <summary>
            Called just before an DB command is executed
            </summary>
            <param name="cmd">The command to be executed</param>
            <remarks>
            Override this method to provide custom logging of commands and/or
            modification of the IDbCommand before it's executed
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.OnExecutedCommand(System.Data.IDbCommand)">
            <summary>
            Called on completion of command execution
            </summary>
            <param name="cmd">The IDbCommand that finished executing</param>
        </member>
        <member name="M:PetaPoco.Database.Execute(System.String,System.Object[])">
            <summary>
            Executes a non-query command
            </summary>
            <param name="sql">The SQL statement to execute</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:PetaPoco.Database.Execute(PetaPoco.Sql)">
            <summary>
            Executes a non-query command
            </summary>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:PetaPoco.Database.ExecuteScalar``1(System.String,System.Object[])">
            <summary>
            Executes a query and return the first column of the first row in the result set.
            </summary>
            <typeparam name="T">The type that the result value should be cast to</typeparam>
            <param name="sql">The SQL query to execute</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>The scalar value cast to T</returns>
        </member>
        <member name="M:PetaPoco.Database.ExecuteScalar``1(PetaPoco.Sql)">
            <summary>
            Executes a query and return the first column of the first row in the result set.
            </summary>
            <typeparam name="T">The type that the result value should be cast to</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>The scalar value cast to T</returns>
        </member>
        <member name="M:PetaPoco.Database.Fetch``1(System.String,System.Object[])">
            <summary>
            Runs a query and returns the result set as a typed list
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">The SQL query to execute</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A List holding the results of the query</returns>
        </member>
        <member name="M:PetaPoco.Database.Fetch``1(PetaPoco.Sql)">
            <summary>
            Runs a query and returns the result set as a typed list
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A List holding the results of the query</returns>
        </member>
        <member name="M:PetaPoco.Database.BuildPageQueries``1(System.Int64,System.Int64,System.String,System.Object[]@,System.String@,System.String@)">
            <summary>
            Starting with a regular SELECT statement, derives the SQL statements required to query a 
            DB for a page of records and the total number of records
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="skip">The number of rows to skip before the start of the page</param>
            <param name="take">The number of rows in the page</param>
            <param name="sql">The original SQL select statement</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <param name="sqlCount">Outputs the SQL statement to query for the total number of matching rows</param>
            <param name="sqlPage">Outputs the SQL statement to retrieve a single page of matching rows</param>
        </member>
        <member name="M:PetaPoco.Database.Page``1(System.Int64,System.Int64,System.String,System.Object[],System.String,System.Object[])">
            <summary>
            Retrieves a page of records	and the total number of available records
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="page">The 1 based page number to retrieve</param>
            <param name="itemsPerPage">The number of records per page</param>
            <param name="sqlCount">The SQL to retrieve the total number of records</param>
            <param name="countArgs">Arguments to any embedded parameters in the sqlCount statement</param>
            <param name="sqlPage">The SQL To retrieve a single page of results</param>
            <param name="pageArgs">Arguments to any embedded parameters in the sqlPage statement</param>
            <returns>A Page of results</returns>
            <remarks>
            This method allows separate SQL statements to be explicitly provided for the two parts of the page query.
            The page and itemsPerPage parameters are not used directly and are used simply to populate the returned Page object.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.Page``1(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Retrieves a page of records	and the total number of available records
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="page">The 1 based page number to retrieve</param>
            <param name="itemsPerPage">The number of records per page</param>
            <param name="sql">The base SQL query</param>
            <param name="args">Arguments to any embedded parameters in the SQL statement</param>
            <returns>A Page of results</returns>
            <remarks>
            PetaPoco will automatically modify the supplied SELECT statement to only retrieve the
            records for the specified page.  It will also execute a second query to retrieve the
            total number of records in the result set.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.Page``1(System.Int64,System.Int64,PetaPoco.Sql)">
            <summary>
            Retrieves a page of records	and the total number of available records
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="page">The 1 based page number to retrieve</param>
            <param name="itemsPerPage">The number of records per page</param>
            <param name="sql">An SQL builder object representing the base SQL query and it's arguments</param>
            <returns>A Page of results</returns>
            <remarks>
            PetaPoco will automatically modify the supplied SELECT statement to only retrieve the
            records for the specified page.  It will also execute a second query to retrieve the
            total number of records in the result set.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.Page``1(System.Int64,System.Int64,PetaPoco.Sql,PetaPoco.Sql)">
            <summary>
            Retrieves a page of records	and the total number of available records
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="page">The 1 based page number to retrieve</param>
            <param name="itemsPerPage">The number of records per page</param>
            <param name="sqlCount">An SQL builder object representing the SQL to retrieve the total number of records</param>
            <param name="sqlPage">An SQL builder object representing the SQL to retrieve a single page of results</param>
            <returns>A Page of results</returns>
            <remarks>
            This method allows separate SQL statements to be explicitly provided for the two parts of the page query.
            The page and itemsPerPage parameters are not used directly and are used simply to populate the returned Page object.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.Fetch``1(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Retrieves a page of records (without the total count)
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="page">The 1 based page number to retrieve</param>
            <param name="itemsPerPage">The number of records per page</param>
            <param name="sql">The base SQL query</param>
            <param name="args">Arguments to any embedded parameters in the SQL statement</param>
            <returns>A List of results</returns>
            <remarks>
            PetaPoco will automatically modify the supplied SELECT statement to only retrieve the
            records for the specified page.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.Fetch``1(System.Int64,System.Int64,PetaPoco.Sql)">
            <summary>
            Retrieves a page of records (without the total count)
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="page">The 1 based page number to retrieve</param>
            <param name="itemsPerPage">The number of records per page</param>
            <param name="sql">An SQL builder object representing the base SQL query and it's arguments</param>
            <returns>A List of results</returns>
            <remarks>
            PetaPoco will automatically modify the supplied SELECT statement to only retrieve the
            records for the specified page.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.SkipTake``1(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
            Retrieves a range of records from result set
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="skip">The number of rows at the start of the result set to skip over</param>
            <param name="take">The number of rows to retrieve</param>
            <param name="sql">The base SQL query</param>
            <param name="args">Arguments to any embedded parameters in the SQL statement</param>
            <returns>A List of results</returns>
            <remarks>
            PetaPoco will automatically modify the supplied SELECT statement to only retrieve the
            records for the specified range.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.SkipTake``1(System.Int64,System.Int64,PetaPoco.Sql)">
            <summary>
            Retrieves a range of records from result set
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="skip">The number of rows at the start of the result set to skip over</param>
            <param name="take">The number of rows to retrieve</param>
            <param name="sql">An SQL builder object representing the base SQL query and it's arguments</param>
            <returns>A List of results</returns>
            <remarks>
            PetaPoco will automatically modify the supplied SELECT statement to only retrieve the
            records for the specified range.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.Query``1(System.String,System.Object[])">
            <summary>
            Runs an SQL query, returning the results as an IEnumerable collection
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">The SQL query</param>
            <param name="args">Arguments to any embedded parameters in the SQL statement</param>
            <returns>An enumerable collection of result records</returns>
            <remarks>
            For some DB providers, care should be taken to not start a new Query before finishing with
            and disposing the previous one. In cases where this is an issue, consider using Fetch which
            returns the results as a List rather than an IEnumerable.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.Query``1(PetaPoco.Sql)">
            <summary>
            Runs an SQL query, returning the results as an IEnumerable collection
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">An SQL builder object representing the base SQL query and it's arguments</param>
            <returns>An enumerable collection of result records</returns>
            <remarks>
            For some DB providers, care should be taken to not start a new Query before finishing with
            and disposing the previous one. In cases where this is an issue, consider using Fetch which
            returns the results as a List rather than an IEnumerable.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.Exists``1(System.String,System.Object[])">
            <summary>
            Checks for the existance of a row matching the specified condition
            </summary>
            <typeparam name="T">The Type representing the table being queried</typeparam>
            <param name="sqlCondition">The SQL expression to be tested for (ie: the WHERE expression)</param>
            <param name="args">Arguments to any embedded parameters in the SQL statement</param>
            <returns>True if a record matching the condition is found.</returns>
        </member>
        <member name="M:PetaPoco.Database.Exists``1(System.Object)">
            <summary>
            Checks for the existance of a row with the specified primary key value.
            </summary>
            <typeparam name="T">The Type representing the table being queried</typeparam>
            <param name="primaryKey">The primary key value to look for</param>
            <returns>True if a record with the specified primary key value exists.</returns>
        </member>
        <member name="M:PetaPoco.Database.Single``1(System.Object)">
            <summary>
            Returns the record with the specified primary key value
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="primaryKey">The primary key value of the record to fetch</param>
            <returns>The single record matching the specified primary key value</returns>
            <remarks>
            Throws an exception if there are zero or more than one record with the specified primary key value.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.SingleOrDefault``1(System.Object)">
            <summary>
            Returns the record with the specified primary key value, or the default value if not found
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="primaryKey">The primary key value of the record to fetch</param>
            <returns>The single record matching the specified primary key value</returns>
            <remarks>
            If there are no records with the specified primary key value, default(T) (typically null) is returned.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.Single``1(System.String,System.Object[])">
            <summary>
            Runs a query that should always return a single row.
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">The SQL query</param>
            <param name="args">Arguments to any embedded parameters in the SQL statement</param>
            <returns>The single record matching the specified primary key value</returns>
            <remarks>
            Throws an exception if there are zero or more than one matching record
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.SingleOrDefault``1(System.String,System.Object[])">
            <summary>
            Runs a query that should always return either a single row, or no rows
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">The SQL query</param>
            <param name="args">Arguments to any embedded parameters in the SQL statement</param>
            <returns>The single record matching the specified primary key value, or default(T) if no matching rows</returns>
        </member>
        <member name="M:PetaPoco.Database.First``1(System.String,System.Object[])">
            <summary>
            Runs a query that should always return at least one return
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">The SQL query</param>
            <param name="args">Arguments to any embedded parameters in the SQL statement</param>
            <returns>The first record in the result set</returns>
        </member>
        <member name="M:PetaPoco.Database.FirstOrDefault``1(System.String,System.Object[])">
            <summary>
            Runs a query and returns the first record, or the default value if no matching records
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">The SQL query</param>
            <param name="args">Arguments to any embedded parameters in the SQL statement</param>
            <returns>The first record in the result set, or default(T) if no matching rows</returns>
        </member>
        <member name="M:PetaPoco.Database.Single``1(PetaPoco.Sql)">
            <summary>
            Runs a query that should always return a single row.
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>The single record matching the specified primary key value</returns>
            <remarks>
            Throws an exception if there are zero or more than one matching record
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.SingleOrDefault``1(PetaPoco.Sql)">
            <summary>
            Runs a query that should always return either a single row, or no rows
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>The single record matching the specified primary key value, or default(T) if no matching rows</returns>
        </member>
        <member name="M:PetaPoco.Database.First``1(PetaPoco.Sql)">
            <summary>
            Runs a query that should always return at least one return
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>The first record in the result set</returns>
        </member>
        <member name="M:PetaPoco.Database.FirstOrDefault``1(PetaPoco.Sql)">
            <summary>
            Runs a query and returns the first record, or the default value if no matching records
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>The first record in the result set, or default(T) if no matching rows</returns>
        </member>
        <member name="M:PetaPoco.Database.Insert(System.String,System.String,System.Object)">
            <summary>
            Performs an SQL Insert
            </summary>
            <param name="tableName">The name of the table to insert into</param>
            <param name="primaryKeyName">The name of the primary key column of the table</param>
            <param name="poco">The POCO object that specifies the column values to be inserted</param>
            <returns>The auto allocated primary key of the new record</returns>
        </member>
        <member name="M:PetaPoco.Database.Insert(System.String,System.String,System.Boolean,System.Object)">
            <summary>
            Performs an SQL Insert
            </summary>
            <param name="tableName">The name of the table to insert into</param>
            <param name="primaryKeyName">The name of the primary key column of the table</param>
            <param name="autoIncrement">True if the primary key is automatically allocated by the DB</param>
            <param name="poco">The POCO object that specifies the column values to be inserted</param>
            <returns>The auto allocated primary key of the new record, or null for non-auto-increment tables</returns>
            <remarks>Inserts a poco into a table.  If the poco has a property with the same name 
            as the primary key the id of the new record is assigned to it.  Either way,
            the new id is returned.</remarks>
        </member>
        <member name="M:PetaPoco.Database.Insert(System.Object)">
            <summary>
            Performs an SQL Insert
            </summary>
            <param name="poco">The POCO object that specifies the column values to be inserted</param>
            <returns>The auto allocated primary key of the new record, or null for non-auto-increment tables</returns>
            <remarks>The name of the table, it's primary key and whether it's an auto-allocated primary key are retrieved
            from the POCO's attributes</remarks>
        </member>
        <member name="M:PetaPoco.Database.Update(System.String,System.String,System.Object,System.Object)">
            <summary>
            Performs an SQL update
            </summary>
            <param name="tableName">The name of the table to update</param>
            <param name="primaryKeyName">The name of the primary key column of the table</param>
            <param name="poco">The POCO object that specifies the column values to be updated</param>
            <param name="primaryKeyValue">The primary key of the record to be updated</param>
            <returns>The number of affected records</returns>
        </member>
        <member name="M:PetaPoco.Database.Update(System.String,System.String,System.Object,System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Performs an SQL update
            </summary>
            <param name="tableName">The name of the table to update</param>
            <param name="primaryKeyName">The name of the primary key column of the table</param>
            <param name="poco">The POCO object that specifies the column values to be updated</param>
            <param name="primaryKeyValue">The primary key of the record to be updated</param>
            <param name="columns">The column names of the columns to be updated, or null for all</param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.Database.Update(System.String,System.String,System.Object)">
            <summary>
            Performs an SQL update
            </summary>
            <param name="tableName">The name of the table to update</param>
            <param name="primaryKeyName">The name of the primary key column of the table</param>
            <param name="poco">The POCO object that specifies the column values to be updated</param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.Database.Update(System.String,System.String,System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Performs an SQL update
            </summary>
            <param name="tableName">The name of the table to update</param>
            <param name="primaryKeyName">The name of the primary key column of the table</param>
            <param name="poco">The POCO object that specifies the column values to be updated</param>
            <param name="columns">The column names of the columns to be updated, or null for all</param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.Database.Update(System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Performs an SQL update
            </summary>
            <param name="poco">The POCO object that specifies the column values to be updated</param>
            <param name="columns">The column names of the columns to be updated, or null for all</param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.Database.Update(System.Object)">
            <summary>
            Performs an SQL update
            </summary>
            <param name="poco">The POCO object that specifies the column values to be updated</param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.Database.Update(System.Object,System.Object)">
            <summary>
            Performs an SQL update
            </summary>
            <param name="poco">The POCO object that specifies the column values to be updated</param>
            <param name="primaryKeyValue">The primary key of the record to be updated</param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.Database.Update(System.Object,System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Performs an SQL update
            </summary>
            <param name="poco">The POCO object that specifies the column values to be updated</param>
            <param name="primaryKeyValue">The primary key of the record to be updated</param>
            <param name="columns">The column names of the columns to be updated, or null for all</param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.Database.Update``1(System.String,System.Object[])">
            <summary>
            Performs an SQL update
            </summary>
            <typeparam name="T">The POCO class who's attributes specify the name of the table to update</typeparam>
            <param name="sql">The SQL update and condition clause (ie: everything after "UPDATE tablename"</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.Database.Update``1(PetaPoco.Sql)">
            <summary>
            Performs an SQL update
            </summary>
            <typeparam name="T">The POCO class who's attributes specify the name of the table to update</typeparam>
            <param name="sql">An SQL builder object representing the SQL update and condition clause (ie: everything after "UPDATE tablename"</param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.Database.Delete(System.String,System.String,System.Object)">
            <summary>
            Performs and SQL Delete
            </summary>
            <param name="tableName">The name of the table to delete from</param>
            <param name="primaryKeyName">The name of the primary key column</param>
            <param name="poco">The POCO object whose primary key value will be used to delete the row</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:PetaPoco.Database.Delete(System.String,System.String,System.Object,System.Object)">
            <summary>
            Performs and SQL Delete
            </summary>
            <param name="tableName">The name of the table to delete from</param>
            <param name="primaryKeyName">The name of the primary key column</param>
            <param name="poco">The POCO object whose primary key value will be used to delete the row (or null to use the supplied primary key value)</param>
            <param name="primaryKeyValue">The value of the primary key identifing the record to be deleted (or null, or get this value from the POCO instance)</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:PetaPoco.Database.Delete(System.Object)">
            <summary>
            Performs an SQL Delete
            </summary>
            <param name="poco">The POCO object specifying the table name and primary key value of the row to be deleted</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:PetaPoco.Database.Delete``1(System.Object)">
            <summary>
            Performs an SQL Delete
            </summary>
            <typeparam name="T">The POCO class whose attributes identify the table and primary key to be used in the delete</typeparam>
            <param name="pocoOrPrimaryKey">The value of the primary key of the row to delete</param>
            <returns></returns>
        </member>
        <member name="M:PetaPoco.Database.Delete``1(System.String,System.Object[])">
            <summary>
            Performs an SQL Delete
            </summary>
            <typeparam name="T">The POCO class who's attributes specify the name of the table to delete from</typeparam>
            <param name="sql">The SQL condition clause identifying the row to delete (ie: everything after "DELETE FROM tablename"</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.Database.Delete``1(PetaPoco.Sql)">
            <summary>
            Performs an SQL Delete
            </summary>
            <typeparam name="T">The POCO class who's attributes specify the name of the table to delete from</typeparam>
            <param name="sql">An SQL builder object representing the SQL condition clause identifying the row to delete (ie: everything after "UPDATE tablename"</param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.Database.IsNew(System.String,System.Object)">
            <summary>
            Check if a poco represents a new row
            </summary>
            <param name="primaryKeyName">The name of the primary key column</param>
            <param name="poco">The object instance whose "newness" is to be tested</param>
            <returns>True if the POCO represents a record already in the database</returns>
            <remarks>This method simply tests if the POCO's primary key column property has been set to something non-zero.</remarks>
        </member>
        <member name="M:PetaPoco.Database.IsNew(System.Object)">
            <summary>
            Check if a poco represents a new row
            </summary>
            <param name="poco">The object instance whose "newness" is to be tested</param>
            <returns>True if the POCO represents a record already in the database</returns>
            <remarks>This method simply tests if the POCO's primary key column property has been set to something non-zero.</remarks>
        </member>
        <member name="M:PetaPoco.Database.Save(System.String,System.String,System.Object)">
            <summary>
            Saves a POCO by either performing either an SQL Insert or SQL Update
            </summary>
            <param name="tableName">The name of the table to be updated</param>
            <param name="primaryKeyName">The name of the primary key column</param>
            <param name="poco">The POCO object to be saved</param>
        </member>
        <member name="M:PetaPoco.Database.Save(System.Object)">
            <summary>
            Saves a POCO by either performing either an SQL Insert or SQL Update
            </summary>
            <param name="poco">The POCO object to be saved</param>
        </member>
        <member name="M:PetaPoco.Database.Fetch``3(System.Func{``0,``1,``2},System.String,System.Object[])">
            <summary>
            Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="TRet">The returned list POCO type</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.Database.Fetch``4(System.Func{``0,``1,``2,``3},System.String,System.Object[])">
            <summary>
            Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="TRet">The returned list POCO type</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.Database.Fetch``5(System.Func{``0,``1,``2,``3,``4},System.String,System.Object[])">
            <summary>
            Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <typeparam name="TRet">The returned list POCO type</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.Database.Query``3(System.Func{``0,``1,``2},System.String,System.Object[])">
            <summary>
            Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.Database.Query``4(System.Func{``0,``1,``2,``3},System.String,System.Object[])">
            <summary>
            Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.Database.Query``5(System.Func{``0,``1,``2,``3,``4},System.String,System.Object[])">
            <summary>
            Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.Database.Fetch``3(System.Func{``0,``1,``2},PetaPoco.Sql)">
            <summary>
            Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="TRet">The returned list POCO type</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.Database.Fetch``4(System.Func{``0,``1,``2,``3},PetaPoco.Sql)">
            <summary>
            Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="TRet">The returned list POCO type</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.Database.Fetch``5(System.Func{``0,``1,``2,``3,``4},PetaPoco.Sql)">
            <summary>
            Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <typeparam name="TRet">The returned list POCO type</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.Database.Query``3(System.Func{``0,``1,``2},PetaPoco.Sql)">
            <summary>
            Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.Database.Query``4(System.Func{``0,``1,``2,``3},PetaPoco.Sql)">
            <summary>
            Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.Database.Query``5(System.Func{``0,``1,``2,``3,``4},PetaPoco.Sql)">
            <summary>
            Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.Database.Fetch``2(System.String,System.Object[])">
            <summary>
            Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.Database.Fetch``3(System.String,System.Object[])">
            <summary>
            Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.Database.Fetch``4(System.String,System.Object[])">
            <summary>
            Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.Database.Query``2(System.String,System.Object[])">
            <summary>
            Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.Database.Query``3(System.String,System.Object[])">
            <summary>
            Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.Database.Query``4(System.String,System.Object[])">
            <summary>
            Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.Database.Fetch``2(PetaPoco.Sql)">
            <summary>
            Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.Database.Fetch``3(PetaPoco.Sql)">
            <summary>
            Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.Database.Fetch``4(PetaPoco.Sql)">
            <summary>
            Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.Database.Query``2(PetaPoco.Sql)">
            <summary>
            Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.Database.Query``3(PetaPoco.Sql)">
            <summary>
            Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.Database.Query``4(PetaPoco.Sql)">
            <summary>
            Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.Database.Query``1(System.Type[],System.Object,System.String,System.Object[])">
            <summary>
            Performs a multi-poco query
            </summary>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="types">An array of Types representing the POCO types of the returned result set.</param>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.Database.FormatCommand(System.Data.IDbCommand)">
            <summary>
            Formats the contents of a DB command for display
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:PetaPoco.Database.FormatCommand(System.String,System.Object[])">
            <summary>
            Formats an SQL query and it's arguments for display
            </summary>
            <param name="sql"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
    </members>
</doc>
